----------------
Import MetaInfo:

username: None
django_settings: django_settings.hsv_settings
collection: Sample HSV Import 14-6-21 – Amt/Hofstaat bugfix; CStandhartinger
spacy_model: using local model
existing_annotations: data/viecpro_HSV_0.jsonl
path_df: data/3_HSV-angepasst-IMPORT.xlsx
path_hofstaat: data/Kürzel-Hofstaate-EX-ACC-2021-06-02.xlsx
path_aemter: data/Kürzel-Ämter-ACC-EX-2021-02-08.xlsx
path_abbreviations: data/EXCEL-ACCESS_Kürzel-Titel-Orden-2021-01-28.xlsx
logger_level: 20
collection_team: ['MRomberg', 'MKaiser', 'CStandhartinger']
use_stopvalues: False
is_test: False
sample_frame: using sample frame
without_testing: True
log_msg: None
----------------


get_model >>> Used config cfg class for model configuration
----------------
Using the local model: models/viecpro_ner_hsv_5-21/

NLP-pipeline:
	ner
	use_existing_annotations
	add_brackets
	rename_functions
	remove_names
	date_prepocissions
	create_chunks
----------------



--------- Start of row | 10 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> [Salzbrunner?]
person_process_field_familienname >>> fam1: [Salzbrunner?]
person_process_field_familienname >>> fam2: <re.Match object; span=(0, 14), match='[Salzbrunner?]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- , Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- , Hoffräulein)
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = '(Kammer- , Hoffräulein)'
process_chunks >>> cD [], cF ['Kammerdienerin'], cH EM, CA (Kammer- , Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: [Salzbrunner?], Maria Käterl >}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- , Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- , Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Kammerdienerin']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerdienerin
process_chunks >>>  Source Person Relation: 10 -- [Salzbrunner?], Maria Käterl  -- {'related_person': <Person: [Salzbrunner?], Maria Käterl >, 'related_institution': <Institution: (Kammer- , Hoffräulein) (EM (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Kammerdienerin>}

--------- Start of row | 11 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> [Tanner]
person_process_field_familienname >>> fam1: [Tanner]
person_process_field_familienname >>> fam2: <re.Match object; span=(0, 8), match='[Tanner]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammertürhüter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammertürhüter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammertürhüter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammertürhüter'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: [Tanner], Georg>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Kammertürhüter']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammertürhüter
process_chunks >>>  Source Person Relation: 11 -- [Tanner], Georg -- {'related_person': <Person: [Tanner], Georg>, 'related_institution': <Institution: Dummy Amt (EM (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Kammertürhüter>}

--------- Start of row | 12 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aach (Ach, Arch)
person_process_field_familienname >>> fam1: Aach
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 16), match='(Ach, Arch)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1657-07-16', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer', 'Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1657-07-16', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer', 'Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1657-07-16', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer', 'Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1657-07-16', 'bis 1677<1677-06-30>'], cF ['Kämmerer', 'Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1657-07-16, new: 1657-07-16<1657-07-16>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1657-07-16<1657-07-16>
chunk_process_datum >>> rel, chunk edw: 1657-07-16<1657-07-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aach, Prosper >, 'start_date_written': '1657-07-16<1657-07-16>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer', 'Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 12 -- Aach, Prosper  -- {'related_person': <Person: Aach, Prosper >, 'start_date_written': '1657-07-16<1657-07-16>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 13 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abel
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Rottmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Rottmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Rottmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Trabantengarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1663-00-00'], cF ['Rottmeister'], cH LW, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abel, Johann>, 'start_date_written': '1663<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (LW)
chunk_create_relations >>> create relations called for c_F ['Rottmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Rottmeister
process_chunks >>>  Source Person Relation: 13 -- Abel, Johann -- {'related_person': <Person: Abel, Johann>, 'start_date_written': '1663<1663-06-30>', 'related_institution': <Institution: Dummy Amt (LW)>, 'relation_type': <PersonInstitutionRelation: Rottmeister>}

--------- Start of row | 14 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abel
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-04-01'], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-04-01'], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-04-01'], 'HOFSTAAT': 'J', 'FUNKTION': ['Hartschier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Hartschierenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1701-04-01'], cF ['Hartschier'], cH J, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-04-01, new: 1701-04-01<1701-04-01>
chunk_process_datum >>> rel, chunk sdw: 1701-04-01<1701-04-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abel, Johann Heinrich>, 'start_date_written': '1701-04-01<1701-04-01>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Hartschier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hartschier
process_chunks >>>  Source Person Relation: 14 -- Abel, Johann Heinrich -- {'related_person': <Person: Abel, Johann Heinrich>, 'start_date_written': '1701-04-01<1701-04-01>', 'related_institution': <Institution: Dummy Amt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Hartschier>}

--------- Start of row | 15 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abele
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Geh. Rat, Sekretär, 1672/73-00-00, Geh. Konferenzrat, 1672/73-00-00, Sekretär, 1672/73-00-00, 1680-00-00, Referendar, 1674/75-00-00, 1677-00-00, Rat, Hof-, 1675/76-00-00, Rat, ksl., 1675/76-00-00, 1677-00-00, Referendar, Konferenzen, 1675/76-00-00, Rat, ksl., Ö Expedition, Sekretär, Konferenzen, 1677-00-00, Hofrat, 1677-00-00, Hofkammerpräsident, 1681, 1683, Geh. Rat, 1685-11-01 / ab)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :15, Geh. Rat , Sekretär (1672/73-00-00) ; Geh. Konferenzrat (1672/73-00-00) ; Sekretär (1672/73-00-00 bis 1680-00-00) ; Referendar (1674/75-00-00 bis 1677-00-00) ; Rat, Hof- (1675/76-00-00) ; Rat, ksl. (1675/76-00-00 bis 1677-00-00) ; Referendar in allen Konferenzen (1675/76-00-00) ; Rat, ksl. der Ö Expedition; Sekretär in allen Konferenzen (1677-00-00) ; Hofrat (1677-00-00) ; Hofkammerpräsident (1681 bis 1683) , (Parvenue) ;Geh. Rat (1685-11-01 / ab dann 2.000 fl Gehalt, [{'start': 0, 'end': 8, 'token_start': 0, 'token_end': 2, 'label': 'FUNKTION'}, {'start': 11, 'end': 19, 'token_start': 4, 'token_end': 4, 'label': 'FUNKTION'}, {'start': 21, 'end': 34, 'token_start': 6, 'token_end': 12, 'label': 'DATUM'}, {'start': 37, 'end': 54, 'token_start': 15, 'token_end': 17, 'label': 'FUNKTION'}, {'start': 56, 'end': 69, 'token_start': 19, 'token_end': 25, 'label': 'DATUM'}, {'start': 72, 'end': 80, 'token_start': 28, 'token_end': 28, 'label': 'FUNKTION'}, {'start': 82, 'end': 95, 'token_start': 30, 'token_end': 36, 'label': 'DATUM'}, {'start': 100, 'end': 110, 'token_start': 38, 'token_end': 42, 'label': 'DATUM'}, {'start': 113, 'end': 123, 'token_start': 45, 'token_end': 45, 'label': 'FUNKTION'}, {'start': 125, 'end': 138, 'token_start': 47, 'token_end': 53, 'label': 'DATUM'}, {'start': 143, 'end': 153, 'token_start': 55, 'token_end': 59, 'label': 'DATUM'}, {'start': 156, 'end': 165, 'token_start': 62, 'token_end': 64, 'label': 'FUNKTION'}, {'start': 167, 'end': 180, 'token_start': 66, 'token_end': 72, 'label': 'DATUM'}, {'start': 183, 'end': 192, 'token_start': 75, 'token_end': 78, 'label': 'FUNKTION'}, {'start': 194, 'end': 207, 'token_start': 80, 'token_end': 86, 'label': 'DATUM'}, {'start': 212, 'end': 222, 'token_start': 88, 'token_end': 92, 'label': 'DATUM'}, {'start': 225, 'end': 235, 'token_start': 95, 'token_end': 95, 'label': 'FUNKTION'}, {'start': 245, 'end': 256, 'token_start': 98, 'token_end': 98, 'label': 'FUNKTION'}, {'start': 258, 'end': 271, 'token_start': 100, 'token_end': 106, 'label': 'DATUM'}, {'start': 274, 'end': 283, 'token_start': 109, 'token_end': 112, 'label': 'FUNKTION'}, {'start': 288, 'end': 300, 'token_start': 114, 'token_end': 115, 'label': 'AMT'}, {'start': 302, 'end': 310, 'token_start': 117, 'token_end': 117, 'label': 'FUNKTION'}, {'start': 333, 'end': 343, 'token_start': 122, 'token_end': 126, 'label': 'DATUM'}, {'start': 346, 'end': 352, 'token_start': 129, 'token_end': 129, 'label': 'FUNKTION'}, {'start': 354, 'end': 364, 'token_start': 131, 'token_end': 135, 'label': 'DATUM'}, {'start': 367, 'end': 385, 'token_start': 138, 'token_end': 138, 'label': 'FUNKTION'}, {'start': 387, 'end': 391, 'token_start': 140, 'token_end': 140, 'label': 'DATUM'}, {'start': 396, 'end': 400, 'token_start': 142, 'token_end': 142, 'label': 'DATUM'}, {'start': 404, 'end': 422, 'token_start': 146, 'token_end': 148, 'label': 'FUNKTION'}, {'start': 424, 'end': 439, 'token_start': 150, 'token_end': 156, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Geh. Rat, Sekretär, 1672/73-00-00, Geh. Konferenzrat, 1672/73-00-00, Sekretär, 1672/73-00-00, 1680-00-00, Referendar, 1674/75-00-00, 1677-00-00, Rat, Hof-, 1675/76-00-00, Rat, ksl., 1675/76-00-00, 1677-00-00, Referendar, Konferenzen, 1675/76-00-00, Rat, ksl., Ö Expedition, Sekretär, 1677-00-00, Hofrat, 1677-00-00, Hofkammerpräsident, 1681, 1683, Parvenue) ;, . Rat (1685-11-]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Geh. Rat, Sekretär, 1672/73-00-00, Geh. Konferenzrat, 1672/73-00-00, Sekretär, 1672/73-00-00, 1680-00-00, Referendar, 1674/75-00-00, 1677-00-00, Rat, Hof-, 1675/76-00-00, Rat, ksl., 1675/76-00-00, 1677-00-00, Referendar, Konferenzen, 1675/76-00-00, Rat, ksl., Ö Expedition, Sekretär, 1677-00-00, Hofrat, 1677-00-00, Hofkammerpräsident, 1681, 1683, Parvenue) ;, . Rat (1685-11-)
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = Ö Expedition
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(12) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'Sekretär'], 'AMT': None}, {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Konferenzrat'], 'AMT': None}, {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1680<1680-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}, {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Referendar'], 'AMT': None}, {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat'], 'AMT': None}, {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Rat, ksl.'], 'AMT': None}, {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Referendar', 'Konferenzen'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Rat, ksl.'], 'AMT': 'Ö Expedition'}, {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}, {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat'], 'AMT': None}, {'DATUM': ['1681', 'bis 1683<1683-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerpräsident'], 'AMT': None}, {'DATUM': ['. Rat (1685-11-'], 'HOFSTAAT': None, 'FUNKTION': ['Parvenue) ;'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'Sekretär'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Konferenzrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1680<1680-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Referendar'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	5: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Rat, ksl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	6: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Referendar', 'Konferenzen'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	7: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Rat, ksl.'], 'AMT': 'Ö Expedition'}
NLP COMPONENT >>> CreateChunks.py >>> 	8: chunk: {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	9: chunk: {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	10: chunk: {'DATUM': ['1681', 'bis 1683<1683-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerpräsident'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	11: chunk: {'DATUM': ['. Rat (1685-11-'], 'HOFSTAAT': None, 'FUNKTION': ['Parvenue) ;'], 'AMT': None}
process_chunks >>> len_doc_chunks: 12, len Ämter-Spalte: 6
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'Sekretär'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Konferenzrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1680<1680-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Referendar'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Rat, ksl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Referendar', 'Konferenzen'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Rat, ksl.'], 'AMT': 'Ö Expedition'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1681', 'bis 1683<1683-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerpräsident'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['. Rat (1685-11-'], 'HOFSTAAT': 'L', 'FUNKTION': ['Parvenue) ;'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GK; Ö-HKz; GR / Sekretarien; HK; Ö Expedition; 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GK'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Ö Expedition'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>'], cF ['Geh. Rat', 'Sekretär'], cH L, CA GK
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GK
chunk_process_amt_NEW >>> c_A was: GK and amt after matching with amt index is: Geheime Konferenz
chunk_process_amt_NEW >>>  Return value of inst2 = Geheime Konferenz (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Rat', 'Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 15 -- Abele, Christoph -- {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'related_institution': <Institution: Geheime Konferenz (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär>}
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>'], cF ['Geh. Konferenzrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Konferenzrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Konferenzrat
process_chunks >>>  Source Person Relation: 15 -- Abele, Christoph -- {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Konferenzrat>}
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1680<1680-06-30>'], cF ['Sekretär'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1680-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1680-06-30>
helper_hsv_post_process_dates >>> old: bis 1680<1680-06-30>, new: bis 1680<1680-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1680<1680-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 15 -- Abele, Christoph -- {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1680<1680-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär>}
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], cF ['Referendar'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk edw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Referendar']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Referendar
process_chunks >>>  Source Person Relation: 15 -- Abele, Christoph -- {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Referendar>}
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>'], cF ['Hofrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofrat
process_chunks >>>  Source Person Relation: 15 -- Abele, Christoph -- {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofrat>}
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Rat, ksl.'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Rat, ksl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Rat, ksl.
process_chunks >>>  Source Person Relation: 15 -- Abele, Christoph -- {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Rat, ksl.>}
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>'], cF ['Referendar', 'Konferenzen'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Referendar', 'Konferenzen']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Referendar
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konferenzen
process_chunks >>>  Source Person Relation: 15 -- Abele, Christoph -- {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Konferenzen>}
process_chunks >>> cD [], cF ['Rat, ksl.'], cH L, CA Ö Expedition
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Ö Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = Ö Expedition (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Rat, ksl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Rat, ksl.
process_chunks >>>  Source Person Relation: 15 -- Abele, Christoph -- {'related_person': <Person: Abele, Christoph>, 'related_institution': <Institution: Ö Expedition (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Rat, ksl.>}
process_chunks >>> cD ['1677-00-00'], cF ['Sekretär'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677<1677-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 15 -- Abele, Christoph -- {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1677<1677-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär>}
process_chunks >>> cD ['1677-00-00'], cF ['Hofrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677<1677-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofrat
process_chunks >>>  Source Person Relation: 15 -- Abele, Christoph -- {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1677<1677-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofrat>}
process_chunks >>> cD ['1681', 'bis 1683<1683-06-30>'], cF ['Hofkammerpräsident'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1681, new: 1681<1681-06-30>
helper_hsv_post_process_dates >>> inner date: <1683-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1683-06-30>
helper_hsv_post_process_dates >>> old: bis 1683<1683-06-30>, new: bis 1683<1683-06-30>
chunk_process_datum >>> rel, chunk sdw: 1681<1681-06-30>
chunk_process_datum >>> rel, chunk edw: 1681<1681-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1681<1681-06-30>', 'end_date_written': 'bis 1683<1683-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkammerpräsident']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkammerpräsident
process_chunks >>>  Source Person Relation: 15 -- Abele, Christoph -- {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1681<1681-06-30>', 'end_date_written': 'bis 1683<1683-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkammerpräsident>}
process_chunks >>> cD ['. Rat (1685-11-'], cF ['Parvenue) ;'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: . Rat (1685-11-, new: . Rat (1685-11-
chunk_process_datum >>> rel, chunk sdw: . Rat (1685-11-
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '. Rat (1685-11-'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Parvenue) ;']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Parvenue) ;
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' .rat(1685-11- ' due to error Could not interpret date.: 
process_chunks >>>  Source Person Relation: 15 -- Abele, Christoph -- {'related_person': <Person: Abele, Christoph>, 'start_date_written': '. Rat (1685-11-', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Parvenue) ;>}

--------- Start of row | 16 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abele
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR  /  Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR  '
process_chunks >>> cD ['1677-00-00'], cF ['Sekretär'], cH L, CA HKR  
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677<1677-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Ferdinand>, 'start_date_written': '1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR  
chunk_process_amt_NEW >>> c_A was: HKR   and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 16 -- Abele, Ferdinand -- {'related_person': <Person: Abele, Ferdinand>, 'start_date_written': '1677<1677-06-30>', 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär>}

--------- Start of row | 17 | -------------- 
replacer >>> r_fun: replaced ,g with: , g
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abele von , zu Lilienberg
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1657-00-00', '1665-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Beamter'], 'AMT': None}, {'DATUM': ['1681-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerpräsident'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1657-00-00', '1665-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Beamter'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1681-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerpräsident'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1657-00-00', '1665-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär', 'Beamter'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1681-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerpräsident'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK; Ö-HKz
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  Ö-HKz
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' Ö-HKz'
process_chunks >>> cD ['1657-00-00', '1665-00-00'], cF ['Sekretär', 'Beamter'], cH L, CA HK
helper_hsv_post_process_dates >>> old: 1657-00-00, new: 1657<1657-06-30>
helper_hsv_post_process_dates >>> old: 1665-00-00, new: 1665<1665-06-30>
chunk_process_datum >>> rel, chunk sdw: 1657<1657-06-30>
chunk_process_datum >>> rel, chunk edw: 1657<1657-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele von , zu Lilienberg, Christoph Ignaz>, 'start_date_written': '1657<1657-06-30>', 'end_date_written': '1665<1665-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär', 'Beamter']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Beamter
process_chunks >>>  Source Person Relation: 17 -- Abele von , zu Lilienberg, Christoph Ignaz -- {'related_person': <Person: Abele von , zu Lilienberg, Christoph Ignaz>, 'start_date_written': '1657<1657-06-30>', 'end_date_written': '1665<1665-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Beamter>}
process_chunks >>> cD ['1681-00-00'], cF ['Hofkammerpräsident'], cH L, CA  Ö-HKz
helper_hsv_post_process_dates >>> old: 1681-00-00, new: 1681<1681-06-30>
chunk_process_datum >>> rel, chunk sdw: 1681<1681-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele von , zu Lilienberg, Christoph Ignaz>, 'start_date_written': '1681<1681-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  Ö-HKz
chunk_process_amt_NEW >>> c_A was:  Ö-HKz and amt after matching with amt index is: Österreichische Hofkanzlei
chunk_process_amt_NEW >>>  Return value of inst2 = Österreichische Hofkanzlei (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkammerpräsident']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkammerpräsident
process_chunks >>>  Source Person Relation: 17 -- Abele von , zu Lilienberg, Christoph Ignaz -- {'related_person': <Person: Abele von , zu Lilienberg, Christoph Ignaz>, 'start_date_written': '1681<1681-06-30>', 'related_institution': <Institution: Österreichische Hofkanzlei (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkammerpräsident>}

--------- Start of row | 18 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abend
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Instrumentalist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Instrumentalist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Instrumentalist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofmusikanten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA '
process_chunks >>> cD ['1704-00-00'], cF ['Instrumentalist'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abend, Andreas>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Instrumentalist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Instrumentalist
process_chunks >>>  Source Person Relation: 18 -- Abend, Andreas -- {'related_person': <Person: Abend, Andreas>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Instrumentalist>}

--------- Start of row | 19 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abensberg-Traun
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = VodM.
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Oberkommissar'], 'AMT': 'VodM.'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Oberkommissar'], 'AMT': 'VodM.'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Oberkommissar'], 'AMT': 'VodM.'}
helper_hsv_match_amt_with_funct >>> r_A = NÖ Landschaftskommissariat
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = VodM.
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'VodM.'
process_chunks >>> cD ['1704-00-00'], cF ['Oberkommissar'], cH Dummy Hofstaat, CA VodM.
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Franz Anton>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: VodM.
chunk_process_amt_NEW >>>  Return value of inst2 = VodM. (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Oberkommissar']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Oberkommissar
process_chunks >>>  Source Person Relation: 19 -- Abensberg-Traun, Franz Anton -- {'related_person': <Person: Abensberg-Traun, Franz Anton>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: VodM. (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Oberkommissar>}

--------- Start of row | 20 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abensberg-Traun (Abensperg-Traun, Abensperg , Traun)
person_process_field_familienname >>> fam1: Abensberg-Traun
person_process_field_familienname >>> fam2: <re.Match object; span=(16, 52), match='(Abensperg-Traun, Abensperg , Traun)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Landmarschall, 1658-09-30 / 1698-00-00, Kämmerer, 1669-03-26 / 1701-00-00 / 1704-00-00, OKäA, Geh. Rat, ksl., Landmarschall, Ö, 1698-00-00, Geh. Rat, 1701-00-00 / 1704-00-00, GR, Landmarschall, Generallandoberst, NÖ, 1701-00-00, NÖ-R, Geh. Konferenzrat, 1701-00-00 / 1704-00-00, GK, Generallandoberst, 1701-00-00, NÖ, Generallandoberst, 1704-00-00, Ö-udE, Landmarschall, Generallandoberst, Ö-udE., 1704-00-00, NÖ-LG)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :20, Landmarschall (1658-09-30 / 1698-00-00) \ Empfang des Kaisers vor Wien \ NÖ; Kämmerer (1669-03-26 / 1701-00-00 / 1704-00-00) \ Eid \ OKäA; Geh. Rat, ksl., Landmarschall in Ö (1698-00-00) \ Liste RGV; Geh. Rat (1701-00-00 / 1704-00-00) \ GR; Landmarschall , Generallandoberst NÖ (1701-00-00) \ NÖ-R; Geh. Konferenzrat (1701-00-00 / 1704-00-00) GK; Generallandoberst (1701-00-00) \ NÖ; Generallandoberst (1704-00-00) \ Ö-udE; Landmarschall , Generallandoberst in Ö-udE. (1704-00-00) \ NÖ-LG, [{'start': 0, 'end': 13, 'token_start': 0, 'token_end': 0, 'label': 'FUNKTION'}, {'start': 15, 'end': 38, 'token_start': 2, 'token_end': 12, 'label': 'DATUM'}, {'start': 77, 'end': 85, 'token_start': 23, 'token_end': 23, 'label': 'FUNKTION'}, {'start': 87, 'end': 123, 'token_start': 25, 'token_end': 41, 'label': 'DATUM'}, {'start': 133, 'end': 137, 'token_start': 46, 'token_end': 46, 'label': 'AMT'}, {'start': 139, 'end': 147, 'token_start': 48, 'token_end': 50, 'label': 'FUNKTION'}, {'start': 155, 'end': 168, 'token_start': 55, 'token_end': 55, 'label': 'FUNKTION'}, {'start': 172, 'end': 173, 'token_start': 57, 'token_end': 57, 'label': 'AMT'}, {'start': 175, 'end': 185, 'token_start': 59, 'token_end': 63, 'label': 'DATUM'}, {'start': 200, 'end': 208, 'token_start': 69, 'token_end': 71, 'label': 'FUNKTION'}, {'start': 210, 'end': 233, 'token_start': 73, 'token_end': 83, 'label': 'DATUM'}, {'start': 237, 'end': 239, 'token_start': 86, 'token_end': 86, 'label': 'FUNKTION'}, {'start': 241, 'end': 254, 'token_start': 88, 'token_end': 88, 'label': 'FUNKTION'}, {'start': 257, 'end': 274, 'token_start': 90, 'token_end': 90, 'label': 'FUNKTION'}, {'start': 275, 'end': 277, 'token_start': 91, 'token_end': 91, 'label': 'AMT'}, {'start': 279, 'end': 289, 'token_start': 93, 'token_end': 97, 'label': 'DATUM'}, {'start': 293, 'end': 297, 'token_start': 100, 'token_end': 100, 'label': 'AMT'}, {'start': 299, 'end': 316, 'token_start': 102, 'token_end': 104, 'label': 'FUNKTION'}, {'start': 318, 'end': 341, 'token_start': 106, 'token_end': 116, 'label': 'DATUM'}, {'start': 343, 'end': 345, 'token_start': 118, 'token_end': 118, 'label': 'AMT'}, {'start': 347, 'end': 364, 'token_start': 120, 'token_end': 120, 'label': 'FUNKTION'}, {'start': 366, 'end': 376, 'token_start': 122, 'token_end': 126, 'label': 'DATUM'}, {'start': 380, 'end': 382, 'token_start': 129, 'token_end': 129, 'label': 'AMT'}, {'start': 384, 'end': 401, 'token_start': 131, 'token_end': 131, 'label': 'FUNKTION'}, {'start': 403, 'end': 413, 'token_start': 133, 'token_end': 137, 'label': 'DATUM'}, {'start': 417, 'end': 422, 'token_start': 140, 'token_end': 140, 'label': 'AMT'}, {'start': 424, 'end': 437, 'token_start': 142, 'token_end': 142, 'label': 'FUNKTION'}, {'start': 440, 'end': 457, 'token_start': 144, 'token_end': 144, 'label': 'FUNKTION'}, {'start': 461, 'end': 467, 'token_start': 146, 'token_end': 146, 'label': 'AMT'}, {'start': 469, 'end': 479, 'token_start': 148, 'token_end': 152, 'label': 'DATUM'}, {'start': 483, 'end': 488, 'token_start': 155, 'token_end': 155, 'label': 'AMT'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Landmarschall, 1658-09-30 / 1698-00-00, Kämmerer, 1669-03-26 / 1701-00-00 / 1704-00-00, OKäA, Geh. Rat, Landmarschall, Ö, 1698-00-00, Geh. Rat, 1701-00-00 / 1704-00-00, GR, Landmarschall, Generallandoberst, NÖ, 1701-00-00, NÖ-R, Geh. Konferenzrat, 1701-00-00 / 1704-00-00, GK, Generallandoberst, 1701-00-00, NÖ, Generallandoberst, 1704-00-00, Ö-udE, Landmarschall, Generallandoberst, Ö-udE., 1704-00-00, NÖ-LG]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Landmarschall, 1658-09-30 / 1698-00-00, Kämmerer, 1669-03-26 / 1701-00-00 / 1704-00-00, OKäA, Geh. Rat, Landmarschall, Ö, 1698-00-00, Geh. Rat, 1701-00-00 / 1704-00-00, GR, Landmarschall, Generallandoberst, NÖ, 1701-00-00, NÖ-R, Geh. Konferenzrat, 1701-00-00 / 1704-00-00, GK, Generallandoberst, 1701-00-00, NÖ, Generallandoberst, 1704-00-00, Ö-udE, Landmarschall, Generallandoberst, Ö-udE., 1704-00-00, NÖ-LG)
NLP COMPONENT >>> RenameFunctions.py >>> removing Ö from ents
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = OKäA
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = NÖ
NLP COMPONENT >>> CreateChunks.py >>> In else clause of chunks, chunk = {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'NÖ'}
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = GK
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = NÖ
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = Ö-udE
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = Ö-udE.
NLP COMPONENT >>> CreateChunks.py >>> In else clause of chunks, chunk = {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'Ö-udE.'}
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(11) = [{'DATUM': ['1658-09-30 / 1698-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}, {'DATUM': ['1669-03-26 / 1701-00-00 / 1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': 'OKäA'}, {'DATUM': ['1698-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'Landmarschall'], 'AMT': None}, {'DATUM': ['1701-00-00 / 1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'GR'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'NÖ'}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}, {'DATUM': ['1701-00-00 / 1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Konferenzrat'], 'AMT': 'GK'}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Generallandoberst'], 'AMT': 'NÖ'}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Generallandoberst'], 'AMT': 'Ö-udE'}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'Ö-udE.'}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1658-09-30 / 1698-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1669-03-26 / 1701-00-00 / 1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': 'OKäA'}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1698-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'Landmarschall'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1701-00-00 / 1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'GR'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'NÖ'}
NLP COMPONENT >>> CreateChunks.py >>> 	5: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	6: chunk: {'DATUM': ['1701-00-00 / 1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Konferenzrat'], 'AMT': 'GK'}
NLP COMPONENT >>> CreateChunks.py >>> 	7: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Generallandoberst'], 'AMT': 'NÖ'}
NLP COMPONENT >>> CreateChunks.py >>> 	8: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Generallandoberst'], 'AMT': 'Ö-udE'}
NLP COMPONENT >>> CreateChunks.py >>> 	9: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'Ö-udE.'}
NLP COMPONENT >>> CreateChunks.py >>> 	10: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 11, len Ämter-Spalte: 8
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1658-09-30 / 1698-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-03-26 / 1701-00-00 / 1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': 'OKäA'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1698-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'Landmarschall'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00 / 1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'GR'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'NÖ'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00 / 1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Konferenzrat'], 'AMT': 'GK'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Generallandoberst'], 'AMT': 'NÖ'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Generallandoberst'], 'AMT': 'Ö-udE'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'Ö-udE.'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR; KR; NÖ; NÖ-LG; NÖ-R; OKäA; Ö-udE.;
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GK'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Ö-udE'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Ö-udE.'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD ['1658-09-30 / 1698-00-00'], cF ['Landmarschall'], cH L, CA GR
helper_hsv_post_process_dates >>> old: 1658-09-30 / 1698-00-00, new: 1658-09-30 / 1698-00-00
chunk_process_datum >>> rel, chunk sdw: 1658-09-30 / 1698-00-00
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1658-09-30 / 1698-00-00'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Landmarschall']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landmarschall
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1658-09-30/1698-00-00 ' due to error Could not interpret date.: 
process_chunks >>>  Source Person Relation: 20 -- Abensberg-Traun, Otto Ehrenreich -- {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1658-09-30 / 1698-00-00', 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Landmarschall>}
process_chunks >>> cD ['1669-03-26 / 1701-00-00 / 1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1669-03-26 / 1701-00-00 / 1704-00-00, new: 1669-03-26 / 1701-00-00 / 1704-00-00
chunk_process_datum >>> rel, chunk sdw: 1669-03-26 / 1701-00-00 / 1704-00-00
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1669-03-26 / 1701-00-00 / 1704-00-00'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1669-03-26/1701-00-00/1704-00-00 ' due to error Could not interpret date.: 
process_chunks >>>  Source Person Relation: 20 -- Abensberg-Traun, Otto Ehrenreich -- {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1669-03-26 / 1701-00-00 / 1704-00-00', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}
process_chunks >>> cD ['1698-00-00'], cF ['Geh. Rat', 'Landmarschall'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1698-00-00, new: 1698<1698-06-30>
chunk_process_datum >>> rel, chunk sdw: 1698<1698-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1698<1698-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Rat', 'Landmarschall']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landmarschall
process_chunks >>>  Source Person Relation: 20 -- Abensberg-Traun, Otto Ehrenreich -- {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1698<1698-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Landmarschall>}
process_chunks >>> cD ['1701-00-00 / 1704-00-00'], cF ['Geh. Rat', 'GR'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00 / 1704-00-00, new: 1701-00-00 / 1704-00-00
chunk_process_datum >>> rel, chunk sdw: 1701-00-00 / 1704-00-00
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701-00-00 / 1704-00-00'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Rat', 'GR']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1701-00-00/1704-00-00 ' due to error Could not interpret date.: 
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = GR
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1701-00-00/1704-00-00 ' due to error Could not interpret date.: 
process_chunks >>>  Source Person Relation: 20 -- Abensberg-Traun, Otto Ehrenreich -- {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701-00-00 / 1704-00-00', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: GR>}
process_chunks >>> cD ['1701-00-00'], cF ['Landmarschall', 'Generallandoberst'], cH L, CA NÖ
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ
chunk_process_amt_NEW >>> c_A was: NÖ and amt after matching with amt index is: nan
chunk_process_amt_NEW >>>  Return value of inst2 = nan (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Landmarschall', 'Generallandoberst']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landmarschall
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Generallandoberst
process_chunks >>>  Source Person Relation: 20 -- Abensberg-Traun, Otto Ehrenreich -- {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: nan (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Generallandoberst>}
process_chunks >>> cD [], cF [], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F []
process_chunks >>>  Source Person Relation: 20 -- Abensberg-Traun, Otto Ehrenreich -- {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>}
process_chunks >>> cD ['1701-00-00 / 1704-00-00'], cF ['Geh. Konferenzrat'], cH L, CA GK
helper_hsv_post_process_dates >>> old: 1701-00-00 / 1704-00-00, new: 1701-00-00 / 1704-00-00
chunk_process_datum >>> rel, chunk sdw: 1701-00-00 / 1704-00-00
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701-00-00 / 1704-00-00'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GK
chunk_process_amt_NEW >>> c_A was: GK and amt after matching with amt index is: Geheime Konferenz
chunk_process_amt_NEW >>>  Return value of inst2 = Geheime Konferenz (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Konferenzrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Konferenzrat
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1701-00-00/1704-00-00 ' due to error Could not interpret date.: 
process_chunks >>>  Source Person Relation: 20 -- Abensberg-Traun, Otto Ehrenreich -- {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701-00-00 / 1704-00-00', 'related_institution': <Institution: Geheime Konferenz (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Konferenzrat>}
process_chunks >>> cD ['1701-00-00'], cF ['Generallandoberst'], cH L, CA NÖ
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ
chunk_process_amt_NEW >>> c_A was: NÖ and amt after matching with amt index is: nan
chunk_process_amt_NEW >>>  Return value of inst2 = nan (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Generallandoberst']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Generallandoberst
process_chunks >>>  Source Person Relation: 20 -- Abensberg-Traun, Otto Ehrenreich -- {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: nan (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Generallandoberst>}
process_chunks >>> cD ['1704-00-00'], cF ['Generallandoberst'], cH L, CA Ö-udE
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Ö-udE
chunk_process_amt_NEW >>>  Return value of inst2 = Ö-udE (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Generallandoberst']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Generallandoberst
process_chunks >>>  Source Person Relation: 20 -- Abensberg-Traun, Otto Ehrenreich -- {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Ö-udE (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Generallandoberst>}
process_chunks >>> cD ['1704-00-00'], cF ['Landmarschall', 'Generallandoberst'], cH L, CA Ö-udE.
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Ö-udE.
chunk_process_amt_NEW >>>  Return value of inst2 = Ö-udE. (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Landmarschall', 'Generallandoberst']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landmarschall
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Generallandoberst
process_chunks >>>  Source Person Relation: 20 -- Abensberg-Traun, Otto Ehrenreich -- {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Ö-udE. (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Generallandoberst>}
process_chunks >>> cD [], cF [], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F []
process_chunks >>>  Source Person Relation: 20 -- Abensberg-Traun, Otto Ehrenreich -- {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>}

--------- Start of row | 21 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abensperg , Traun
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-10-10'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-10-10'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-10-10'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1666-10-10'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1666-10-10, new: 1666-10-10<1666-10-10>
chunk_process_datum >>> rel, chunk sdw: 1666-10-10<1666-10-10>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensperg , Traun, Ernst Ferdinand>, 'start_date_written': '1666-10-10<1666-10-10>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 21 -- Abensperg , Traun, Ernst Ferdinand -- {'related_person': <Person: Abensperg , Traun, Ernst Ferdinand>, 'start_date_written': '1666-10-10<1666-10-10>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 22 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abensperg , Traun
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-09-03'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-09-03'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-09-03'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1666-09-03'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1666-09-03, new: 1666-09-03<1666-09-03>
chunk_process_datum >>> rel, chunk sdw: 1666-09-03<1666-09-03>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensperg , Traun, Johann Wilhelm>, 'start_date_written': '1666-09-03<1666-09-03>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 22 -- Abensperg , Traun, Johann Wilhelm -- {'related_person': <Person: Abensperg , Traun, Johann Wilhelm>, 'start_date_written': '1666-09-03<1666-09-03>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 23 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abensperg-Traun
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1657-06-19'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1657-06-19'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1657-06-19'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR'
process_chunks >>> cD ['1657-06-19'], cF ['Geh. Rat'], cH L, CA GR
helper_hsv_post_process_dates >>> old: 1657-06-19, new: 1657-06-19<1657-06-19>
chunk_process_datum >>> rel, chunk sdw: 1657-06-19<1657-06-19>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensperg-Traun, Ernst>, 'start_date_written': '1657-06-19<1657-06-19>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Rat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat
process_chunks >>>  Source Person Relation: 23 -- Abensperg-Traun, Ernst -- {'related_person': <Person: Abensperg-Traun, Ernst>, 'start_date_written': '1657-06-19<1657-06-19>', 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Rat>}

--------- Start of row | 24 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ableitner (Ableutner)
person_process_field_familienname >>> fam1: Ableitner
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 21), match='(Ableutner)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK '
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Kanzlist'], cH L, CA HK 
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ableitner, Ferdinand>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 24 -- Ableitner, Ferdinand -- {'related_person': <Person: Ableitner, Ferdinand>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 25 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abt
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1694-10-01', '1701-03-31'], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1694-10-01', '1701-03-31'], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1694-10-01', '1701-03-31'], 'HOFSTAAT': 'J', 'FUNKTION': ['Hartschier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Hartschierenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1694-10-01', '1701-03-31'], cF ['Hartschier'], cH J, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1694-10-01, new: 1694-10-01<1694-10-01>
helper_hsv_post_process_dates >>> old: 1701-03-31, new: 1701-03-31<1701-03-31>
chunk_process_datum >>> rel, chunk sdw: 1694-10-01<1694-10-01>
chunk_process_datum >>> rel, chunk edw: 1694-10-01<1694-10-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abt, Dionisius>, 'start_date_written': '1694-10-01<1694-10-01>', 'end_date_written': '1701-03-31<1701-03-31>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Hartschier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hartschier
process_chunks >>>  Source Person Relation: 25 -- Abt, Dionisius -- {'related_person': <Person: Abt, Dionisius>, 'start_date_written': '1694-10-01<1694-10-01>', 'end_date_written': '1701-03-31<1701-03-31>', 'related_institution': <Institution: Dummy Amt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Hartschier>}

--------- Start of row | 26 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Achat (Achaz, Nachod)
person_process_field_familienname >>> fam1: Achat
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 21), match='(Achaz, Nachod)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk edw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Achat, Ferdinand Leopold>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 26 -- Achat, Ferdinand Leopold -- {'related_person': <Person: Achat, Ferdinand Leopold>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 27 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Achendorffer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'J', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA'
process_chunks >>> cD ['1704-00-00'], cF [], cH J, CA OMeA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Achendorffer, Jakob>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F []
process_chunks >>>  Source Person Relation: 27 -- Achendorffer, Jakob -- {'related_person': <Person: Achendorffer, Jakob>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (J1 (Ehzg.))>}

--------- Start of row | 28 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Achimis/Attems?
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Achimis/Attems?, Ignaz>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 28 -- Achimis/Attems?, Ignaz -- {'related_person': <Person: Achimis/Attems?, Ignaz>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 29 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adalbert (Adelberth, Adelwerth, Adlberth, Adolbert, Adolberth)
person_process_field_familienname >>> fam1: Adalbert
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 62), match='(Adelberth, Adelwerth, Adlberth, Adolbert, Adolbe>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Konzipisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R '
process_chunks >>> cD ['1674-00-00', 'bis 1677<1677-06-30>'], cF ['Konzipist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674<1674-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674<1674-06-30>
chunk_process_datum >>> rel, chunk edw: 1674<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adalbert, Johann>, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Konzipist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konzipist
process_chunks >>>  Source Person Relation: 29 -- Adalbert, Johann -- {'related_person': <Person: Adalbert, Johann>, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Konzipist>}

--------- Start of row | 30 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adalbert (Adelberth)
person_process_field_familienname >>> fam1: Adalbert
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 20), match='(Adelberth)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Konzipisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R '
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Konzipist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adalbert, Adam>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Konzipist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konzipist
process_chunks >>>  Source Person Relation: 30 -- Adalbert, Adam -- {'related_person': <Person: Adalbert, Adam>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Konzipist>}

--------- Start of row | 31 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adam
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sattelknecht'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sattelknecht'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'J', 'FUNKTION': ['Sattelknecht'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA'
process_chunks >>> cD ['1704-00-00'], cF ['Sattelknecht'], cH J, CA OStA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adam, Johann>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Sattelknecht']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sattelknecht
process_chunks >>>  Source Person Relation: 31 -- Adam, Johann -- {'related_person': <Person: Adam, Johann>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberststallmeisteramt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Sattelknecht>}

--------- Start of row | 32 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adamo
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00'], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1678-00-00'], cF ['Kammerdiener'], cH EM, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adamo, NN>, 'start_date_written': '1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Kammerdiener']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerdiener
process_chunks >>>  Source Person Relation: 32 -- Adamo, NN -- {'related_person': <Person: Adamo, NN>, 'start_date_written': '1678<1678-06-30>', 'related_institution': <Institution: Dummy Amt (EM (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Kammerdiener>}

--------- Start of row | 33 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adimis (Attems)
person_process_field_familienname >>> fam1: Adimis
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Attems)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1686-11-15', 'bis 1687-10-27<1687-10-27>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1686-11-15', 'bis 1687-10-27<1687-10-27>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1686-11-15', 'bis 1687-10-27<1687-10-27>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1686-11-15', 'bis 1687-10-27<1687-10-27>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1686-11-15, new: 1686-11-15<1686-11-15>
helper_hsv_post_process_dates >>> inner date: <1687-10-27>
helper_hsv_post_process_dates >>> new_i_date: <1687-10-27>
helper_hsv_post_process_dates >>> old: bis 1687-10-27<1687-10-27>, new: bis 1687-10-27<1687-10-27>
chunk_process_datum >>> rel, chunk sdw: 1686-11-15<1686-11-15>
chunk_process_datum >>> rel, chunk edw: 1686-11-15<1686-11-15>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adimis, Franz Andre>, 'start_date_written': '1686-11-15<1686-11-15>', 'end_date_written': 'bis 1687-10-27<1687-10-27>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 33 -- Adimis, Franz Andre -- {'related_person': <Person: Adimis, Franz Andre>, 'start_date_written': '1686-11-15<1686-11-15>', 'end_date_written': 'bis 1687-10-27<1687-10-27>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 34 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adimus (Attems)
person_process_field_familienname >>> fam1: Adimus
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Attems)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1660-09-04'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1660-09-04'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1660-09-04'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1660-09-04'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1660-09-04, new: 1660-09-04<1660-09-04>
chunk_process_datum >>> rel, chunk sdw: 1660-09-04<1660-09-04>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adimus, Hanns Jacob>, 'start_date_written': '1660-09-04<1660-09-04>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 34 -- Adimus, Hanns Jacob -- {'related_person': <Person: Adimus, Hanns Jacob>, 'start_date_written': '1660-09-04<1660-09-04>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 35 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adler
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHR '
process_chunks >>> cD ['1674-00-00'], cF ['Reichshofrat'], cH L, CA RHR 
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674<1674-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adler, Franz Friedrich>, 'start_date_written': '1674<1674-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: Reichshofrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Reichshofrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofrat
process_chunks >>>  Source Person Relation: 35 -- Adler, Franz Friedrich -- {'related_person': <Person: Adler, Franz Friedrich>, 'start_date_written': '1674<1674-06-30>', 'related_institution': <Institution: Reichshofrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Reichshofrat>}

--------- Start of row | 36 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adler
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> RenameFunctions.py >>> removing ? from ents
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF [], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adler, Wenzel Wallkhaun?>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F []
process_chunks >>>  Source Person Relation: 36 -- Adler, Wenzel Wallkhaun? -- {'related_person': <Person: Adler, Wenzel Wallkhaun?>, 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>}

--------- Start of row | 37 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aegani
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkaplan'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofkapelle
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA '
process_chunks >>> cD ['1669-00-00'], cF ['Hofkaplan'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aegani, NN>, 'start_date_written': '1669<1669-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkaplan']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkaplan
process_chunks >>>  Source Person Relation: 37 -- Aegani, NN -- {'related_person': <Person: Aegani, NN>, 'start_date_written': '1669<1669-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkaplan>}

--------- Start of row | 38 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aehlen?
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1676-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aehlen?, Ferdinand>, 'start_date_written': '1676<1676-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 38 -- Aehlen?, Ferdinand -- {'related_person': <Person: Aehlen?, Ferdinand>, 'start_date_written': '1676<1676-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 39 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Agradin (Agredin)
person_process_field_familienname >>> fam1: Agradin
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='(Agredin)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Raitrat, Buchhalter/Raitrat, Expeditor, 1672/73-00-00, 1677-00-00)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :39, Raitrat / Buchhalter/Raitrat(?) / Expeditor (1672/73-00-00 bis 1677-00-00), [{'start': 0, 'end': 7, 'token_start': 0, 'token_end': 0, 'label': 'FUNKTION'}, {'start': 10, 'end': 28, 'token_start': 2, 'token_end': 4, 'label': 'FUNKTION'}, {'start': 34, 'end': 43, 'token_start': 9, 'token_end': 9, 'label': 'FUNKTION'}, {'start': 45, 'end': 58, 'token_start': 11, 'token_end': 17, 'label': 'DATUM'}, {'start': 63, 'end': 73, 'token_start': 19, 'token_end': 23, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Raitrat, Buchhalter/Raitrat, Expeditor, 1672/73-00-00, 1677-00-00]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Raitrat, Buchhalter/Raitrat, Expeditor, 1672/73-00-00, 1677-00-00)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat', 'Buchhalter/Raitrat', 'Expeditor'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat', 'Buchhalter/Raitrat', 'Expeditor'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitrat', 'Buchhalter/Raitrat', 'Expeditor'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK-NÖ-BH'
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Raitrat', 'Buchhalter/Raitrat', 'Expeditor'], cH L, CA HK-NÖ-BH
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Agradin, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: Niederösterreichische Buchhalterei 
chunk_process_amt_NEW >>>  Return value of inst2 = Niederösterreichische Buchhalterei  (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Raitrat', 'Buchhalter/Raitrat', 'Expeditor']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Raitrat
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Buchhalter/Raitrat
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Expeditor
process_chunks >>>  Source Person Relation: 39 -- Agradin, Christoph -- {'related_person': <Person: Agradin, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Niederösterreichische Buchhalterei  (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Expeditor>}

--------- Start of row | 40 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ahamer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Leiblakai'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Leiblakai'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Leiblakai'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Lakai, Leib-en
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA '
process_chunks >>> cD ['1663-00-00'], cF ['Leiblakai'], cH LW, CA OStA 
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ahamer, David>, 'start_date_written': '1663<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: OStA 
chunk_process_amt_NEW >>> c_A was: OStA  and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (LW)
chunk_create_relations >>> create relations called for c_F ['Leiblakai']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Leiblakai
process_chunks >>>  Source Person Relation: 40 -- Ahamer, David -- {'related_person': <Person: Ahamer, David>, 'start_date_written': '1663<1663-06-30>', 'related_institution': <Institution: Oberststallmeisteramt (LW)>, 'relation_type': <PersonInstitutionRelation: Leiblakai>}

--------- Start of row | 41 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ahlen, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Ahlen, von END INPUT, ROW:41
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammermaler'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammermaler'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kammermaler'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kammermaler'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ahlen, von, Valbertus>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kammermaler']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammermaler
process_chunks >>>  Source Person Relation: 41 -- Ahlen, von, Valbertus -- {'related_person': <Person: Ahlen, von, Valbertus>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kammermaler>}

--------- Start of row | 42 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aibling, von (Aybling, von)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aibling, von (Aybling, von) END INPUT, ROW:42
person_process_field_familienname >>> fam1: Aibling, von
person_process_field_familienname >>> fam2: <re.Match object; span=(13, 27), match='(Aybling, von)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['? 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Registrant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['? 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Registrant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['? 1701<1701-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Registrant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ / Registratur
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ '
process_chunks >>> cD ['? 1701<1701-06-30>'], cF ['Registrant'], cH Dummy Hofstaat, CA NÖ 
helper_hsv_post_process_dates >>> inner date: <1701-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1701-06-30>
helper_hsv_post_process_dates >>> old: ? 1701<1701-06-30>, new: ? 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: ? 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aibling, von, Nikolaus Eberhard>, 'start_date_written': '? 1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ 
chunk_process_amt_NEW >>> c_A was: NÖ  and amt after matching with amt index is: nan
chunk_process_amt_NEW >>>  Return value of inst2 = nan (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Registrant']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Registrant
process_chunks >>>  Source Person Relation: 42 -- Aibling, von, Nikolaus Eberhard -- {'related_person': <Person: Aibling, von, Nikolaus Eberhard>, 'start_date_written': '? 1701<1701-06-30>', 'related_institution': <Institution: nan (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Registrant>}

--------- Start of row | 43 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aich, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aich, von END INPUT, ROW:43
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landschreiber'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG'
process_chunks >>> cD ['1678-00-00'], cF ['Landschreiber'], cH L, CA NÖ-LG
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aich, von, Peter>, 'start_date_written': '1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ landmarschallisches Gericht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ landmarschallisches Gericht (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Landschreiber']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landschreiber
process_chunks >>>  Source Person Relation: 43 -- Aich, von, Peter -- {'related_person': <Person: Aich, von, Peter>, 'start_date_written': '1678<1678-06-30>', 'related_institution': <Institution: NÖ landmarschallisches Gericht (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Landschreiber>}

--------- Start of row | 44 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichberger
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfrau'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfrau'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = MMJ
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMJ
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMJ
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'MMJ', 'FUNKTION': ['Kammerfrau'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1704-00-00'], cF ['Kammerfrau'], cH MMJ, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichberger, Eva Christina>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = MMJ
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMJ
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (MMJ)
chunk_create_relations >>> create relations called for c_F ['Kammerfrau']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerfrau
process_chunks >>>  Source Person Relation: 44 -- Aichberger, Eva Christina -- {'related_person': <Person: Aichberger, Eva Christina>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (MMJ)>, 'relation_type': <PersonInstitutionRelation: Kammerfrau>}

--------- Start of row | 45 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichberger (Aychberger)
person_process_field_familienname >>> fam1: Aichberger
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(Aychberger)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1678-00-00', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Untermarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1678-00-00', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Untermarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Untermarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R '
process_chunks >>> cD ['1678-00-00', 'bis 1685-11-01<1685-11-01>'], cF ['Untermarschall'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678<1678-06-30>
helper_hsv_post_process_dates >>> inner date: <1685-11-01>
helper_hsv_post_process_dates >>> new_i_date: <1685-11-01>
helper_hsv_post_process_dates >>> old: bis 1685-11-01<1685-11-01>, new: bis 1685-11-01<1685-11-01>
chunk_process_datum >>> rel, chunk sdw: 1678<1678-06-30>
chunk_process_datum >>> rel, chunk edw: 1678<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichberger, Johann Magnus>, 'start_date_written': '1678<1678-06-30>', 'end_date_written': 'bis 1685-11-01<1685-11-01>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Untermarschall']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Untermarschall
process_chunks >>>  Source Person Relation: 45 -- Aichberger, Johann Magnus -- {'related_person': <Person: Aichberger, Johann Magnus>, 'start_date_written': '1678<1678-06-30>', 'end_date_written': 'bis 1685-11-01<1685-11-01>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Untermarschall>}

--------- Start of row | 46 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichbichl, von (Aichbichel, Aichbüchel, Aichbüchl, Aichbühl, Aichpichl, Aichpüchel)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aichbichl, von (Aichbichel, Aichbüchel, Aichbüchl, Aichbühl, Aichpichl, Aichpüchel) END INPUT, ROW:46
person_process_field_familienname >>> fam1: Aichbichl, von
person_process_field_familienname >>> fam2: <re.Match object; span=(15, 83), match='(Aichbichel, Aichbüchel, Aichbüchl, Aichbühl, Aic>
person_process_field_titel >>> t_tit = Freiherr 1685-12-10Graf 1705-01-31
person_process_field_titel >>> t_list = ['Freiherr 1685-12-10Graf 1705-01-31']
helper_hsv_post_process_dates >>> old: 1685-12-10, new: 1685-12-10<1685-12-10>
create_title >>> tit_res: Freiherr 1685-12-10Graf 1705-01-31, date after processing: 1685-12-10<1685-12-10>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Beisitzer, Landrecht, 1672/73-00-00, Fürschneider, 1679-08-23, Fürschneider, gewes.(1680-09-25, Mundschenk, Hofkammerrat, 1683-09-29, Hofkammerrat, 1701-00-00, Hofkammerrat, 1704-00-00, Landrechtsbeisitzer, Mundschenk, 1679-08-16, Mundschenk, 1680-09-25, NÖ Landrechtsbeisitzer, 1671-04-06, NÖ Salzamtmann, 1681-00-00, Regierungsrat, 1675-00-00, Regierungsrat, 1669-00-00, Regimentsrat, 1674-00-00, 1677-00-00, Regimentsrat, 1678-00-00, Regimentsrat, 1676-00-00, Truchseß, 1672-00-00, Truchseß)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :46, Beisitzer, Landrecht, Ritterstand (1672/73-00-00) \ 150 fl Gehalt; Fürschneider (1679-08-23) \ Eid; Fürschneider, gewes.(1680-09-25) \ Eid als Mundschenk \ Linz; Hofkammerrat 1683-09-29; Hofkammerrat, Grafen- , Herrenstand (1701-00-00) ; Hofkammerrat, Herrenstand (1704-00-00) ; Landrechtsbeisitzer, Ritterstand \ 150 fl Gehalt; Mundschenk (1679-08-16) ; Mundschenk (1680-09-25) \ Eid \ Linz; NÖ Landrechtsbeisitzer (1671-04-06) ; NÖ Salzamtmann (1681-00-00) ; Regierungsrat (1675-00-00) ; Regierungsrat, Herrenbank (1669-00-00) ; Regimentsrat (1674-00-00 bis 1677-00-00 ) ; Regimentsrat, Ritterbank (1678-00-00) ; Regimentsrat, Ritterstand (1676-00-00) ; Truchseß (1672-00-00) \ Eid; Truchseß, gewes. \ Eid als Fürschneider; , [{'start': 0, 'end': 20, 'token_start': 0, 'token_end': 2, 'label': 'FUNKTION'}, {'start': 35, 'end': 48, 'token_start': 6, 'token_end': 12, 'label': 'DATUM'}, {'start': 67, 'end': 79, 'token_start': 19, 'token_end': 19, 'label': 'FUNKTION'}, {'start': 81, 'end': 91, 'token_start': 21, 'token_end': 25, 'label': 'DATUM'}, {'start': 100, 'end': 112, 'token_start': 30, 'token_end': 30, 'label': 'FUNKTION'}, {'start': 114, 'end': 131, 'token_start': 32, 'token_end': 36, 'label': 'DATUM'}, {'start': 143, 'end': 153, 'token_start': 41, 'token_end': 41, 'label': 'FUNKTION'}, {'start': 162, 'end': 174, 'token_start': 45, 'token_end': 45, 'label': 'FUNKTION'}, {'start': 175, 'end': 185, 'token_start': 46, 'token_end': 50, 'label': 'DATUM'}, {'start': 187, 'end': 199, 'token_start': 52, 'token_end': 52, 'label': 'FUNKTION'}, {'start': 224, 'end': 234, 'token_start': 58, 'token_end': 62, 'label': 'DATUM'}, {'start': 237, 'end': 249, 'token_start': 65, 'token_end': 65, 'label': 'FUNKTION'}, {'start': 264, 'end': 274, 'token_start': 69, 'token_end': 73, 'label': 'DATUM'}, {'start': 277, 'end': 296, 'token_start': 76, 'token_end': 76, 'label': 'FUNKTION'}, {'start': 312, 'end': 315, 'token_start': 80, 'token_end': 80, 'label': 'DATUM'}, {'start': 327, 'end': 337, 'token_start': 84, 'token_end': 84, 'label': 'FUNKTION'}, {'start': 339, 'end': 349, 'token_start': 86, 'token_end': 90, 'label': 'DATUM'}, {'start': 352, 'end': 362, 'token_start': 93, 'token_end': 93, 'label': 'FUNKTION'}, {'start': 364, 'end': 374, 'token_start': 95, 'token_end': 99, 'label': 'DATUM'}, {'start': 390, 'end': 412, 'token_start': 106, 'token_end': 107, 'label': 'FUNKTION'}, {'start': 414, 'end': 424, 'token_start': 109, 'token_end': 113, 'label': 'DATUM'}, {'start': 427, 'end': 441, 'token_start': 116, 'token_end': 117, 'label': 'FUNKTION'}, {'start': 443, 'end': 453, 'token_start': 119, 'token_end': 123, 'label': 'DATUM'}, {'start': 456, 'end': 469, 'token_start': 126, 'token_end': 126, 'label': 'FUNKTION'}, {'start': 471, 'end': 481, 'token_start': 128, 'token_end': 132, 'label': 'DATUM'}, {'start': 484, 'end': 497, 'token_start': 135, 'token_end': 135, 'label': 'FUNKTION'}, {'start': 511, 'end': 521, 'token_start': 139, 'token_end': 143, 'label': 'DATUM'}, {'start': 524, 'end': 536, 'token_start': 146, 'token_end': 146, 'label': 'FUNKTION'}, {'start': 538, 'end': 548, 'token_start': 148, 'token_end': 152, 'label': 'DATUM'}, {'start': 553, 'end': 563, 'token_start': 154, 'token_end': 158, 'label': 'DATUM'}, {'start': 593, 'end': 603, 'token_start': 165, 'token_end': 169, 'label': 'DATUM'}, {'start': 606, 'end': 618, 'token_start': 172, 'token_end': 172, 'label': 'FUNKTION'}, {'start': 633, 'end': 643, 'token_start': 176, 'token_end': 180, 'label': 'DATUM'}, {'start': 646, 'end': 654, 'token_start': 183, 'token_end': 183, 'label': 'FUNKTION'}, {'start': 656, 'end': 666, 'token_start': 185, 'token_end': 189, 'label': 'DATUM'}, {'start': 675, 'end': 683, 'token_start': 194, 'token_end': 194, 'label': 'FUNKTION'}, {'start': 702, 'end': 714, 'token_start': 201, 'token_end': 201, 'label': 'FUNKTION'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Beisitzer, Landrecht, 1672/73-00-00, Fürschneider, 1679-08-23, Fürschneider, gewes.(1680-09-25, Mundschenk, Hofkammerrat, 1683-09-29, Hofkammerrat, 1701-00-00, Hofkammerrat, 1704-00-00, Landrechtsbeisitzer, 150, Mundschenk, 1679-08-16, Mundschenk, 1680-09-25, NÖ Landrechtsbeisitzer, 1671-04-06, NÖ Salzamtmann, 1681-00-00, Regierungsrat, 1675-00-00, Regierungsrat, 1669-00-00, Regimentsrat, 1674-00-00, 1677-00-00, 1678-00-00, Regimentsrat, 1676-00-00, Truchseß, 1672-00-00, Truchseß, Fürschneider]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Beisitzer, Landrecht, 1672/73-00-00, Fürschneider, 1679-08-23, Fürschneider, gewes.(1680-09-25, Mundschenk, Hofkammerrat, 1683-09-29, Hofkammerrat, 1701-00-00, Hofkammerrat, 1704-00-00, Landrechtsbeisitzer, 150, Mundschenk, 1679-08-16, Mundschenk, 1680-09-25, NÖ Landrechtsbeisitzer, 1671-04-06, NÖ Salzamtmann, 1681-00-00, Regierungsrat, 1675-00-00, Regierungsrat, 1669-00-00, Regimentsrat, 1674-00-00, 1677-00-00, 1678-00-00, Regimentsrat, 1676-00-00, Truchseß, 1672-00-00, Truchseß, Fürschneider)
NLP COMPONENT >>> RenameFunctions.py >>> removing 150 from ents
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(18) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Beisitzer, Landrecht'], 'AMT': None}, {'DATUM': ['1679-08-23'], 'HOFSTAAT': None, 'FUNKTION': ['Fürschneider'], 'AMT': None}, {'DATUM': ['gewes.(1680-09-25'], 'HOFSTAAT': None, 'FUNKTION': ['Fürschneider', 'Mundschenk'], 'AMT': None}, {'DATUM': ['1683-09-29'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}, {'DATUM': ['1679-08-16'], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}, {'DATUM': ['1680-09-25'], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}, {'DATUM': ['1671-04-06'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Landrechtsbeisitzer'], 'AMT': None}, {'DATUM': ['1681-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Salzamtmann'], 'AMT': None}, {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}, {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}, {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}, {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1672-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß', 'Fürschneider'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Beisitzer, Landrecht'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1679-08-23'], 'HOFSTAAT': None, 'FUNKTION': ['Fürschneider'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['gewes.(1680-09-25'], 'HOFSTAAT': None, 'FUNKTION': ['Fürschneider', 'Mundschenk'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1683-09-29'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	5: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	6: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	7: chunk: {'DATUM': ['1679-08-16'], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	8: chunk: {'DATUM': ['1680-09-25'], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	9: chunk: {'DATUM': ['1671-04-06'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Landrechtsbeisitzer'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	10: chunk: {'DATUM': ['1681-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Salzamtmann'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	11: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	12: chunk: {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	13: chunk: {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	14: chunk: {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	15: chunk: {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	16: chunk: {'DATUM': ['1672-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	17: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß', 'Fürschneider'], 'AMT': None}
process_chunks >>> len_doc_chunks: 18, len Ämter-Spalte: 5
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Beisitzer, Landrecht'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1679-08-23'], 'HOFSTAAT': 'L', 'FUNKTION': ['Fürschneider'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['gewes.(1680-09-25'], 'HOFSTAAT': 'L', 'FUNKTION': ['Fürschneider', 'Mundschenk'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1683-09-29'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1679-08-16'], 'HOFSTAAT': 'L', 'FUNKTION': ['Mundschenk'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1680-09-25'], 'HOFSTAAT': 'L', 'FUNKTION': ['Mundschenk'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1671-04-06'], 'HOFSTAAT': 'L', 'FUNKTION': ['NÖ Landrechtsbeisitzer'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1681-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['NÖ Salzamtmann'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regierungsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regierungsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß', 'Fürschneider'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Herrenstand; NÖ-RR / Herrenbank; NÖ-LG / Ritterstand; NÖ-LG / Landrechtsbeisitzer, Ritterstand; 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK / Herrenstand'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>'], cF ['Beisitzer, Landrecht'], cH L, CA HK / Herrenstand
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK / Herrenstand
chunk_process_amt_NEW >>> c_A was: HK / Herrenstand and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Beisitzer, Landrecht']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Beisitzer, Landrecht
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Beisitzer, Landrecht>}
process_chunks >>> cD ['1679-08-23'], cF ['Fürschneider'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1679-08-23, new: 1679-08-23<1679-08-23>
chunk_process_datum >>> rel, chunk sdw: 1679-08-23<1679-08-23>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1679-08-23<1679-08-23>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Fürschneider']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Fürschneider
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1679-08-23<1679-08-23>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Fürschneider>}
process_chunks >>> cD ['gewes.(1680-09-25'], cF ['Fürschneider', 'Mundschenk'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: gewes.(1680-09-25, new: gewes.(1680-09-25
chunk_process_datum >>> rel, chunk sdw: gewes.(1680-09-25
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': 'gewes.(1680-09-25'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Fürschneider', 'Mundschenk']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Fürschneider
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' gewes.(1680-09-25 ' due to error Could not interpret date.: 
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Mundschenk
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' gewes.(1680-09-25 ' due to error Could not interpret date.: 
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': 'gewes.(1680-09-25', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Mundschenk>}
process_chunks >>> cD ['1683-09-29'], cF ['Hofkammerrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1683-09-29, new: 1683-09-29<1683-09-29>
chunk_process_datum >>> rel, chunk sdw: 1683-09-29<1683-09-29>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1683-09-29<1683-09-29>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkammerrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkammerrat
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1683-09-29<1683-09-29>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkammerrat>}
process_chunks >>> cD ['1701-00-00'], cF ['Hofkammerrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkammerrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkammerrat
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkammerrat>}
process_chunks >>> cD ['1704-00-00'], cF ['Hofkammerrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkammerrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkammerrat
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkammerrat>}
process_chunks >>> cD [], cF ['Landrechtsbeisitzer'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Landrechtsbeisitzer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landrechtsbeisitzer
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Landrechtsbeisitzer>}
process_chunks >>> cD ['1679-08-16'], cF ['Mundschenk'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1679-08-16, new: 1679-08-16<1679-08-16>
chunk_process_datum >>> rel, chunk sdw: 1679-08-16<1679-08-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1679-08-16<1679-08-16>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Mundschenk']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Mundschenk
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1679-08-16<1679-08-16>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Mundschenk>}
process_chunks >>> cD ['1680-09-25'], cF ['Mundschenk'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1680-09-25, new: 1680-09-25<1680-09-25>
chunk_process_datum >>> rel, chunk sdw: 1680-09-25<1680-09-25>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1680-09-25<1680-09-25>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Mundschenk']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Mundschenk
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1680-09-25<1680-09-25>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Mundschenk>}
process_chunks >>> cD ['1671-04-06'], cF ['NÖ Landrechtsbeisitzer'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1671-04-06, new: 1671-04-06<1671-04-06>
chunk_process_datum >>> rel, chunk sdw: 1671-04-06<1671-04-06>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1671-04-06<1671-04-06>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['NÖ Landrechtsbeisitzer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = NÖ Landrechtsbeisitzer
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1671-04-06<1671-04-06>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: NÖ Landrechtsbeisitzer>}
process_chunks >>> cD ['1681-00-00'], cF ['NÖ Salzamtmann'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1681-00-00, new: 1681<1681-06-30>
chunk_process_datum >>> rel, chunk sdw: 1681<1681-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1681<1681-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['NÖ Salzamtmann']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = NÖ Salzamtmann
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1681<1681-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: NÖ Salzamtmann>}
process_chunks >>> cD ['1675-00-00'], cF ['Regierungsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regierungsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regierungsrat
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1675<1675-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regierungsrat>}
process_chunks >>> cD ['1669-00-00'], cF ['Regierungsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1669<1669-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regierungsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regierungsrat
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1669<1669-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regierungsrat>}
process_chunks >>> cD ['1674-00-00', 'bis 1677<1677-06-30>'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674<1674-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674<1674-06-30>
chunk_process_datum >>> rel, chunk edw: 1674<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}
process_chunks >>> cD ['1678-00-00'], cF [], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F []
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1678<1678-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>}
process_chunks >>> cD ['1676-00-00'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1676<1676-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1676<1676-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}
process_chunks >>> cD ['1672-00-00'], cF ['Truchseß'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1672-00-00, new: 1672<1672-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672<1672-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1672<1672-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Truchseß']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Truchseß
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1672<1672-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Truchseß>}
process_chunks >>> cD [], cF ['Truchseß', 'Fürschneider'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Truchseß', 'Fürschneider']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Truchseß
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Fürschneider
process_chunks >>>  Source Person Relation: 46 -- Aichbichl, von, Carl  -- {'related_person': <Person: Aichbichl, von, Carl >, 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Fürschneider>}

--------- Start of row | 47 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichen (Ahen, von)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aichen (Ahen, von) END INPUT, ROW:47
person_process_field_familienname >>> fam1: Aichen
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 18), match='(Ahen, von)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landschreiber'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG'
process_chunks >>> cD [], cF ['Landschreiber'], cH L, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ landmarschallisches Gericht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ landmarschallisches Gericht (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Landschreiber']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landschreiber
process_chunks >>>  Source Person Relation: 47 -- Aichen, Peter -- {'related_person': <Person: Aichen, Peter>, 'related_institution': <Institution: NÖ landmarschallisches Gericht (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Landschreiber>}

--------- Start of row | 48 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichen, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aichen, von END INPUT, ROW:48
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer, Ritterstand 
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG '
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Landrechtsbeisitzer'], cH Dummy Hofstaat, CA NÖ-LG 
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Franz Carl>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ landmarschallisches Gericht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ landmarschallisches Gericht (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Landrechtsbeisitzer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landrechtsbeisitzer
process_chunks >>>  Source Person Relation: 48 -- Aichen, von, Franz Carl -- {'related_person': <Person: Aichen, von, Franz Carl>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: NÖ landmarschallisches Gericht (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Landrechtsbeisitzer>}

--------- Start of row | 49 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichen, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aichen, von END INPUT, ROW:49
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Jusitz-Bancodeputation, 1717-06-17, Klosterrat, 1717-10-28, 1693-11-10, Truchseß, 1691-00-00, Landrechtsbeisitzer, 1701-00-00, Landuntermarschall, VI, 1718-01-14, NÖ Raitherr, 1693-00-00, 1699-00-00, Präses, Raitmarschall, 1703-00-00, 1704-00-00, Raitrat, 1701-00-00, Regimentsrat, 1702-12-16, Regierungsrat, 1704-00-00, 1710-11-29, supernumerärer Biesitzer NÖ Landrechts, 1691-03-26, Truchseß, 1704-00-00, Verordneter, 1705-00-00, Waisenrat)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :49, Jusitz-Bancodeputation "cum consueto salario von Hof" resolviert (1717-06-17) ; Klosterrat (1717-10-28) ; ksl. Rat (1693-11-10) ; ksl. Rat im Ritterstand; ksl. Truchseß (1691-00-00) ; Landrechtsbeisitzer, Ritterstand (1701-00-00) ; Landuntermarschall "aus eigener allergnädigsten bewegens" Ks. Karl VI. ernannt (1718-01-14) ; NÖ Raitherr (1693-00-00 bis 1699-00-00) ; Präses gesamten NÖ Ritterstand; Raitmarschall (1703-00-00 bis 1704-00-00) ; Raitrat (1701-00-00) ; Regimentsrat (1702-12-16) ; Regierungsrat, Ritterstand (1704-00-00) ; Ritterstandsausschuß (1710-11-29) ; supernumerärer Biesitzer NÖ Landrechts (1691-03-26) ; Truchseß (1704-00-00) ; Verordneter Ritterstand (1705-00-00) ; Waisenrat, [{'start': 0, 'end': 22, 'token_start': 0, 'token_end': 0, 'label': 'AMT'}, {'start': 66, 'end': 76, 'token_start': 10, 'token_end': 14, 'label': 'DATUM'}, {'start': 79, 'end': 89, 'token_start': 17, 'token_end': 17, 'label': 'FUNKTION'}, {'start': 91, 'end': 101, 'token_start': 19, 'token_end': 23, 'label': 'DATUM'}, {'start': 104, 'end': 112, 'token_start': 26, 'token_end': 28, 'label': 'FUNKTION'}, {'start': 114, 'end': 124, 'token_start': 30, 'token_end': 34, 'label': 'DATUM'}, {'start': 127, 'end': 135, 'token_start': 37, 'token_end': 39, 'label': 'FUNKTION'}, {'start': 157, 'end': 165, 'token_start': 45, 'token_end': 45, 'label': 'FUNKTION'}, {'start': 167, 'end': 177, 'token_start': 47, 'token_end': 51, 'label': 'DATUM'}, {'start': 180, 'end': 199, 'token_start': 54, 'token_end': 54, 'label': 'FUNKTION'}, {'start': 214, 'end': 224, 'token_start': 58, 'token_end': 62, 'label': 'DATUM'}, {'start': 227, 'end': 245, 'token_start': 65, 'token_end': 65, 'label': 'FUNKTION'}, {'start': 307, 'end': 317, 'token_start': 79, 'token_end': 83, 'label': 'DATUM'}, {'start': 320, 'end': 331, 'token_start': 86, 'token_end': 87, 'label': 'FUNKTION'}, {'start': 333, 'end': 343, 'token_start': 89, 'token_end': 93, 'label': 'DATUM'}, {'start': 348, 'end': 358, 'token_start': 95, 'token_end': 99, 'label': 'DATUM'}, {'start': 361, 'end': 367, 'token_start': 102, 'token_end': 102, 'label': 'FUNKTION'}, {'start': 393, 'end': 406, 'token_start': 107, 'token_end': 107, 'label': 'FUNKTION'}, {'start': 408, 'end': 418, 'token_start': 109, 'token_end': 113, 'label': 'DATUM'}, {'start': 423, 'end': 433, 'token_start': 115, 'token_end': 119, 'label': 'DATUM'}, {'start': 436, 'end': 443, 'token_start': 122, 'token_end': 122, 'label': 'FUNKTION'}, {'start': 445, 'end': 455, 'token_start': 124, 'token_end': 128, 'label': 'DATUM'}, {'start': 458, 'end': 470, 'token_start': 131, 'token_end': 131, 'label': 'FUNKTION'}, {'start': 472, 'end': 482, 'token_start': 133, 'token_end': 137, 'label': 'DATUM'}, {'start': 485, 'end': 498, 'token_start': 140, 'token_end': 140, 'label': 'FUNKTION'}, {'start': 513, 'end': 523, 'token_start': 144, 'token_end': 148, 'label': 'DATUM'}, {'start': 526, 'end': 546, 'token_start': 151, 'token_end': 151, 'label': 'AMT'}, {'start': 548, 'end': 558, 'token_start': 153, 'token_end': 157, 'label': 'DATUM'}, {'start': 561, 'end': 599, 'token_start': 160, 'token_end': 163, 'label': 'FUNKTION'}, {'start': 601, 'end': 611, 'token_start': 165, 'token_end': 169, 'label': 'DATUM'}, {'start': 614, 'end': 622, 'token_start': 172, 'token_end': 172, 'label': 'FUNKTION'}, {'start': 624, 'end': 634, 'token_start': 174, 'token_end': 178, 'label': 'DATUM'}, {'start': 637, 'end': 648, 'token_start': 181, 'token_end': 181, 'label': 'FUNKTION'}, {'start': 662, 'end': 672, 'token_start': 184, 'token_end': 188, 'label': 'DATUM'}, {'start': 675, 'end': 684, 'token_start': 191, 'token_end': 191, 'label': 'AMT'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Jusitz-Bancodeputation, 1717-06-17, Klosterrat, 1717-10-28, ksl. Rat, 1693-11-10, ksl. Rat, Truchseß, 1691-00-00, Landrechtsbeisitzer, 1701-00-00, Landuntermarschall, 1718-01-14, NÖ Raitherr, 1693-00-00, 1699-00-00, Präses, Raitmarschall, 1703-00-00, 1704-00-00, Raitrat, 1701-00-00, Regimentsrat, 1702-12-16, Regierungsrat, 1704-00-00, Ritterstandsausschuß, 1710-11-29, supernumerärer Biesitzer NÖ Landrechts, 1691-03-26, Truchseß, 1704-00-00, Verordneter, 1705-00-00, Waisenrat]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Jusitz-Bancodeputation, 1717-06-17, Klosterrat, 1717-10-28, ksl. Rat, 1693-11-10, ksl. Rat, Truchseß, 1691-00-00, Landrechtsbeisitzer, 1701-00-00, Landuntermarschall, 1718-01-14, NÖ Raitherr, 1693-00-00, 1699-00-00, Präses, Raitmarschall, 1703-00-00, 1704-00-00, Raitrat, 1701-00-00, Regimentsrat, 1702-12-16, Regierungsrat, 1704-00-00, Ritterstandsausschuß, 1710-11-29, supernumerärer Biesitzer NÖ Landrechts, 1691-03-26, Truchseß, 1704-00-00, Verordneter, 1705-00-00, Waisenrat)
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = Jusitz-Bancodeputation
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = Ritterstandsausschuß
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = Waisenrat
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(18) = [{'DATUM': ['1717-06-17'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': 'Jusitz-Bancodeputation'}, {'DATUM': ['1717-10-28'], 'HOFSTAAT': None, 'FUNKTION': ['Klosterrat'], 'AMT': None}, {'DATUM': ['1693-11-10'], 'HOFSTAAT': None, 'FUNKTION': ['ksl. Rat'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['ksl. Rat'], 'AMT': None}, {'DATUM': ['1691-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}, {'DATUM': ['1718-01-14'], 'HOFSTAAT': None, 'FUNKTION': ['Landuntermarschall'], 'AMT': None}, {'DATUM': ['1693-00-00', 'bis 1699<1699-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Raitherr'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Präses'], 'AMT': None}, {'DATUM': ['1703-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitmarschall'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat'], 'AMT': None}, {'DATUM': ['1702-12-16'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}, {'DATUM': ['1710-11-29'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': 'Ritterstandsausschuß'}, {'DATUM': ['1691-03-26'], 'HOFSTAAT': None, 'FUNKTION': ['supernumerärer Biesitzer NÖ Landrechts'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}, {'DATUM': ['1705-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': 'Waisenrat'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1717-06-17'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': 'Jusitz-Bancodeputation'}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1717-10-28'], 'HOFSTAAT': None, 'FUNKTION': ['Klosterrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1693-11-10'], 'HOFSTAAT': None, 'FUNKTION': ['ksl. Rat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['ksl. Rat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1691-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	5: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	6: chunk: {'DATUM': ['1718-01-14'], 'HOFSTAAT': None, 'FUNKTION': ['Landuntermarschall'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	7: chunk: {'DATUM': ['1693-00-00', 'bis 1699<1699-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Raitherr'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	8: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Präses'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	9: chunk: {'DATUM': ['1703-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitmarschall'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	10: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	11: chunk: {'DATUM': ['1702-12-16'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	12: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	13: chunk: {'DATUM': ['1710-11-29'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': 'Ritterstandsausschuß'}
NLP COMPONENT >>> CreateChunks.py >>> 	14: chunk: {'DATUM': ['1691-03-26'], 'HOFSTAAT': None, 'FUNKTION': ['supernumerärer Biesitzer NÖ Landrechts'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	15: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	16: chunk: {'DATUM': ['1705-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	17: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': 'Waisenrat'}
process_chunks >>> len_doc_chunks: 18, len Ämter-Spalte: 5
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1717-06-17'], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': 'Jusitz-Bancodeputation'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1717-10-28'], 'HOFSTAAT': 'L', 'FUNKTION': ['Klosterrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1693-11-10'], 'HOFSTAAT': 'L', 'FUNKTION': ['ksl. Rat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['ksl. Rat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1691-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1718-01-14'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landuntermarschall'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1693-00-00', 'bis 1699<1699-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['NÖ Raitherr'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Präses'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1703-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitmarschall'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1702-12-16'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regierungsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1710-11-29'], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': 'Ritterstandsausschuß'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1691-03-26'], 'HOFSTAAT': 'L', 'FUNKTION': ['supernumerärer Biesitzer NÖ Landrechts'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1705-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': 'Waisenrat'}
helper_hsv_match_amt_with_funct >>> r_A = NÖ / Raitkollegium; NÖ-LG / Landrechtsbeisitzer, NÖ-LG? / Raitherren; Ritterstand; NÖ-RKz / Ritterstand; OMeA / Truchsesse
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Jusitz-Bancodeputation'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Ritterstandsausschuß'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Waisenrat'
process_chunks >>> cD ['1717-06-17'], cF [], cH L, CA Jusitz-Bancodeputation
helper_hsv_post_process_dates >>> old: 1717-06-17, new: 1717-06-17<1717-06-17>
chunk_process_datum >>> rel, chunk sdw: 1717-06-17<1717-06-17>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1717-06-17<1717-06-17>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Jusitz-Bancodeputation
chunk_process_amt_NEW >>>  Return value of inst2 = Jusitz-Bancodeputation (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F []
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1717-06-17<1717-06-17>', 'related_institution': <Institution: Jusitz-Bancodeputation (L1 (Ks.))>}
process_chunks >>> cD ['1717-10-28'], cF ['Klosterrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1717-10-28, new: 1717-10-28<1717-10-28>
chunk_process_datum >>> rel, chunk sdw: 1717-10-28<1717-10-28>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1717-10-28<1717-10-28>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Klosterrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Klosterrat
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1717-10-28<1717-10-28>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Klosterrat>}
process_chunks >>> cD ['1693-11-10'], cF ['ksl. Rat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1693-11-10, new: 1693-11-10<1693-11-10>
chunk_process_datum >>> rel, chunk sdw: 1693-11-10<1693-11-10>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1693-11-10<1693-11-10>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['ksl. Rat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = ksl. Rat
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1693-11-10<1693-11-10>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: ksl. Rat>}
process_chunks >>> cD [], cF ['ksl. Rat'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['ksl. Rat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = ksl. Rat
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: ksl. Rat>}
process_chunks >>> cD ['1691-00-00'], cF ['Truchseß'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1691-00-00, new: 1691<1691-06-30>
chunk_process_datum >>> rel, chunk sdw: 1691<1691-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1691<1691-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Truchseß']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Truchseß
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1691<1691-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Truchseß>}
process_chunks >>> cD ['1701-00-00'], cF ['Landrechtsbeisitzer'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Landrechtsbeisitzer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landrechtsbeisitzer
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Landrechtsbeisitzer>}
process_chunks >>> cD ['1718-01-14'], cF ['Landuntermarschall'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1718-01-14, new: 1718-01-14<1718-01-14>
chunk_process_datum >>> rel, chunk sdw: 1718-01-14<1718-01-14>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1718-01-14<1718-01-14>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Landuntermarschall']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landuntermarschall
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1718-01-14<1718-01-14>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Landuntermarschall>}
process_chunks >>> cD ['1693-00-00', 'bis 1699<1699-06-30>'], cF ['NÖ Raitherr'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1693-00-00, new: 1693<1693-06-30>
helper_hsv_post_process_dates >>> inner date: <1699-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1699-06-30>
helper_hsv_post_process_dates >>> old: bis 1699<1699-06-30>, new: bis 1699<1699-06-30>
chunk_process_datum >>> rel, chunk sdw: 1693<1693-06-30>
chunk_process_datum >>> rel, chunk edw: 1693<1693-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1693<1693-06-30>', 'end_date_written': 'bis 1699<1699-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['NÖ Raitherr']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = NÖ Raitherr
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1693<1693-06-30>', 'end_date_written': 'bis 1699<1699-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: NÖ Raitherr>}
process_chunks >>> cD [], cF ['Präses'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Präses']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Präses
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Präses>}
process_chunks >>> cD ['1703-00-00', 'bis 1704<1704-06-30>'], cF ['Raitmarschall'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1703-00-00, new: 1703<1703-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1703<1703-06-30>
chunk_process_datum >>> rel, chunk edw: 1703<1703-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1703<1703-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Raitmarschall']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Raitmarschall
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1703<1703-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Raitmarschall>}
process_chunks >>> cD ['1701-00-00'], cF ['Raitrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Raitrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Raitrat
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Raitrat>}
process_chunks >>> cD ['1702-12-16'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1702-12-16, new: 1702-12-16<1702-12-16>
chunk_process_datum >>> rel, chunk sdw: 1702-12-16<1702-12-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1702-12-16<1702-12-16>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1702-12-16<1702-12-16>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}
process_chunks >>> cD ['1704-00-00'], cF ['Regierungsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regierungsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regierungsrat
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regierungsrat>}
process_chunks >>> cD ['1710-11-29'], cF [], cH L, CA Ritterstandsausschuß
helper_hsv_post_process_dates >>> old: 1710-11-29, new: 1710-11-29<1710-11-29>
chunk_process_datum >>> rel, chunk sdw: 1710-11-29<1710-11-29>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1710-11-29<1710-11-29>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Ritterstandsausschuß
chunk_process_amt_NEW >>>  Return value of inst2 = Ritterstandsausschuß (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F []
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1710-11-29<1710-11-29>', 'related_institution': <Institution: Ritterstandsausschuß (L1 (Ks.))>}
process_chunks >>> cD ['1691-03-26'], cF ['supernumerärer Biesitzer NÖ Landrechts'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1691-03-26, new: 1691-03-26<1691-03-26>
chunk_process_datum >>> rel, chunk sdw: 1691-03-26<1691-03-26>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1691-03-26<1691-03-26>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['supernumerärer Biesitzer NÖ Landrechts']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = supernumerärer Biesitzer NÖ Landrechts
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1691-03-26<1691-03-26>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: supernumerärer Biesitzer NÖ Landrechts>}
process_chunks >>> cD ['1704-00-00'], cF ['Truchseß'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Truchseß']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Truchseß
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Truchseß>}
process_chunks >>> cD ['1705-00-00'], cF ['Verordneter'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1705-00-00, new: 1705<1705-06-30>
chunk_process_datum >>> rel, chunk sdw: 1705<1705-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1705<1705-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Verordneter']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Verordneter
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1705<1705-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Verordneter>}
process_chunks >>> cD [], cF [], cH L, CA Waisenrat
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Waisenrat
chunk_process_amt_NEW >>>  Return value of inst2 = Waisenrat (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F []
process_chunks >>>  Source Person Relation: 49 -- Aichen, von, Johann Joachim -- {'related_person': <Person: Aichen, von, Johann Joachim>, 'related_institution': <Institution: Waisenrat (L1 (Ks.))>}

--------- Start of row | 50 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichen, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aichen, von END INPUT, ROW:50
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = jurid. Doktorenkollegiums
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(7) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}, {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}, {'DATUM': ['1656-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Wiener'], 'AMT': 'jurid. Doktorenkollegiums'}, {'DATUM': ['1661-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Landschreiber'], 'AMT': None}, {'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1647-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1656-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Wiener'], 'AMT': 'jurid. Doktorenkollegiums'}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1661-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Landschreiber'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	5: chunk: {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	6: chunk: {'DATUM': ['1647-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 7, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landschreiber'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landschreiber'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1656-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Wiener'], 'AMT': 'jurid. Doktorenkollegiums'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1661-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['NÖ Landschreiber'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1647-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG; NÖ-RR / Ritterbank
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'jurid. Doktorenkollegiums'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD [], cF ['Landschreiber'], cH L, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ landmarschallisches Gericht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ landmarschallisches Gericht (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Landschreiber']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landschreiber
process_chunks >>>  Source Person Relation: 50 -- Aichen, von, Peter -- {'related_person': <Person: Aichen, von, Peter>, 'related_institution': <Institution: NÖ landmarschallisches Gericht (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Landschreiber>}
process_chunks >>> cD ['1674-00-00', 'bis 1677<1677-06-30>'], cF ['Landschreiber'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674<1674-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674<1674-06-30>
chunk_process_datum >>> rel, chunk edw: 1674<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Landschreiber']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landschreiber
process_chunks >>>  Source Person Relation: 50 -- Aichen, von, Peter -- {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Landschreiber>}
process_chunks >>> cD ['1656-00-00'], cF ['Wiener'], cH L, CA jurid. Doktorenkollegiums
helper_hsv_post_process_dates >>> old: 1656-00-00, new: 1656<1656-06-30>
chunk_process_datum >>> rel, chunk sdw: 1656<1656-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1656<1656-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: jurid. Doktorenkollegiums
chunk_process_amt_NEW >>>  Return value of inst2 = jurid. Doktorenkollegiums (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Wiener']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Wiener
process_chunks >>>  Source Person Relation: 50 -- Aichen, von, Peter -- {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1656<1656-06-30>', 'related_institution': <Institution: jurid. Doktorenkollegiums (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Wiener>}
process_chunks >>> cD ['1661-00-00'], cF ['NÖ Landschreiber'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1661-00-00, new: 1661<1661-06-30>
chunk_process_datum >>> rel, chunk sdw: 1661<1661-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1661<1661-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['NÖ Landschreiber']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = NÖ Landschreiber
process_chunks >>>  Source Person Relation: 50 -- Aichen, von, Peter -- {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1661<1661-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: NÖ Landschreiber>}
process_chunks >>> cD ['1666-00-00'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1666-00-00, new: 1666<1666-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666<1666-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1666<1666-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 50 -- Aichen, von, Peter -- {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1666<1666-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}
process_chunks >>> cD ['1678-00-00'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 50 -- Aichen, von, Peter -- {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1678<1678-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}
process_chunks >>> cD ['1647-00-00'], cF ['Sekretär'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1647-00-00, new: 1647<1647-06-30>
chunk_process_datum >>> rel, chunk sdw: 1647<1647-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1647<1647-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 50 -- Aichen, von, Peter -- {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1647<1647-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär>}

--------- Start of row | 51 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichpüchl, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aichpüchl, von END INPUT, ROW:51
person_process_field_titel >>> t_tit = 1625-00-00 Adelsstand
person_process_field_titel >>> t_list = ['1625-00-00 Adelsstand']
helper_hsv_post_process_dates >>> old: 1625-00-00, new: 1625<1625-06-30>
create_title >>> tit_res: 1625-00-00 Adelsstand, date after processing: 1625<1625-06-30>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(4) = [{'DATUM': ['1649-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Rektor'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Dekan'], 'AMT': None}, {'DATUM': ['1654-00-00', 'bis 1657<1657-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1649-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Rektor'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Dekan'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1654-00-00', 'bis 1657<1657-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 4, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1649-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Rektor'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Dekan'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1654-00-00', 'bis 1657<1657-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Kammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1649-00-00'], cF ['Rektor'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1649-00-00, new: 1649<1649-06-30>
chunk_process_datum >>> rel, chunk sdw: 1649<1649-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichpüchl, von, Johann Karl>, 'start_date_written': '1649<1649-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Rektor']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Rektor
process_chunks >>>  Source Person Relation: 51 -- Aichpüchl, von, Johann Karl -- {'related_person': <Person: Aichpüchl, von, Johann Karl>, 'start_date_written': '1649<1649-06-30>', 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Rektor>}
process_chunks >>> cD [], cF ['Dekan'], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichpüchl, von, Johann Karl>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Dekan']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Dekan
process_chunks >>>  Source Person Relation: 51 -- Aichpüchl, von, Johann Karl -- {'related_person': <Person: Aichpüchl, von, Johann Karl>, 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Dekan>}
process_chunks >>> cD ['1654-00-00', 'bis 1657<1657-06-30>'], cF ['Regimentsrat'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1654-00-00, new: 1654<1654-06-30>
helper_hsv_post_process_dates >>> inner date: <1657-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1657-06-30>
helper_hsv_post_process_dates >>> old: bis 1657<1657-06-30>, new: bis 1657<1657-06-30>
chunk_process_datum >>> rel, chunk sdw: 1654<1654-06-30>
chunk_process_datum >>> rel, chunk edw: 1654<1654-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichpüchl, von, Johann Karl>, 'start_date_written': '1654<1654-06-30>', 'end_date_written': 'bis 1657<1657-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 51 -- Aichpüchl, von, Johann Karl -- {'related_person': <Person: Aichpüchl, von, Johann Karl>, 'start_date_written': '1654<1654-06-30>', 'end_date_written': 'bis 1657<1657-06-30>', 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}
process_chunks >>> cD [], cF ['Kammerrat'], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichpüchl, von, Johann Karl>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Kammerrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerrat
process_chunks >>>  Source Person Relation: 51 -- Aichpüchl, von, Johann Karl -- {'related_person': <Person: Aichpüchl, von, Johann Karl>, 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Kammerrat>}

--------- Start of row | 52 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R '
process_chunks >>> cD ['1675-00-00'], cF ['Kanzlist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Franz Friedrich>, 'start_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 52 -- Aigner, Franz Friedrich -- {'related_person': <Person: Aigner, Franz Friedrich>, 'start_date_written': '1675<1675-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 53 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Kanzlist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Hanns Freidrich>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 53 -- Aigner, Hanns Freidrich -- {'related_person': <Person: Aigner, Hanns Freidrich>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 54 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R '
process_chunks >>> cD ['1678-00-00'], cF ['Kanzlist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Johann>, 'start_date_written': '1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 54 -- Aigner, Johann -- {'related_person': <Person: Aigner, Johann>, 'start_date_written': '1678<1678-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 55 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = S.n.)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': 'S.n.)'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': 'S.n.)'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': 'S.n.)'}
helper_hsv_match_amt_with_funct >>> r_A = HK-HBH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = S.n.)
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'S.n.)'
process_chunks >>> cD ['1704-00-00'], cF ['Raitoffizier'], cH L, CA S.n.)
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Johann Adam>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: S.n.)
chunk_process_amt_NEW >>>  Return value of inst2 = S.n.) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Raitoffizier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Raitoffizier
process_chunks >>>  Source Person Relation: 55 -- Aigner, Johann Adam -- {'related_person': <Person: Aigner, Johann Adam>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: S.n.) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Raitoffizier>}

--------- Start of row | 56 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1711-04-01'], 'HOFSTAAT': None, 'FUNKTION': ['Oberjäger'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1711-04-01'], 'HOFSTAAT': None, 'FUNKTION': ['Oberjäger'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1711-04-01'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Oberjäger'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = ÖodE.
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = ÖodE.
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'ÖodE.'
process_chunks >>> cD ['1711-04-01'], cF ['Oberjäger'], cH Dummy Hofstaat, CA ÖodE.
helper_hsv_post_process_dates >>> old: 1711-04-01, new: 1711-04-01<1711-04-01>
chunk_process_datum >>> rel, chunk sdw: 1711-04-01<1711-04-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Johann Adam>, 'start_date_written': '1711-04-01<1711-04-01>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: ÖodE.
chunk_process_amt_NEW >>> c_A was: ÖodE. and amt after matching with amt index is: Österreich ob der Enns
chunk_process_amt_NEW >>>  Return value of inst2 = Österreich ob der Enns (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Oberjäger']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Oberjäger
process_chunks >>>  Source Person Relation: 56 -- Aigner, Johann Adam -- {'related_person': <Person: Aigner, Johann Adam>, 'start_date_written': '1711-04-01<1711-04-01>', 'related_institution': <Institution: Österreich ob der Enns (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Oberjäger>}

--------- Start of row | 57 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R '
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], cF ['Kanzlist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk edw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Johann Friedrich>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 57 -- Aigner, Johann Friedrich -- {'related_person': <Person: Aigner, Johann Friedrich>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 58 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Heizer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Heizer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Heizer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHK-LE
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHK-LE
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHK-LE'
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1685-11-01<1685-11-01>'], cF ['Heizer'], cH L, CA RHK-LE
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1685-11-01>
helper_hsv_post_process_dates >>> new_i_date: <1685-11-01>
helper_hsv_post_process_dates >>> old: bis 1685-11-01<1685-11-01>, new: bis 1685-11-01<1685-11-01>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Sebastian>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1685-11-01<1685-11-01>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHK-LE
chunk_process_amt_NEW >>> c_A was: RHK-LE and amt after matching with amt index is: Reichhofkanzlei-Lateinische Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Heizer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Heizer
process_chunks >>>  Source Person Relation: 58 -- Aigner, Sebastian -- {'related_person': <Person: Aigner, Sebastian>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1685-11-01<1685-11-01>', 'related_institution': <Institution: Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Heizer>}

--------- Start of row | 59 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reitknecht'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reitknecht'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Reitknecht'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Reitknechte
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA '
process_chunks >>> cD ['1663-00-00'], cF ['Reitknecht'], cH LW, CA OStA 
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Valentin>, 'start_date_written': '1663<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: OStA 
chunk_process_amt_NEW >>> c_A was: OStA  and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (LW)
chunk_create_relations >>> create relations called for c_F ['Reitknecht']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reitknecht
process_chunks >>>  Source Person Relation: 59 -- Aigner, Valentin -- {'related_person': <Person: Aigner, Valentin>, 'start_date_written': '1663<1663-06-30>', 'related_institution': <Institution: Oberststallmeisteramt (LW)>, 'relation_type': <PersonInstitutionRelation: Reitknecht>}

--------- Start of row | 60 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ailers, von (Eilers, von)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Ailers, von (Eilers, von) END INPUT, ROW:60
person_process_field_familienname >>> fam1: Ailers, von
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 25), match='(Eilers, von)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = jur. Fakultät
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(4) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat', 'Referendar', 'Sekretär, geh.'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Professor'], 'AMT': 'jur. Fakultät'}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Referendar'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär, geh.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat', 'Referendar', 'Sekretär, geh.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Professor'], 'AMT': 'jur. Fakultät'}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Referendar'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär, geh.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 4, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = ksl.
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Hofrat', 'Referendar', 'Sekretär, geh.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Professor'], 'AMT': 'jur. Fakultät'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Referendar'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Sekretär, geh.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-HKz
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-HKz'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'jur. Fakultät'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD [], cF ['Hofrat', 'Referendar', 'Sekretär, geh.'], cH ksl., CA NÖ-HKz
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ailers, von, Johann>}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-HKz
chunk_process_amt_NEW >>> c_A was: NÖ-HKz and amt after matching with amt index is: Niederösterreichisch Hofkanzlei
chunk_process_amt_NEW >>>  Return value of inst2 = Niederösterreichisch Hofkanzlei (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofrat', 'Referendar', 'Sekretär, geh.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofrat
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Referendar
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär, geh.
process_chunks >>>  Source Person Relation: 60 -- Ailers, von, Johann -- {'related_person': <Person: Ailers, von, Johann>, 'related_institution': <Institution: Niederösterreichisch Hofkanzlei (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär, geh.>}
process_chunks >>> cD [], cF ['Professor'], cH ksl., CA jur. Fakultät
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ailers, von, Johann>}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: jur. Fakultät
chunk_process_amt_NEW >>>  Return value of inst2 = jur. Fakultät (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Professor']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Professor
process_chunks >>>  Source Person Relation: 60 -- Ailers, von, Johann -- {'related_person': <Person: Ailers, von, Johann>, 'related_institution': <Institution: jur. Fakultät (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Professor>}
process_chunks >>> cD [], cF ['Referendar'], cH ksl., CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ailers, von, Johann>}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Referendar']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Referendar
process_chunks >>>  Source Person Relation: 60 -- Ailers, von, Johann -- {'related_person': <Person: Ailers, von, Johann>, 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Referendar>}
process_chunks >>> cD ['1701-00-00'], cF ['Sekretär, geh.'], cH ksl., CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ailers, von, Johann>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär, geh.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär, geh.
process_chunks >>>  Source Person Relation: 60 -- Ailers, von, Johann -- {'related_person': <Person: Ailers, von, Johann>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär, geh.>}

--------- Start of row | 61 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ailers, von (Eilers, von)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Ailers, von (Eilers, von) END INPUT, ROW:61
person_process_field_familienname >>> fam1: Ailers, von
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 25), match='(Eilers, von)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ'
process_chunks >>> cD ['1701-00-00'], cF ['Sekretär'], cH Dummy Hofstaat, CA NÖ
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ailers, von, Konrad>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ
chunk_process_amt_NEW >>> c_A was: NÖ and amt after matching with amt index is: nan
chunk_process_amt_NEW >>>  Return value of inst2 = nan (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 61 -- Ailers, von, Konrad -- {'related_person': <Person: Ailers, von, Konrad>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: nan (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Sekretär>}

--------- Start of row | 62 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albani
person_process_field_titel >>> t_tit = Reichsgraf
person_process_field_titel >>> t_list = ['Reichsgraf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['ab 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['ab 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['ab 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Edelknabe'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA'
process_chunks >>> cD ['ab 1704<1704-06-30>'], cF ['Edelknabe'], cH L, CA OStA
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: ab 1704<1704-06-30>, new: ab 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: ab 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albani, Johannes Hieronimus>, 'start_date_written': 'ab 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Edelknabe']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Edelknabe
process_chunks >>>  Source Person Relation: 62 -- Albani, Johannes Hieronimus -- {'related_person': <Person: Albani, Johannes Hieronimus>, 'start_date_written': 'ab 1704<1704-06-30>', 'related_institution': <Institution: Oberststallmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Edelknabe>}

--------- Start of row | 63 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alber
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Instrumentalist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Instrumentalist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Instrumentalist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofmusikanten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA '
process_chunks >>> cD ['1704-00-00'], cF ['Instrumentalist'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alber, Paul>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Instrumentalist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Instrumentalist
process_chunks >>>  Source Person Relation: 63 -- Alber, Paul -- {'related_person': <Person: Alber, Paul>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Instrumentalist>}

--------- Start of row | 64 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alberth
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Konzipisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R '
process_chunks >>> cD ['1675-00-00'], cF ['Konzipist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alberth, Johann>, 'start_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Konzipist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konzipist
process_chunks >>>  Source Person Relation: 64 -- Alberth, Johann -- {'related_person': <Person: Alberth, Johann>, 'start_date_written': '1675<1675-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Konzipist>}

--------- Start of row | 65 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alberti
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1698-00-00', 'bis 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent', 'Agent'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1698-00-00', 'bis 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent', 'Agent'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1698-00-00', 'bis 1701<1701-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofratsagent', 'Agent'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHK-LE / Agenten; RHR / Agenten
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHK-LE / Agenten'
process_chunks >>> cD ['1698-00-00', 'bis 1701<1701-06-30>'], cF ['Reichshofratsagent', 'Agent'], cH L, CA RHK-LE / Agenten
helper_hsv_post_process_dates >>> old: 1698-00-00, new: 1698<1698-06-30>
helper_hsv_post_process_dates >>> inner date: <1701-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1701-06-30>
helper_hsv_post_process_dates >>> old: bis 1701<1701-06-30>, new: bis 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1698<1698-06-30>
chunk_process_datum >>> rel, chunk edw: 1698<1698-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alberti, Georg Tobias>, 'start_date_written': '1698<1698-06-30>', 'end_date_written': 'bis 1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHK-LE / Agenten
chunk_process_amt_NEW >>> c_A was: RHK-LE / Agenten and amt after matching with amt index is: Reichhofkanzlei-Lateinische Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Reichshofratsagent', 'Agent']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofratsagent
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Agent
process_chunks >>>  Source Person Relation: 65 -- Alberti, Georg Tobias -- {'related_person': <Person: Alberti, Georg Tobias>, 'start_date_written': '1698<1698-06-30>', 'end_date_written': 'bis 1701<1701-06-30>', 'related_institution': <Institution: Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Agent>}

--------- Start of row | 66 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alberti
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sommelier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sommelier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'EM', 'FUNKTION': ['Sommelier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA'
process_chunks >>> cD ['1704-00-00'], cF ['Sommelier'], cH EM, CA OMeA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alberti, Niklas>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (EM (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Sommelier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sommelier
process_chunks >>>  Source Person Relation: 66 -- Alberti, Niklas -- {'related_person': <Person: Alberti, Niklas>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (EM (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Sommelier>}

--------- Start of row | 67 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albertin
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK '
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Kanzlist'], cH L, CA HK 
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albertin, Max>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 67 -- Albertin, Max -- {'related_person': <Person: Albertin, Max>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 68 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Kanzlist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, Caspar >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 68 -- Albrecht, Caspar  -- {'related_person': <Person: Albrecht, Caspar >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 69 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-00-00', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-00-00', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R '
process_chunks >>> cD ['1674-00-00', 'bis 1678<1678-06-30>'], cF ['Kanzlist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674<1674-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674<1674-06-30>
chunk_process_datum >>> rel, chunk edw: 1674<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, Jacob >, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 69 -- Albrecht, Jacob  -- {'related_person': <Person: Albrecht, Jacob >, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 70 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofglasrmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofglasrmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Hofglasrmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = Hofbauamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = Hofbauamt
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Hofbauamt'
process_chunks >>> cD ['1701-00-00'], cF ['Hofglasrmeister'], cH Dummy Hofstaat, CA Hofbauamt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, Johann>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Hofbauamt
chunk_process_amt_NEW >>> c_A was: Hofbauamt and amt after matching with amt index is: Hofbauamt
chunk_process_amt_NEW >>>  Return value of inst2 = Hofbauamt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Hofglasrmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofglasrmeister
process_chunks >>>  Source Person Relation: 70 -- Albrecht, Johann -- {'related_person': <Person: Albrecht, Johann>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Hofbauamt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Hofglasrmeister>}

--------- Start of row | 71 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Wirtschaftssekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Wirtschaftssekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Wirtschaftssekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], cF ['Wirtschaftssekretär'], cH L, CA NÖ-LG 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, Johann>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ landmarschallisches Gericht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ landmarschallisches Gericht (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Wirtschaftssekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Wirtschaftssekretär
process_chunks >>>  Source Person Relation: 71 -- Albrecht, Johann -- {'related_person': <Person: Albrecht, Johann>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: NÖ landmarschallisches Gericht (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Wirtschaftssekretär>}

--------- Start of row | 72 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Syndikus', 'Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Syndikus', 'Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Syndikus', 'Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG '
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Syndikus', 'Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, Johann>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ landmarschallisches Gericht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ landmarschallisches Gericht (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Syndikus', 'Verordneter']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Syndikus
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Verordneter
process_chunks >>>  Source Person Relation: 72 -- Albrecht, Johann -- {'related_person': <Person: Albrecht, Johann>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: NÖ landmarschallisches Gericht (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Verordneter>}

--------- Start of row | 73 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht (Albrechts) von Lauterburg
person_process_field_familienname >>> fam1: Albrecht
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 20), match='(Albrechts)'>
person_process_field_titel >>> t_tit = von Lauterburg
person_process_field_titel >>> t_list = ['von Lauterburg']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Reichshofratsagent, 1675-00-00, 1677-00-00, Agent, Reichshofrats-, 1677-00-00, 1678-00-00)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :73, Reichshofratsagent (1675-00-00 bis 1677-00-00) , Agent, Reichshofrats-, Reihenfolge nach Juramentsablegung (1677-00-00 bis 1678-00-00), [{'start': 0, 'end': 18, 'token_start': 0, 'token_end': 0, 'label': 'FUNKTION'}, {'start': 20, 'end': 30, 'token_start': 2, 'token_end': 6, 'label': 'DATUM'}, {'start': 35, 'end': 45, 'token_start': 8, 'token_end': 12, 'label': 'DATUM'}, {'start': 48, 'end': 69, 'token_start': 15, 'token_end': 17, 'label': 'FUNKTION'}, {'start': 107, 'end': 117, 'token_start': 23, 'token_end': 27, 'label': 'DATUM'}, {'start': 122, 'end': 132, 'token_start': 29, 'token_end': 33, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Reichshofratsagent, 1675-00-00, 1677-00-00, Agent, Reichshofrats-, 1677-00-00, 1678-00-00]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Reichshofratsagent, 1675-00-00, 1677-00-00, Agent, Reichshofrats-, 1677-00-00, 1678-00-00)
NLP COMPONENT >>> CreateChunks.py >>> In else clause of chunks, chunk = {'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>', 'ab 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent', 'Reichshofratsagent'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>', 'ab 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent', 'Reichshofratsagent'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>', 'ab 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent', 'Reichshofratsagent'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>', 'ab 1677<1677-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Reichshofratsagent', 'Reichshofratsagent'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Agenten
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHR / Agenten'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD ['1675-00-00', 'bis 1677<1677-06-30>', 'ab 1677<1677-06-30>'], cF ['Reichshofratsagent', 'Reichshofratsagent'], cH Dummy Hofstaat, CA RHR / Agenten
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, Johann Jacob >}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: RHR / Agenten
chunk_process_amt_NEW >>> c_A was: RHR / Agenten and amt after matching with amt index is: nan
chunk_process_amt_NEW >>>  Return value of inst2 = nan (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Reichshofratsagent', 'Reichshofratsagent']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofratsagent
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofratsagent
process_chunks >>>  Source Person Relation: 73 -- Albrecht, Johann Jacob  -- {'related_person': <Person: Albrecht, Johann Jacob >, 'related_institution': <Institution: nan (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Reichshofratsagent>}
process_chunks >>> cD [], cF [], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, Johann Jacob >}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F []
process_chunks >>>  Source Person Relation: 73 -- Albrecht, Johann Jacob  -- {'related_person': <Person: Albrecht, Johann Jacob >, 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>}

--------- Start of row | 74 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Albrecht, von END INPUT, ROW:74
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = OÖ Expedition
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(3) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofsekretär'], 'AMT': 'OÖ Expedition'}, {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofsekretär'], 'AMT': 'OÖ Expedition'}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 3, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofsekretär'], 'AMT': 'OÖ Expedition'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Ritter- , Gelehrtenstand; HK / OÖ Expedition
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK / Ritter- , Gelehrtenstand'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OÖ Expedition'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Hofkammerrat'], cH L, CA HK / Ritter- , Gelehrtenstand
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Franz Gottlieb>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK / Ritter- , Gelehrtenstand
chunk_process_amt_NEW >>> c_A was: HK / Ritter- , Gelehrtenstand and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkammerrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkammerrat
process_chunks >>>  Source Person Relation: 74 -- Albrecht, von, Franz Gottlieb -- {'related_person': <Person: Albrecht, von, Franz Gottlieb>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkammerrat>}
process_chunks >>> cD [], cF ['Hofsekretär'], cH L, CA OÖ Expedition
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Franz Gottlieb>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OÖ Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = OÖ Expedition (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofsekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofsekretär
process_chunks >>>  Source Person Relation: 74 -- Albrecht, von, Franz Gottlieb -- {'related_person': <Person: Albrecht, von, Franz Gottlieb>, 'related_institution': <Institution: OÖ Expedition (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofsekretär>}
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF [], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Franz Gottlieb>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F []
process_chunks >>>  Source Person Relation: 74 -- Albrecht, von, Franz Gottlieb -- {'related_person': <Person: Albrecht, von, Franz Gottlieb>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>}

--------- Start of row | 75 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Albrecht, von END INPUT, ROW:75
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1693-00-00', 'bis 1697<1697-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat', 'Regimentsrat', 'Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1693-00-00', 'bis 1697<1697-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat', 'Regimentsrat', 'Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1693-00-00', 'bis 1697<1697-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regierungsrat', 'Regimentsrat', 'Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RKz / Ritterstand; NÖ-RR / Ritterstand
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-RKz / Ritterstand'
process_chunks >>> cD ['1693-00-00', 'bis 1697<1697-06-30>'], cF ['Regierungsrat', 'Regimentsrat', 'Regimentsrat'], cH L, CA NÖ-RKz / Ritterstand
helper_hsv_post_process_dates >>> old: 1693-00-00, new: 1693<1693-06-30>
helper_hsv_post_process_dates >>> inner date: <1697-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1697-06-30>
helper_hsv_post_process_dates >>> old: bis 1697<1697-06-30>, new: bis 1697<1697-06-30>
chunk_process_datum >>> rel, chunk sdw: 1693<1693-06-30>
chunk_process_datum >>> rel, chunk edw: 1693<1693-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Joseph Matthias>, 'start_date_written': '1693<1693-06-30>', 'end_date_written': 'bis 1697<1697-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RKz / Ritterstand
chunk_process_amt_NEW >>> c_A was: NÖ-RKz / Ritterstand and amt after matching with amt index is: nan
chunk_process_amt_NEW >>>  Return value of inst2 = nan (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regierungsrat', 'Regimentsrat', 'Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regierungsrat
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 75 -- Albrecht, von, Joseph Matthias -- {'related_person': <Person: Albrecht, von, Joseph Matthias>, 'start_date_written': '1693<1693-06-30>', 'end_date_written': 'bis 1697<1697-06-30>', 'related_institution': <Institution: nan (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}

--------- Start of row | 76 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Albrecht, von END INPUT, ROW:76
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Referendar'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Referendar'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär', 'Referendar'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR '
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Sekretär', 'Referendar'], cH L, CA GR 
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Johann Ferdinand>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR 
chunk_process_amt_NEW >>> c_A was: GR  and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär', 'Referendar']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Referendar
process_chunks >>>  Source Person Relation: 76 -- Albrecht, von, Johann Ferdinand -- {'related_person': <Person: Albrecht, von, Johann Ferdinand>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Referendar>}

--------- Start of row | 77 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Albrecht, von END INPUT, ROW:77
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(3) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}, {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}, {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammersekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammersekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 3, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammersekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Sekretarien
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK / Sekretarien'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Sekretär'], cH L, CA HK / Sekretarien
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Johann Ferdinand>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK / Sekretarien
chunk_process_amt_NEW >>> c_A was: HK / Sekretarien and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 77 -- Albrecht, von, Johann Ferdinand -- {'related_person': <Person: Albrecht, von, Johann Ferdinand>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär>}
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Hofkammerrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Johann Ferdinand>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkammerrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkammerrat
process_chunks >>>  Source Person Relation: 77 -- Albrecht, von, Johann Ferdinand -- {'related_person': <Person: Albrecht, von, Johann Ferdinand>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkammerrat>}
process_chunks >>> cD ['1678-00-00'], cF ['Hofkammersekretär'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Johann Ferdinand>, 'start_date_written': '1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkammersekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkammersekretär
process_chunks >>>  Source Person Relation: 77 -- Albrecht, von, Johann Ferdinand -- {'related_person': <Person: Albrecht, von, Johann Ferdinand>, 'start_date_written': '1678<1678-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkammersekretär>}

--------- Start of row | 78 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrechtsburg, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Albrechtsburg, von END INPUT, ROW:78
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> In else clause of chunks, chunk = {'DATUM': ['1702-00-00', 'bis 1731-03-03<1731-03-03>', '1710-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat', 'NÖ Landschafts-bereinnehmer', 'Raitherr'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = NÖ Stände
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1702-00-00', 'bis 1731-03-03<1731-03-03>', '1710-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat', 'NÖ Landschafts-bereinnehmer', 'Raitherr'], 'AMT': None}, {'DATUM': ['1723-00-00', 'bis 1729<1729-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': 'NÖ Stände'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1702-00-00', 'bis 1731-03-03<1731-03-03>', '1710-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat', 'NÖ Landschafts-bereinnehmer', 'Raitherr'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1723-00-00', 'bis 1729<1729-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': 'NÖ Stände'}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1702-00-00', 'bis 1731-03-03<1731-03-03>', '1710-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regimentsrat', 'NÖ Landschafts-bereinnehmer', 'Raitherr'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1723-00-00', 'bis 1729<1729-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': 'NÖ Stände'}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ Stände'
process_chunks >>> cD ['1702-00-00', 'bis 1731-03-03<1731-03-03>', '1710-00-00'], cF ['Regimentsrat', 'NÖ Landschafts-bereinnehmer', 'Raitherr'], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrechtsburg, von, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Regimentsrat', 'NÖ Landschafts-bereinnehmer', 'Raitherr']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = NÖ Landschafts-bereinnehmer
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Raitherr
process_chunks >>>  Source Person Relation: 78 -- Albrechtsburg, von, Franz Ignaz -- {'related_person': <Person: Albrechtsburg, von, Franz Ignaz>, 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Raitherr>}
process_chunks >>> cD ['1723-00-00', 'bis 1729<1729-06-30>'], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ Stände
helper_hsv_post_process_dates >>> old: 1723-00-00, new: 1723<1723-06-30>
helper_hsv_post_process_dates >>> inner date: <1729-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1729-06-30>
helper_hsv_post_process_dates >>> old: bis 1729<1729-06-30>, new: bis 1729<1729-06-30>
chunk_process_datum >>> rel, chunk sdw: 1723<1723-06-30>
chunk_process_datum >>> rel, chunk edw: 1723<1723-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrechtsburg, von, Franz Ignaz>, 'start_date_written': '1723<1723-06-30>', 'end_date_written': 'bis 1729<1729-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ Stände
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Stände (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Verordneter']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Verordneter
process_chunks >>>  Source Person Relation: 78 -- Albrechtsburg, von, Franz Ignaz -- {'related_person': <Person: Albrechtsburg, von, Franz Ignaz>, 'start_date_written': '1723<1723-06-30>', 'end_date_written': 'bis 1729<1729-06-30>', 'related_institution': <Institution: NÖ Stände (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Verordneter>}

--------- Start of row | 79 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrechtsburg, von (Albrecht von Albrechtsburg)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Albrechtsburg, von (Albrecht von Albrechtsburg) END INPUT, ROW:79
person_process_field_familienname >>> fam1: Albrechtsburg, von
person_process_field_familienname >>> fam2: <re.Match object; span=(19, 47), match='(Albrecht von Albrechtsburg)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = Geh. Sekretär
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat', 'Referendar'], 'AMT': 'Geh. Sekretär'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat', 'Referendar'], 'AMT': 'Geh. Sekretär'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofrat', 'Referendar'], 'AMT': 'Geh. Sekretär'}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-GHKz; NÖ-HKz
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Geh. Sekretär'
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Hofrat', 'Referendar'], cH L, CA Geh. Sekretär
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrechtsburg, von, Johann Ignaz >, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Geh. Sekretär
chunk_process_amt_NEW >>>  Return value of inst2 = Geh. Sekretär (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofrat', 'Referendar']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofrat
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Referendar
process_chunks >>>  Source Person Relation: 79 -- Albrechtsburg, von, Johann Ignaz  -- {'related_person': <Person: Albrechtsburg, von, Johann Ignaz >, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Geh. Sekretär (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Referendar>}

--------- Start of row | 80 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alexander (Alessandro)
person_process_field_familienname >>> fam1: Alexander
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 22), match='(Alessandro)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammerdiener
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], cF ['Kammerdiener'], cH EG, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alexander, NN>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create relations called for c_F ['Kammerdiener']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerdiener
process_chunks >>>  Source Person Relation: 80 -- Alexander, NN -- {'related_person': <Person: Alexander, NN>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: Dummy Amt (EG (KW))>, 'relation_type': <PersonInstitutionRelation: Kammerdiener>}

--------- Start of row | 81 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alexander (Alessandro)
person_process_field_familienname >>> fam1: Alexander
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 22), match='(Alessandro)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammersekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammersekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammersekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Sekretarien / Trabantenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Kammersekretär'], cH EG, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alexander, NN>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create relations called for c_F ['Kammersekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammersekretär
process_chunks >>>  Source Person Relation: 81 -- Alexander, NN -- {'related_person': <Person: Alexander, NN>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Dummy Amt (EG (KW))>, 'relation_type': <PersonInstitutionRelation: Kammersekretär>}

--------- Start of row | 82 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Allerndorff
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1676-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Allerndorff, Emerich Friedrich>, 'start_date_written': '1676<1676-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 82 -- Allerndorff, Emerich Friedrich -- {'related_person': <Person: Allerndorff, Emerich Friedrich>, 'start_date_written': '1676<1676-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 83 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alqui, d'
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = MMT
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-00-00'], 'HOFSTAAT': 'MMT', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammerdienerinnen)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammerdienerinnen)
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = '(Kammerdienerinnen)'
process_chunks >>> cD ['1666-00-00'], cF ['Kammerdienerin'], cH MMT, CA (Kammerdienerinnen)
helper_hsv_post_process_dates >>> old: 1666-00-00, new: 1666<1666-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666<1666-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alqui, d', Antonia>, 'start_date_written': '1666<1666-06-30>'}
chunk_get_nm_hst >>> c_H = MMT
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMT (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammerdienerinnen)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammerdienerinnen) (MMT (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Kammerdienerin']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerdienerin
process_chunks >>>  Source Person Relation: 83 -- Alqui, d', Antonia -- {'related_person': <Person: Alqui, d', Antonia>, 'start_date_written': '1666<1666-06-30>', 'related_institution': <Institution: (Kammerdienerinnen) (MMT (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Kammerdienerin>}

--------- Start of row | 84 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alraun
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1694-10-01'], 'HOFSTAAT': None, 'FUNKTION': ['Trabant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1694-10-01'], 'HOFSTAAT': None, 'FUNKTION': ['Trabant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1694-10-01'], 'HOFSTAAT': 'J', 'FUNKTION': ['Trabant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Trabantenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1694-10-01'], cF ['Trabant'], cH J, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1694-10-01, new: 1694-10-01<1694-10-01>
chunk_process_datum >>> rel, chunk sdw: 1694-10-01<1694-10-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alraun, Urban>, 'start_date_written': '1694-10-01<1694-10-01>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Trabant']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Trabant
process_chunks >>>  Source Person Relation: 84 -- Alraun, Urban -- {'related_person': <Person: Alraun, Urban>, 'start_date_written': '1694-10-01<1694-10-01>', 'related_institution': <Institution: Dummy Amt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Trabant>}

--------- Start of row | 85 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD [], cF ['Kämmerer'], cH J, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Gundaker>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 85 -- Althan, Gundaker -- {'related_person': <Person: Althan, Gundaker>, 'related_institution': <Institution: Oberstkämmereramt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 86 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-12-14', 'bis 1677-01-21<1677-01-21>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-12-14', 'bis 1677-01-21<1677-01-21>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-12-14', 'bis 1677-01-21<1677-01-21>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1676-12-14', 'bis 1677-01-21<1677-01-21>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1676-12-14, new: 1676-12-14<1676-12-14>
helper_hsv_post_process_dates >>> inner date: <1677-01-21>
helper_hsv_post_process_dates >>> new_i_date: <1677-01-21>
helper_hsv_post_process_dates >>> old: bis 1677-01-21<1677-01-21>, new: bis 1677-01-21<1677-01-21>
chunk_process_datum >>> rel, chunk sdw: 1676-12-14<1676-12-14>
chunk_process_datum >>> rel, chunk edw: 1676-12-14<1676-12-14>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Max Rudolph>, 'start_date_written': '1676-12-14<1676-12-14>', 'end_date_written': 'bis 1677-01-21<1677-01-21>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 86 -- Althan, Max Rudolph -- {'related_person': <Person: Althan, Max Rudolph>, 'start_date_written': '1676-12-14<1676-12-14>', 'end_date_written': 'bis 1677-01-21<1677-01-21>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 87 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1665-09-09', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1665-09-09', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1665-09-09', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1665-09-09', 'bis 1677<1677-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1665-09-09, new: 1665-09-09<1665-09-09>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1665-09-09<1665-09-09>
chunk_process_datum >>> rel, chunk edw: 1665-09-09<1665-09-09>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Victor >, 'start_date_written': '1665-09-09<1665-09-09>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 87 -- Althan, Victor  -- {'related_person': <Person: Althan, Victor >, 'start_date_written': '1665-09-09<1665-09-09>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 88 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Kämmerer, wirkl., 1656-11-22, 1680-00-00, Oberstküchenmeister, Hofküchenmeister, 1659, 1685-11-01, Geh. Rat, wirkl., 1701-00-00, 1704-00-00)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :88, Kämmerer, wirkl. (1656-11-22 bis 1680-00-00; 480 fl Gehalt) ; Oberstküchenmeister (Hofküchenmeister, prefetto di cusina) , (1659 bis 1685-11-01; 600 fl./ 1.000 fl Gehalt) ; Geh. Rat, wirkl. (1701-00-00 bis 1704-00-00), [{'start': 0, 'end': 16, 'token_start': 0, 'token_end': 3, 'label': 'FUNKTION'}, {'start': 18, 'end': 28, 'token_start': 5, 'token_end': 9, 'label': 'DATUM'}, {'start': 33, 'end': 43, 'token_start': 11, 'token_end': 15, 'label': 'DATUM'}, {'start': 61, 'end': 80, 'token_start': 22, 'token_end': 22, 'label': 'FUNKTION'}, {'start': 82, 'end': 98, 'token_start': 24, 'token_end': 24, 'label': 'FUNKTION'}, {'start': 122, 'end': 126, 'token_start': 32, 'token_end': 32, 'label': 'DATUM'}, {'start': 131, 'end': 141, 'token_start': 34, 'token_end': 38, 'label': 'DATUM'}, {'start': 170, 'end': 186, 'token_start': 49, 'token_end': 54, 'label': 'FUNKTION'}, {'start': 188, 'end': 198, 'token_start': 56, 'token_end': 60, 'label': 'DATUM'}, {'start': 203, 'end': 213, 'token_start': 62, 'token_end': 66, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Kämmerer, wirkl., 1656-11-22, 1680-00-00, Oberstküchenmeister, Hofküchenmeister, 1659, 1685-11-01, Geh. Rat, wirkl., 1701-00-00, 1704-00-00]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Kämmerer, wirkl., 1656-11-22, 1680-00-00, Oberstküchenmeister, Hofküchenmeister, 1659, 1685-11-01, Geh. Rat, wirkl., 1701-00-00, 1704-00-00)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(5) = [{'DATUM': ['1656-11-22', 'bis 1680<1680-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstküchenmeister'], 'AMT': None}, {'DATUM': ['1659', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofküchenmeister'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}, {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1656-11-22', 'bis 1680<1680-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstküchenmeister'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1659', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofküchenmeister'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 5, len Ämter-Spalte: 3
helper_hsv_match_hofstaate >>> r_H = ksl.; L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1656-11-22', 'bis 1680<1680-06-30>'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Oberstküchenmeister'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1659', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Hofküchenmeister'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'ksl.', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR; OMeA; OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD ['1656-11-22', 'bis 1680<1680-06-30>'], cF ['Kämmerer, wirkl.'], cH ksl., CA GR
helper_hsv_post_process_dates >>> old: 1656-11-22, new: 1656-11-22<1656-11-22>
helper_hsv_post_process_dates >>> inner date: <1680-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1680-06-30>
helper_hsv_post_process_dates >>> old: bis 1680<1680-06-30>, new: bis 1680<1680-06-30>
chunk_process_datum >>> rel, chunk sdw: 1656-11-22<1656-11-22>
chunk_process_datum >>> rel, chunk edw: 1656-11-22<1656-11-22>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Christoph >, 'start_date_written': '1656-11-22<1656-11-22>', 'end_date_written': 'bis 1680<1680-06-30>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 88 -- Althan, Christoph  -- {'related_person': <Person: Althan, Christoph >, 'start_date_written': '1656-11-22<1656-11-22>', 'end_date_written': 'bis 1680<1680-06-30>', 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}
process_chunks >>> cD [], cF ['Oberstküchenmeister'], cH ksl., CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Christoph >}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Oberstküchenmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Oberstküchenmeister
process_chunks >>>  Source Person Relation: 88 -- Althan, Christoph  -- {'related_person': <Person: Althan, Christoph >, 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Oberstküchenmeister>}
process_chunks >>> cD ['1659', 'bis 1685-11-01<1685-11-01>'], cF ['Hofküchenmeister'], cH ksl., CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1659, new: 1659<1659-06-30>
helper_hsv_post_process_dates >>> inner date: <1685-11-01>
helper_hsv_post_process_dates >>> new_i_date: <1685-11-01>
helper_hsv_post_process_dates >>> old: bis 1685-11-01<1685-11-01>, new: bis 1685-11-01<1685-11-01>
chunk_process_datum >>> rel, chunk sdw: 1659<1659-06-30>
chunk_process_datum >>> rel, chunk edw: 1659<1659-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Christoph >, 'start_date_written': '1659<1659-06-30>', 'end_date_written': 'bis 1685-11-01<1685-11-01>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofküchenmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofküchenmeister
process_chunks >>>  Source Person Relation: 88 -- Althan, Christoph  -- {'related_person': <Person: Althan, Christoph >, 'start_date_written': '1659<1659-06-30>', 'end_date_written': 'bis 1685-11-01<1685-11-01>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofküchenmeister>}
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.'], cH ksl., CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Christoph >}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Rat, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat, wirkl.
process_chunks >>>  Source Person Relation: 88 -- Althan, Christoph  -- {'related_person': <Person: Althan, Christoph >, 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Rat, wirkl.>}
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF [], cH ksl., CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Christoph >, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F []
process_chunks >>>  Source Person Relation: 88 -- Althan, Christoph  -- {'related_person': <Person: Althan, Christoph >, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>}

--------- Start of row | 89 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1693-00-00/1693-11-13<1693-00-00 - 1693-11-13>', 'bis 1704-00-009<1704-00-009>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1693-00-00/1693-11-13<1693-00-00 - 1693-11-13>', 'bis 1704-00-009<1704-00-009>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1693-00-00/1693-11-13<1693-00-00 - 1693-11-13>', 'bis 1704-00-009<1704-00-009>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1693-00-00/1693-11-13<1693-00-00 - 1693-11-13>', 'bis 1704-00-009<1704-00-009>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1693-00-00 - 1693-11-13>
helper_hsv_post_process_dates >>> new_i_date: <1693-06-30 - 1693-11-13>
helper_hsv_post_process_dates >>> old: 1693-00-00/1693-11-13<1693-00-00 - 1693-11-13>, new: 1693-00-00/1693-11-13<1693-06-30 - 1693-11-13>
helper_hsv_post_process_dates >>> inner date: <1704-00-009>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-309>
helper_hsv_post_process_dates >>> old: bis 1704-00-009<1704-00-009>, new: bis 1704-00-009<1704-06-309>
chunk_process_datum >>> rel, chunk sdw: 1693-00-00/1693-11-13<1693-06-30 - 1693-11-13>
chunk_process_datum >>> rel, chunk edw: 1693-00-00/1693-11-13<1693-06-30 - 1693-11-13>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Hubert Sigmund>, 'start_date_written': '1693-00-00/1693-11-13<1693-06-30 - 1693-11-13>', 'end_date_written': 'bis 1704-00-009<1704-06-309>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' bis 1704-00-009<1704-06-309> ' due to error ('Invalid iso date: ', '1704-06-309'): 
process_chunks >>>  Source Person Relation: 89 -- Althan, Hubert Sigmund -- {'related_person': <Person: Althan, Hubert Sigmund>, 'start_date_written': '1693-00-00/1693-11-13<1693-06-30 - 1693-11-13>', 'end_date_written': 'bis 1704-00-009<1704-06-309>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 90 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthof-', 'Landjägermeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthof-', 'Landjägermeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Obersthof-', 'Landjägermeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OJäA / Oberhof- , Landjägermeisteramt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OJäA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OJäA '
process_chunks >>> cD [], cF ['Obersthof-', 'Landjägermeister'], cH L, CA OJäA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Johann Christoph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OJäA 
chunk_process_amt_NEW >>>  Return value of inst2 = OJäA (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Obersthof-', 'Landjägermeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Obersthof-
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landjägermeister
process_chunks >>>  Source Person Relation: 90 -- Althan, Johann Christoph -- {'related_person': <Person: Althan, Johann Christoph>, 'related_institution': <Institution: OJäA (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Landjägermeister>}

--------- Start of row | 91 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1687-06-09 - 1687-07-19>
helper_hsv_post_process_dates >>> new_i_date: <1687-06-09 - 1687-07-19>
helper_hsv_post_process_dates >>> old: 1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>, new: 1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>
chunk_process_datum >>> rel, chunk edw: 1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Johann >, 'start_date_written': '1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 91 -- Althan, Johann  -- {'related_person': <Person: Althan, Johann >, 'start_date_written': '1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 92 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1688-06-03 - 1688-06-12>
helper_hsv_post_process_dates >>> new_i_date: <1688-06-03 - 1688-06-12>
helper_hsv_post_process_dates >>> old: 1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>, new: 1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>
chunk_process_datum >>> rel, chunk edw: 1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Maria Max Franz Carl>, 'start_date_written': '1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 92 -- Althan, Maria Max Franz Carl -- {'related_person': <Person: Althan, Maria Max Franz Carl>, 'start_date_written': '1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 93 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Edelknabe, Truchseß, 1661-01-16)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :93, Edelknabe, gewes.; Truchseß (1661-01-16), [{'token_start': 0, 'token_end': 0, 'start': 0, 'end': 9, 'text': 'Edelknabe', 'label': 'FUNKTION', 'source': '/nerdpool/models/viecpro_ner_hzab_12-20', 'input_hash': -473687537}, {'token_start': 5, 'token_end': 5, 'start': 19, 'end': 27, 'text': 'Truchseß', 'label': 'FUNKTION', 'source': '/nerdpool/models/viecpro_ner_hzab_12-20', 'input_hash': -473687537}, {'token_start': 7, 'token_end': 11, 'start': 29, 'end': 39, 'text': '1661-01-16', 'label': 'DATUM', 'source': '/nerdpool/models/viecpro_ner_hzab_12-20', 'input_hash': -473687537}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Edelknabe, Truchseß, 1661-01-16]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Edelknabe, Truchseß, 1661-01-16)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}, {'DATUM': ['1661-01-16'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1661-01-16'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Edelknabe'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1661-01-16'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD [], cF ['Edelknabe'], cH L, CA OStA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Maximilian Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Edelknabe']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Edelknabe
process_chunks >>>  Source Person Relation: 93 -- Althan, Maximilian Johann -- {'related_person': <Person: Althan, Maximilian Johann>, 'related_institution': <Institution: Oberststallmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Edelknabe>}
process_chunks >>> cD ['1661-01-16'], cF ['Truchseß'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1661-01-16, new: 1661-01-16<1661-01-16>
chunk_process_datum >>> rel, chunk sdw: 1661-01-16<1661-01-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Maximilian Johann>, 'start_date_written': '1661-01-16<1661-01-16>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Truchseß']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Truchseß
process_chunks >>>  Source Person Relation: 93 -- Althan, Maximilian Johann -- {'related_person': <Person: Althan, Maximilian Johann>, 'start_date_written': '1661-01-16<1661-01-16>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Truchseß>}

--------- Start of row | 94 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1684-00-00/1684-03-14<1684-00-00 - 1684-03-14>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1684-00-00/1684-03-14<1684-00-00 - 1684-03-14>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1684-00-00/1684-03-14<1684-00-00 - 1684-03-14>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1684-00-00/1684-03-14<1684-00-00 - 1684-03-14>', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1684-00-00 - 1684-03-14>
helper_hsv_post_process_dates >>> new_i_date: <1684-06-30 - 1684-03-14>
helper_hsv_post_process_dates >>> old: 1684-00-00/1684-03-14<1684-00-00 - 1684-03-14>, new: 1684-00-00/1684-03-14<1684-06-30 - 1684-03-14>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1684-00-00/1684-03-14<1684-06-30 - 1684-03-14>
chunk_process_datum >>> rel, chunk edw: 1684-00-00/1684-03-14<1684-06-30 - 1684-03-14>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Michael Adolph>, 'start_date_written': '1684-00-00/1684-03-14<1684-06-30 - 1684-03-14>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 94 -- Althan, Michael Adolph -- {'related_person': <Person: Althan, Michael Adolph>, 'start_date_written': '1684-00-00/1684-03-14<1684-06-30 - 1684-03-14>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 95 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-06-01', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-06-01', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-06-01', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1675-06-01', 'bis 1677<1677-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1675-06-01, new: 1675-06-01<1675-06-01>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675-06-01<1675-06-01>
chunk_process_datum >>> rel, chunk edw: 1675-06-01<1675-06-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Michael Franz Ferdinand >, 'start_date_written': '1675-06-01<1675-06-01>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 95 -- Althan, Michael Franz Ferdinand  -- {'related_person': <Person: Althan, Michael Franz Ferdinand >, 'start_date_written': '1675-06-01<1675-06-01>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 96 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1658-03-19', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1658-03-19', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1658-03-19', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA; HK / Grafen- , Herrenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  HK 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' HK '
process_chunks >>> cD ['1658-03-19', 'bis 1704<1704-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1658-03-19, new: 1658-03-19<1658-03-19>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1658-03-19<1658-03-19>
chunk_process_datum >>> rel, chunk edw: 1658-03-19<1658-03-19>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Michael Wenzel>, 'start_date_written': '1658-03-19<1658-03-19>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 96 -- Althan, Michael Wenzel -- {'related_person': <Person: Althan, Michael Wenzel>, 'start_date_written': '1658-03-19<1658-03-19>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA  HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Michael Wenzel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  HK 
chunk_process_amt_NEW >>> c_A was:  HK  and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkammerrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkammerrat
process_chunks >>>  Source Person Relation: 96 -- Althan, Michael Wenzel -- {'related_person': <Person: Althan, Michael Wenzel>, 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkammerrat>}

--------- Start of row | 97 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan (Althaimb)
person_process_field_familienname >>> fam1: Althan
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 17), match='(Althaimb)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1656-08-14', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1656-08-14', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1656-08-14', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1656-08-14', 'bis 1677<1677-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1656-08-14, new: 1656-08-14<1656-08-14>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1656-08-14<1656-08-14>
chunk_process_datum >>> rel, chunk edw: 1656-08-14<1656-08-14>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Wilhelm Wenzel>, 'start_date_written': '1656-08-14<1656-08-14>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 97 -- Althan, Wilhelm Wenzel -- {'related_person': <Person: Althan, Wilhelm Wenzel>, 'start_date_written': '1656-08-14<1656-08-14>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 98 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan (Althann)
person_process_field_familienname >>> fam1: Althan
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 16), match='(Althann)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00', 'bis 1687<1687-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Oberstjägermeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00', 'bis 1687<1687-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Oberstjägermeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00', 'bis 1687<1687-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstjägermeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OJäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OJäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OJäA'
process_chunks >>> cD ['1669-00-00', 'bis 1687<1687-06-30>'], cF ['Oberstjägermeister'], cH L, CA OJäA
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669<1669-06-30>
helper_hsv_post_process_dates >>> inner date: <1687-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1687-06-30>
helper_hsv_post_process_dates >>> old: bis 1687<1687-06-30>, new: bis 1687<1687-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669<1669-06-30>
chunk_process_datum >>> rel, chunk edw: 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Christoph >, 'start_date_written': '1669<1669-06-30>', 'end_date_written': 'bis 1687<1687-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OJäA
chunk_process_amt_NEW >>>  Return value of inst2 = OJäA (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Oberstjägermeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Oberstjägermeister
process_chunks >>>  Source Person Relation: 98 -- Althan, Christoph  -- {'related_person': <Person: Althan, Christoph >, 'start_date_written': '1669<1669-06-30>', 'end_date_written': 'bis 1687<1687-06-30>', 'related_institution': <Institution: OJäA (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Oberstjägermeister>}

--------- Start of row | 99 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan, oo Lobkowitz
person_process_field_titel >>> t_tit = Gräfin; Fürstin
person_process_field_titel >>> t_list = ['Gräfin', 'Fürstin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1699-01-01', 'bis 1702-11-30<1702-11-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein', 'Heirat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1699-01-01', 'bis 1702-11-30<1702-11-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein', 'Heirat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = AW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: AW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: AW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1699-01-01', 'bis 1702-11-30<1702-11-30>'], 'HOFSTAAT': 'AW', 'FUNKTION': ['Kammerfräulein', 'Heirat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1699-01-01', 'bis 1702-11-30<1702-11-30>'], cF ['Kammerfräulein', 'Heirat'], cH AW, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1699-01-01, new: 1699-01-01<1699-01-01>
helper_hsv_post_process_dates >>> inner date: <1702-11-30>
helper_hsv_post_process_dates >>> new_i_date: <1702-11-30>
helper_hsv_post_process_dates >>> old: bis 1702-11-30<1702-11-30>, new: bis 1702-11-30<1702-11-30>
chunk_process_datum >>> rel, chunk sdw: 1699-01-01<1699-01-01>
chunk_process_datum >>> rel, chunk edw: 1699-01-01<1699-01-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: NEEDS REVIEW, Maria Philippina>, 'start_date_written': '1699-01-01<1699-01-01>', 'end_date_written': 'bis 1702-11-30<1702-11-30>'}
chunk_get_nm_hst >>> c_H = AW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: AW (Kgin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (AW (Kgin.))
chunk_create_relations >>> create relations called for c_F ['Kammerfräulein', 'Heirat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerfräulein
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Heirat
process_chunks >>>  Source Person Relation: 99 -- NEEDS REVIEW, Maria Philippina -- {'related_person': <Person: NEEDS REVIEW, Maria Philippina>, 'start_date_written': '1699-01-01<1699-01-01>', 'end_date_written': 'bis 1702-11-30<1702-11-30>', 'related_institution': <Institution: Dummy Amt (AW (Kgin.))>, 'relation_type': <PersonInstitutionRelation: Heirat>}

--------- Start of row | 100 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Althan, von END INPUT, ROW:100
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-RR '
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, von, Franz Dieter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 100 -- Althan, von, Franz Dieter -- {'related_person': <Person: Althan, von, Franz Dieter>, 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}

--------- Start of row | 101 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Althan, von END INPUT, ROW:101
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, von, Wenzel >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 101 -- Althan, von, Wenzel  -- {'related_person': <Person: Althan, von, Wenzel >, 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 102 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan, von (Althamb, Altheim)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Althan, von (Althamb, Altheim) END INPUT, ROW:102
person_process_field_familienname >>> fam1: Althan, von
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 30), match='(Althamb, Altheim)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1665-05-14', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1665-05-14', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1665-05-14', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1665-05-14', 'bis 1678<1678-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1665-05-14, new: 1665-05-14<1665-05-14>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1665-05-14<1665-05-14>
chunk_process_datum >>> rel, chunk edw: 1665-05-14<1665-05-14>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, von, Michael Hanns >, 'start_date_written': '1665-05-14<1665-05-14>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 102 -- Althan, von, Michael Hanns  -- {'related_person': <Person: Althan, von, Michael Hanns >, 'start_date_written': '1665-05-14<1665-05-14>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 103 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Altheim
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1675-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Altheim, Christoph Johann>, 'start_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 103 -- Altheim, Christoph Johann -- {'related_person': <Person: Altheim, Christoph Johann>, 'start_date_written': '1675<1675-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 104 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Altheim
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Oberstküchenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Oberstküchenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstküchenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA'
process_chunks >>> cD ['1675-00-00'], cF ['Oberstküchenmeister'], cH L, CA OMeA
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Altheim, Johann Christoph>, 'start_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Oberstküchenmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Oberstküchenmeister
process_chunks >>>  Source Person Relation: 104 -- Altheim, Johann Christoph -- {'related_person': <Person: Altheim, Johann Christoph>, 'start_date_written': '1675<1675-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Oberstküchenmeister>}

--------- Start of row | 105 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Altheim
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1675-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Altheim, Michael Wenzel>, 'start_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 105 -- Altheim, Michael Wenzel -- {'related_person': <Person: Altheim, Michael Wenzel>, 'start_date_written': '1675<1675-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 106 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alting [Oettingen?]
person_process_field_familienname >>> fam1: Alting
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 19), match='[Oettingen?]'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', '1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', '1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', '1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>', '1675-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk edw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alting, Franz Anton>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 106 -- Alting, Franz Anton -- {'related_person': <Person: Alting, Franz Anton>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': '1675<1675-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 107 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Altschaffer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Diener', 'Patrum'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Diener', 'Patrum'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Diener', 'Patrum'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1663-00-00'], cF ['Diener', 'Patrum'], cH LW, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Altschaffer, Georg>, 'start_date_written': '1663<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (LW)
chunk_create_relations >>> create relations called for c_F ['Diener', 'Patrum']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Diener
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Patrum
process_chunks >>>  Source Person Relation: 107 -- Altschaffer, Georg -- {'related_person': <Person: Altschaffer, Georg>, 'start_date_written': '1663<1663-06-30>', 'related_institution': <Institution: Dummy Amt (LW)>, 'relation_type': <PersonInstitutionRelation: Patrum>}

--------- Start of row | 108 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aluernia Saluza (Saluzzo)
person_process_field_familienname >>> fam1: Aluernia Saluza
person_process_field_familienname >>> fam2: <re.Match object; span=(16, 25), match='(Saluzzo)'>
person_process_field_titel >>> t_tit = Marques
person_process_field_titel >>> t_list = ['Marques']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-10-24'], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-10-24'], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-10-24'], 'HOFSTAAT': 'L', 'FUNKTION': ['Mundschenk'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA'
process_chunks >>> cD ['1676-10-24'], cF ['Mundschenk'], cH L, CA OMeA
helper_hsv_post_process_dates >>> old: 1676-10-24, new: 1676-10-24<1676-10-24>
chunk_process_datum >>> rel, chunk sdw: 1676-10-24<1676-10-24>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aluernia Saluza, Franz Anton >, 'start_date_written': '1676-10-24<1676-10-24>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Mundschenk']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Mundschenk
process_chunks >>>  Source Person Relation: 108 -- Aluernia Saluza, Franz Anton  -- {'related_person': <Person: Aluernia Saluza, Franz Anton >, 'start_date_written': '1676-10-24<1676-10-24>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Mundschenk>}

--------- Start of row | 109 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aluni (Alunij)
person_process_field_familienname >>> fam1: Aluni
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 14), match='(Alunij)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Registrant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Registrant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Registrant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Registranten; HK-NÖ Expedition / Alte Registratur
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK / Registranten'
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Registrant'], cH L, CA HK / Registranten
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aluni, Johann Leopold>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK / Registranten
chunk_process_amt_NEW >>> c_A was: HK / Registranten and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Registrant']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Registrant
process_chunks >>>  Source Person Relation: 109 -- Aluni, Johann Leopold -- {'related_person': <Person: Aluni, Johann Leopold>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Registrant>}

--------- Start of row | 110 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Amann (Aman, Amanth, Amman, Ammann, Ammon, Amon)
person_process_field_familienname >>> fam1: Amann
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 48), match='(Aman, Amanth, Amman, Ammann, Ammon, Amon)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkontrollor'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkontrollor'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkontrollor'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Offiziere ,a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA '
process_chunks >>> cD [], cF ['Hofkontrollor'], cH L, CA OMeA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Amann, Johann Caspar >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkontrollor']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkontrollor
process_chunks >>>  Source Person Relation: 110 -- Amann, Johann Caspar  -- {'related_person': <Person: Amann, Johann Caspar >, 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkontrollor>}

--------- Start of row | 111 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ambringen, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Ambringen, von END INPUT, ROW:111
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammerherren
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1663-00-00'], cF ['Kämmerer'], cH LW, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ambringen, von, Hanns Caspar>, 'start_date_written': '1663<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (LW)
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 111 -- Ambringen, von, Hanns Caspar -- {'related_person': <Person: Ambringen, von, Hanns Caspar>, 'start_date_written': '1663<1663-06-30>', 'related_institution': <Institution: Dummy Amt (LW)>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 112 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Amman (Amen, Ammon,  Amon, Aninn)
person_process_field_familienname >>> fam1: Amman
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 33), match='(Amen, Ammon,  Amon, Aninn)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Einspänniger'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Einspänniger'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Einspänniger'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ(?) / Einspännige; NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ(?) / Einspännige'
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1704<1704-06-30>'], cF ['Einspänniger'], cH L, CA NÖ(?) / Einspännige
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Amman, Martin>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ(?) / Einspännige
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ(?) / Einspännige (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Einspänniger']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Einspänniger
process_chunks >>>  Source Person Relation: 112 -- Amman, Martin -- {'related_person': <Person: Amman, Martin>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: NÖ(?) / Einspännige (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Einspänniger>}

--------- Start of row | 113 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ammon
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Agent'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Agenten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR '
process_chunks >>> cD ['1704-00-00'], cF ['Agent'], cH L, CA HKR 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ammon, Franz Xaver Philipp>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Agent']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Agent
process_chunks >>>  Source Person Relation: 113 -- Ammon, Franz Xaver Philipp -- {'related_person': <Person: Ammon, Franz Xaver Philipp>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Agent>}

--------- Start of row | 114 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Amphoso
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1684'], 'HOFSTAAT': None, 'FUNKTION': ['Ballmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1684'], 'HOFSTAAT': None, 'FUNKTION': ['Ballmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = ksl.
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ksl.
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ksl.
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1684'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Ballmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1684'], cF ['Ballmeister'], cH ksl., CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1684, new: 1684<1684-06-30>
chunk_process_datum >>> rel, chunk sdw: 1684<1684-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Amphoso, Hans Jacob>, 'start_date_written': '1684<1684-06-30>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Ballmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Ballmeister
process_chunks >>>  Source Person Relation: 114 -- Amphoso, Hans Jacob -- {'related_person': <Person: Amphoso, Hans Jacob>, 'start_date_written': '1684<1684-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Ballmeister>}

--------- Start of row | 115 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anbringen, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Anbringen, von END INPUT, ROW:115
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1662-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1662-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1662-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1662-00-00'], cF ['Kämmerer'], cH LW, CA OKäA
helper_hsv_post_process_dates >>> old: 1662-00-00, new: 1662<1662-06-30>
chunk_process_datum >>> rel, chunk sdw: 1662<1662-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anbringen, von, Hans Caspar>, 'start_date_written': '1662<1662-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (LW)
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 115 -- Anbringen, von, Hans Caspar -- {'related_person': <Person: Anbringen, von, Hans Caspar>, 'start_date_written': '1662<1662-06-30>', 'related_institution': <Institution: Oberstkämmereramt (LW)>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 116 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Andenegg
person_process_field_titel >>> t_tit = JUD
person_process_field_titel >>> t_list = ['JUD']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Advokat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Advokat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Advokat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Advokaten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR '
process_chunks >>> cD ['1704-00-00'], cF ['Advokat'], cH L, CA HKR 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andenegg, Franz>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Advokat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Advokat
process_chunks >>>  Source Person Relation: 116 -- Andenegg, Franz -- {'related_person': <Person: Andenegg, Franz>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Advokat>}

--------- Start of row | 117 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anderln (Andler)
person_process_field_familienname >>> fam1: Anderln
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 16), match='(Andler)'>
person_process_field_titel >>> t_tit = Edler; Freiherr
person_process_field_titel >>> t_list = ['Edler', 'Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (kurbair. Regierungsrat, Regimentsrat, 1698-03-01, Reichshofrat, 1710-00-00, Regimentsrat, 1701-00-00, Regierungsrat, 1704-00-00)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :117, kurbair. Regierungsrat in Straubin; Regimentsrat (1698-03-01) ; dekretierter ksl. Reichshofrat (1710-00-00) ; Regimentsrat, Ritterstand (1701-00-00) ; Regierungsrat, Ritterstand (1704-00-00), [{'start': 0, 'end': 22, 'token_start': 0, 'token_end': 2, 'label': 'FUNKTION'}, {'start': 36, 'end': 48, 'token_start': 6, 'token_end': 6, 'label': 'FUNKTION'}, {'start': 50, 'end': 60, 'token_start': 8, 'token_end': 12, 'label': 'DATUM'}, {'start': 81, 'end': 93, 'token_start': 18, 'token_end': 18, 'label': 'FUNKTION'}, {'start': 95, 'end': 105, 'token_start': 20, 'token_end': 24, 'label': 'DATUM'}, {'start': 108, 'end': 120, 'token_start': 27, 'token_end': 27, 'label': 'FUNKTION'}, {'start': 135, 'end': 145, 'token_start': 31, 'token_end': 35, 'label': 'DATUM'}, {'start': 148, 'end': 161, 'token_start': 38, 'token_end': 38, 'label': 'FUNKTION'}, {'start': 176, 'end': 186, 'token_start': 42, 'token_end': 46, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [kurbair. Regierungsrat, Regimentsrat, 1698-03-01, Reichshofrat, 1710-00-00, Regimentsrat, 1701-00-00, Regierungsrat, 1704-00-00]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (kurbair. Regierungsrat, Regimentsrat, 1698-03-01, Reichshofrat, 1710-00-00, Regimentsrat, 1701-00-00, Regierungsrat, 1704-00-00)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(5) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['kurbair. Regierungsrat'], 'AMT': None}, {'DATUM': ['1698-03-01'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1710-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['kurbair. Regierungsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1698-03-01'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1710-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 5, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['kurbair. Regierungsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1698-03-01'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1710-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regierungsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RKz / Ritterstand; NÖ-RR / Ritterstand
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-RKz / Ritterstand'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD [], cF ['kurbair. Regierungsrat'], cH L, CA NÖ-RKz / Ritterstand
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anderln, Franz Vollmar >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RKz / Ritterstand
chunk_process_amt_NEW >>> c_A was: NÖ-RKz / Ritterstand and amt after matching with amt index is: nan
chunk_process_amt_NEW >>>  Return value of inst2 = nan (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['kurbair. Regierungsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = kurbair. Regierungsrat
process_chunks >>>  Source Person Relation: 117 -- Anderln, Franz Vollmar  -- {'related_person': <Person: Anderln, Franz Vollmar >, 'related_institution': <Institution: nan (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: kurbair. Regierungsrat>}
process_chunks >>> cD ['1698-03-01'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1698-03-01, new: 1698-03-01<1698-03-01>
chunk_process_datum >>> rel, chunk sdw: 1698-03-01<1698-03-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anderln, Franz Vollmar >, 'start_date_written': '1698-03-01<1698-03-01>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 117 -- Anderln, Franz Vollmar  -- {'related_person': <Person: Anderln, Franz Vollmar >, 'start_date_written': '1698-03-01<1698-03-01>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}
process_chunks >>> cD ['1710-00-00'], cF ['Reichshofrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1710-00-00, new: 1710<1710-06-30>
chunk_process_datum >>> rel, chunk sdw: 1710<1710-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anderln, Franz Vollmar >, 'start_date_written': '1710<1710-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Reichshofrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofrat
process_chunks >>>  Source Person Relation: 117 -- Anderln, Franz Vollmar  -- {'related_person': <Person: Anderln, Franz Vollmar >, 'start_date_written': '1710<1710-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Reichshofrat>}
process_chunks >>> cD ['1701-00-00'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anderln, Franz Vollmar >, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 117 -- Anderln, Franz Vollmar  -- {'related_person': <Person: Anderln, Franz Vollmar >, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}
process_chunks >>> cD ['1704-00-00'], cF ['Regierungsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anderln, Franz Vollmar >, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regierungsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regierungsrat
process_chunks >>>  Source Person Relation: 117 -- Anderln, Franz Vollmar  -- {'related_person': <Person: Anderln, Franz Vollmar >, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regierungsrat>}

--------- Start of row | 118 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Andler (Andlern, Antler)
person_process_field_familienname >>> fam1: Andler
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 24), match='(Andlern, Antler)'>
person_process_field_titel >>> t_tit = Edler, Freiherr
person_process_field_titel >>> t_list = ['Edler, Freiherr']
person_process_field_titel >>> Komma in tit: Edler, Freiherr
person_process_field_titel >>> CREATING SPLIT TITLE Edler from Edler, Freiherr
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Edler, Freiherr
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(4) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}, {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}, {'DATUM': ['1697-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1697-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 4, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Registrator'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1697-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHK-LE; NÖ-RR / Ritterstand
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHK-LE'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA RHK-LE
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andler, Johann Philipp>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHK-LE
chunk_process_amt_NEW >>> c_A was: RHK-LE and amt after matching with amt index is: Reichhofkanzlei-Lateinische Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 118 -- Andler, Johann Philipp -- {'related_person': <Person: Andler, Johann Philipp>, 'related_institution': <Institution: Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär>}
process_chunks >>> cD ['1678-00-00'], cF ['Registrator'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andler, Johann Philipp>, 'start_date_written': '1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Registrator']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Registrator
process_chunks >>>  Source Person Relation: 118 -- Andler, Johann Philipp -- {'related_person': <Person: Andler, Johann Philipp>, 'start_date_written': '1678<1678-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Registrator>}
process_chunks >>> cD ['1697-00-00'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1697-00-00, new: 1697<1697-06-30>
chunk_process_datum >>> rel, chunk sdw: 1697<1697-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andler, Johann Philipp>, 'start_date_written': '1697<1697-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 118 -- Andler, Johann Philipp -- {'related_person': <Person: Andler, Johann Philipp>, 'start_date_written': '1697<1697-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}
process_chunks >>> cD ['1701-00-00'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andler, Johann Philipp>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 118 -- Andler, Johann Philipp -- {'related_person': <Person: Andler, Johann Philipp>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}

--------- Start of row | 119 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Andler, von (Andleren, Andlern, Antley, von)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Andler, von (Andleren, Andlern, Antley, von) END INPUT, ROW:119
person_process_field_familienname >>> fam1: Andler, von
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 44), match='(Andleren, Andlern, Antley, von)'>
person_process_field_titel >>> t_tit = Freiherr , Edler
person_process_field_titel >>> t_list = ['Freiherr , Edler']
person_process_field_titel >>> Komma in tit: Freiherr , Edler
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Freiherr , Edler
person_process_field_titel >>> CREATING SPLIT TITLE Edler from Freiherr , Edler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00', 'bis 1701<1701-06-30>', 'ab 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00', 'bis 1701<1701-06-30>', 'ab 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00', 'bis 1701<1701-06-30>', 'ab 1685-11-01<1685-11-01>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Gelehrtenbank; RHR / Ritter- , Gelehrtenstand
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHR / Gelehrtenbank'
process_chunks >>> cD ['1669-00-00', 'bis 1701<1701-06-30>', 'ab 1685-11-01<1685-11-01>'], cF ['Reichshofrat'], cH L, CA RHR / Gelehrtenbank
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andler, von, Franz Friedrich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR / Gelehrtenbank
chunk_process_amt_NEW >>> c_A was: RHR / Gelehrtenbank and amt after matching with amt index is: Reichshofrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Reichshofrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofrat
process_chunks >>>  Source Person Relation: 119 -- Andler, von, Franz Friedrich -- {'related_person': <Person: Andler, von, Franz Friedrich>, 'related_institution': <Institution: Reichshofrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Reichshofrat>}

--------- Start of row | 120 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Andleuer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK-NÖ-BH'
process_chunks >>> cD ['1677-00-00'], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677<1677-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andleuer, Franz Christoph>, 'start_date_written': '1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: Niederösterreichische Buchhalterei 
chunk_process_amt_NEW >>>  Return value of inst2 = Niederösterreichische Buchhalterei  (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Raitoffizier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Raitoffizier
process_chunks >>>  Source Person Relation: 120 -- Andleuer, Franz Christoph -- {'related_person': <Person: Andleuer, Franz Christoph>, 'start_date_written': '1677<1677-06-30>', 'related_institution': <Institution: Niederösterreichische Buchhalterei  (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Raitoffizier>}

--------- Start of row | 121 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ,G with: , G
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Andrimont (Antrimont, Antrindt, Vrtrimont)
person_process_field_familienname >>> fam1: Andrimont
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 42), match='(Antrimont, Antrindt, Vrtrimont)'>
person_process_field_titel >>> t_tit = Baron, Freiherr
person_process_field_titel >>> t_list = ['Baron, Freiherr']
person_process_field_titel >>> Komma in tit: Baron, Freiherr
person_process_field_titel >>> CREATING SPLIT TITLE Baron from Baron, Freiherr
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Baron, Freiherr
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678-00-000<1678-00-000>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678-00-000<1678-00-000>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678-00-000<1678-00-000>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678-00-000<1678-00-000>'], cF ['Hofkriegsrat'], cH L, CA HKR
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-00-000>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-300>
helper_hsv_post_process_dates >>> old: bis 1678-00-000<1678-00-000>, new: bis 1678-00-000<1678-06-300>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andrimont, Johann>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678-00-000<1678-06-300>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkriegsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkriegsrat
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' bis 1678-00-000<1678-06-300> ' due to error ('Invalid iso date: ', '1678-06-300'): 
process_chunks >>>  Source Person Relation: 121 -- Andrimont, Johann -- {'related_person': <Person: Andrimont, Johann>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678-00-000<1678-06-300>', 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkriegsrat>}
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andrimont, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkriegsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkriegsrat
process_chunks >>>  Source Person Relation: 121 -- Andrimont, Johann -- {'related_person': <Person: Andrimont, Johann>, 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkriegsrat>}

--------- Start of row | 122 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Andtlern
person_process_field_titel >>> t_tit = Freiherr, Edler
person_process_field_titel >>> t_list = ['Freiherr, Edler']
person_process_field_titel >>> Komma in tit: Freiherr, Edler
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Freiherr, Edler
person_process_field_titel >>> CREATING SPLIT TITLE Edler from Freiherr, Edler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Ritter- , Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHR '
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>'], cF ['Reichshofrat'], cH L, CA RHR 
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andtlern, Franz Friedrich>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: Reichshofrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Reichshofrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofrat
process_chunks >>>  Source Person Relation: 122 -- Andtlern, Franz Friedrich -- {'related_person': <Person: Andtlern, Franz Friedrich>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'related_institution': <Institution: Reichshofrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Reichshofrat>}

--------- Start of row | 123 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anfong (Anfang)
person_process_field_familienname >>> fam1: Anfong
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Anfang)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Türhüter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Türhüter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Türhüter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], cF ['Türhüter'], cH L, CA HKR 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anfong, Niclas >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Türhüter']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Türhüter
process_chunks >>>  Source Person Relation: 123 -- Anfong, Niclas  -- {'related_person': <Person: Anfong, Niclas >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Türhüter>}

--------- Start of row | 124 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anfoso
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabenballonmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabenballonmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Edelknabenballonmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA'
process_chunks >>> cD ['1704-00-00'], cF ['Edelknabenballonmeister'], cH L, CA OStA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anfoso, Johann Andre>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Edelknabenballonmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Edelknabenballonmeister
process_chunks >>>  Source Person Relation: 124 -- Anfoso, Johann Andre -- {'related_person': <Person: Anfoso, Johann Andre>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberststallmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Edelknabenballonmeister>}

--------- Start of row | 125 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Angenmayr
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Tenor'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Tenor'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Tenor'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofmusikanten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA '
process_chunks >>> cD ['1704-00-00'], cF ['Tenor'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Angenmayr, Johannes>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Tenor']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Tenor
process_chunks >>>  Source Person Relation: 125 -- Angenmayr, Johannes -- {'related_person': <Person: Angenmayr, Johannes>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Tenor>}

--------- Start of row | 126 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Angerstein
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['? 1669<1669-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['? 1669<1669-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['? 1669<1669-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OÖ-HKz
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OÖ-HKz
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OÖ-HKz'
process_chunks >>> cD ['? 1669<1669-06-30>'], cF ['Kanzlist'], cH L, CA OÖ-HKz
helper_hsv_post_process_dates >>> inner date: <1669-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1669-06-30>
helper_hsv_post_process_dates >>> old: ? 1669<1669-06-30>, new: ? 1669<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: ? 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Angerstein, Zacharias>, 'start_date_written': '? 1669<1669-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OÖ-HKz
chunk_process_amt_NEW >>> c_A was: OÖ-HKz and amt after matching with amt index is: Oberösterreichische Hofkanzlei
chunk_process_amt_NEW >>>  Return value of inst2 = Oberösterreichische Hofkanzlei (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 126 -- Angerstein, Zacharias -- {'related_person': <Person: Angerstein, Zacharias>, 'start_date_written': '? 1669<1669-06-30>', 'related_institution': <Institution: Oberösterreichische Hofkanzlei (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 127 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Angirsola
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- , Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Angirsola, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Kammerfräulein']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerfräulein
process_chunks >>>  Source Person Relation: 127 -- Angirsola, NN -- {'related_person': <Person: Angirsola, NN>, 'related_institution': <Institution: Dummy Amt (CF (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Kammerfräulein>}

--------- Start of row | 128 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Angst
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Konzipisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK '
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>'], cF ['Konzipist'], cH L, CA HK 
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Angst, Ferdinand>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Konzipist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konzipist
process_chunks >>>  Source Person Relation: 128 -- Angst, Ferdinand -- {'related_person': <Person: Angst, Ferdinand>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Konzipist>}

--------- Start of row | 129 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anguisola (Anguissola)
person_process_field_familienname >>> fam1: Anguisola
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 22), match='(Anguissola)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Edelknabeninstruktor in militär., Ingenieurskunst, Ingenieur, 1700-04-01, 1704-00-00, Oberstleutnant)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :129, Edelknabeninstruktor in militär., Ingenieurskunst; Ingenieur (1700-04-01 \ 1704-00-00) ; Oberstleutnant, [{'start': 0, 'end': 49, 'token_start': 0, 'token_end': 5, 'label': 'FUNKTION'}, {'start': 51, 'end': 60, 'token_start': 7, 'token_end': 7, 'label': 'FUNKTION'}, {'start': 62, 'end': 72, 'token_start': 9, 'token_end': 13, 'label': 'DATUM'}, {'start': 75, 'end': 85, 'token_start': 15, 'token_end': 19, 'label': 'DATUM'}, {'start': 88, 'end': 102, 'token_start': 22, 'token_end': 22, 'label': 'FUNKTION'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Edelknabeninstruktor in militär., Ingenieurskunst, Ingenieur, 1700-04-01, 1704-00-00, Oberstleutnant]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Edelknabeninstruktor in militär., Ingenieurskunst, Ingenieur, 1700-04-01, 1704-00-00, Oberstleutnant)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(3) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabeninstruktor in militär., Ingenieurskunst'], 'AMT': None}, {'DATUM': ['1700-04-01', '1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Ingenieur'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstleutnant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabeninstruktor in militär., Ingenieurskunst'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1700-04-01', '1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Ingenieur'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstleutnant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 3, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L; J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Edelknabeninstruktor in militär., Ingenieurskunst'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1700-04-01', '1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Ingenieur'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstleutnant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Bibliothecarius; OStA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA / Bibliothecarius'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD [], cF ['Edelknabeninstruktor in militär., Ingenieurskunst'], cH L, CA OMeA / Bibliothecarius
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anguisola, Alexander >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA / Bibliothecarius
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA / Bibliothecarius (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Edelknabeninstruktor in militär., Ingenieurskunst']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Edelknabeninstruktor in militär., Ingenieurskunst
process_chunks >>>  Source Person Relation: 129 -- Anguisola, Alexander  -- {'related_person': <Person: Anguisola, Alexander >, 'related_institution': <Institution: OMeA / Bibliothecarius (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Edelknabeninstruktor in militär., Ingenieurskunst>}
process_chunks >>> cD ['1700-04-01', '1704-00-00'], cF ['Ingenieur'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1700-04-01, new: 1700-04-01<1700-04-01>
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1700-04-01<1700-04-01>
chunk_process_datum >>> rel, chunk edw: 1700-04-01<1700-04-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anguisola, Alexander >, 'start_date_written': '1700-04-01<1700-04-01>', 'end_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Ingenieur']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Ingenieur
process_chunks >>>  Source Person Relation: 129 -- Anguisola, Alexander  -- {'related_person': <Person: Anguisola, Alexander >, 'start_date_written': '1700-04-01<1700-04-01>', 'end_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Ingenieur>}
process_chunks >>> cD [], cF ['Oberstleutnant'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anguisola, Alexander >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Oberstleutnant']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Oberstleutnant
process_chunks >>>  Source Person Relation: 129 -- Anguisola, Alexander  -- {'related_person': <Person: Anguisola, Alexander >, 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Oberstleutnant>}

--------- Start of row | 130 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anguisola (Anquisola(?), Aquisola)
person_process_field_familienname >>> fam1: Anguisola
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 32), match='(Anquisola?, Aquisola)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- , Hoffräulein / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hoffräulein', 'Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anguisola, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Hoffräulein', 'Kammerfräulein']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hoffräulein
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerfräulein
process_chunks >>>  Source Person Relation: 130 -- Anguisola, NN -- {'related_person': <Person: Anguisola, NN>, 'related_institution': <Institution: Dummy Amt (CF (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Kammerfräulein>}

--------- Start of row | 131 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Angula Velasco, d'
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = MMT
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-00-00'], 'HOFSTAAT': 'MMT', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Mannspersonen)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Mannspersonen)
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = '(Mannspersonen)'
process_chunks >>> cD ['1666-00-00'], cF ['Sekretär'], cH MMT, CA (Mannspersonen)
helper_hsv_post_process_dates >>> old: 1666-00-00, new: 1666<1666-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666<1666-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Angula Velasco, d', Isidoro>, 'start_date_written': '1666<1666-06-30>'}
chunk_get_nm_hst >>> c_H = MMT
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMT (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Mannspersonen)
chunk_process_amt_NEW >>>  Return value of inst2 = (Mannspersonen) (MMT (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 131 -- Angula Velasco, d', Isidoro -- {'related_person': <Person: Angula Velasco, d', Isidoro>, 'start_date_written': '1666<1666-06-30>', 'related_institution': <Institution: (Mannspersonen) (MMT (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Sekretär>}

--------- Start of row | 132 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Angulo, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Angulo, de END INPUT, ROW:132
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['? 1666<1666-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['? 1666<1666-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = MMT
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['? 1666<1666-06-30>'], 'HOFSTAAT': 'MMT', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammerbedienstete (Las de la Camara))
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammerbedienstete (Las de la Camara))
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = '(Kammerbedienstete (Las de la Camara))'
process_chunks >>> cD ['? 1666<1666-06-30>'], cF ['Kammerdienerin'], cH MMT, CA (Kammerbedienstete (Las de la Camara))
helper_hsv_post_process_dates >>> inner date: <1666-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1666-06-30>
helper_hsv_post_process_dates >>> old: ? 1666<1666-06-30>, new: ? 1666<1666-06-30>
chunk_process_datum >>> rel, chunk sdw: ? 1666<1666-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Angulo, de, Gerongma>, 'start_date_written': '? 1666<1666-06-30>'}
chunk_get_nm_hst >>> c_H = MMT
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMT (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammerbedienstete (Las de la Camara))
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammerbedienstete (Las de la Camara)) (MMT (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Kammerdienerin']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerdienerin
process_chunks >>>  Source Person Relation: 132 -- Angulo, de, Gerongma -- {'related_person': <Person: Angulo, de, Gerongma>, 'start_date_written': '? 1666<1666-06-30>', 'related_institution': <Institution: (Kammerbedienstete (Las de la Camara)) (MMT (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Kammerdienerin>}

--------- Start of row | 133 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anhalt
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anhalt, Christian>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 133 -- Anhalt, Christian -- {'related_person': <Person: Anhalt, Christian>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 134 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anquisola
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- , Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anquisola, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Kammerfräulein']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerfräulein
process_chunks >>>  Source Person Relation: 134 -- Anquisola, NN -- {'related_person': <Person: Anquisola, NN>, 'related_institution': <Institution: Dummy Amt (CF (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Kammerfräulein>}

--------- Start of row | 135 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ansalon
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = ME
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ME
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ME
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'ME', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1704-00-00'], cF ['Kammerdienerin'], cH ME, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ansalon, Maria Catharina>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = ME
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: ME (L1)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (ME (L1))
chunk_create_relations >>> create relations called for c_F ['Kammerdienerin']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerdienerin
process_chunks >>>  Source Person Relation: 135 -- Ansalon, Maria Catharina -- {'related_person': <Person: Ansalon, Maria Catharina>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (ME (L1))>, 'relation_type': <PersonInstitutionRelation: Kammerdienerin>}

--------- Start of row | 136 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ansalone
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Bassist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Bassist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Bassist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofmusikanten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA '
process_chunks >>> cD ['1704-00-00'], cF ['Bassist'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ansalone, Ferdinand Maria>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Bassist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Bassist
process_chunks >>>  Source Person Relation: 136 -- Ansalone, Ferdinand Maria -- {'related_person': <Person: Ansalone, Ferdinand Maria>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Bassist>}

--------- Start of row | 137 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anschau/Auschau?
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Amtsoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Amtsoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Amtsoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Hoffuttermeister
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA '
process_chunks >>> cD ['1704-00-00'], cF ['Amtsoffizier'], cH L, CA OStA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anschau/Auschau?, Johann Simon>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA 
chunk_process_amt_NEW >>> c_A was: OStA  and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Amtsoffizier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Amtsoffizier
process_chunks >>>  Source Person Relation: 137 -- Anschau/Auschau?, Johann Simon -- {'related_person': <Person: Anschau/Auschau?, Johann Simon>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberststallmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Amtsoffizier>}

--------- Start of row | 138 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Antion
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHR '
process_chunks >>> cD ['1676-00-00'], cF ['Reichshofrat'], cH L, CA RHR 
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Antion, Franz Friedrich>, 'start_date_written': '1676<1676-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: Reichshofrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Reichshofrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofrat
process_chunks >>>  Source Person Relation: 138 -- Antion, Franz Friedrich -- {'related_person': <Person: Antion, Franz Friedrich>, 'start_date_written': '1676<1676-06-30>', 'related_institution': <Institution: Reichshofrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Reichshofrat>}

--------- Start of row | 139 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anurso, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Anurso, de END INPUT, ROW:139
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Agent'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Agenten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR '
process_chunks >>> cD ['1704-00-00'], cF ['Agent'], cH L, CA HKR 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anurso, de, Augustin Jakob>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Agent']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Agent
process_chunks >>>  Source Person Relation: 139 -- Anurso, de, Augustin Jakob -- {'related_person': <Person: Anurso, de, Augustin Jakob>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Agent>}

--------- Start of row | 140 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Apel
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R '
process_chunks >>> cD ['1669-00-00'], cF ['Sekretär'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Apel, Franz>, 'start_date_written': '1669<1669-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 140 -- Apel, Franz -- {'related_person': <Person: Apel, Franz>, 'start_date_written': '1669<1669-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär>}

--------- Start of row | 141 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Apelshoffer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1695-11-01'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabentanzmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1695-11-01'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabentanzmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1695-11-01'], 'HOFSTAAT': 'J', 'FUNKTION': ['Edelknabentanzmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA'
process_chunks >>> cD ['1695-11-01'], cF ['Edelknabentanzmeister'], cH J, CA OStA
helper_hsv_post_process_dates >>> old: 1695-11-01, new: 1695-11-01<1695-11-01>
chunk_process_datum >>> rel, chunk sdw: 1695-11-01<1695-11-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Apelshoffer, Claudius Johann>, 'start_date_written': '1695-11-01<1695-11-01>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Edelknabentanzmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Edelknabentanzmeister
process_chunks >>>  Source Person Relation: 141 -- Apelshoffer, Claudius Johann -- {'related_person': <Person: Apelshoffer, Claudius Johann>, 'start_date_written': '1695-11-01<1695-11-01>', 'related_institution': <Institution: Oberststallmeisteramt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Edelknabentanzmeister>}

--------- Start of row | 142 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aperl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00'], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1669-00-00'], cF ['Kammerdiener'], cH EM, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aperl, Johann>, 'start_date_written': '1669<1669-06-30>'}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Kammerdiener']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerdiener
process_chunks >>>  Source Person Relation: 142 -- Aperl, Johann -- {'related_person': <Person: Aperl, Johann>, 'start_date_written': '1669<1669-06-30>', 'related_institution': <Institution: Dummy Amt (EM (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Kammerdiener>}

--------- Start of row | 143 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Appelshoffer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Tanzmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Tanzmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'J', 'FUNKTION': ['Tanzmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA'
process_chunks >>> cD ['1704-00-00'], cF ['Tanzmeister'], cH J, CA OStA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Appelshoffer, Claudius>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Tanzmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Tanzmeister
process_chunks >>>  Source Person Relation: 143 -- Appelshoffer, Claudius -- {'related_person': <Person: Appelshoffer, Claudius>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberststallmeisteramt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Tanzmeister>}

--------- Start of row | 144 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Apremunth
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Apremunth, Ferdinand Gabert >, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 144 -- Apremunth, Ferdinand Gabert  -- {'related_person': <Person: Apremunth, Ferdinand Gabert >, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 145 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arberg/Arnsberg?
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arberg/Arnsberg?, Peter Ernst>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 145 -- Arberg/Arnsberg?, Peter Ernst -- {'related_person': <Person: Arberg/Arnsberg?, Peter Ernst>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 146 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arbeser (Arbesser)
person_process_field_familienname >>> fam1: Arbeser
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 18), match='(Arbesser)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG'
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Raitoffizier'], cH Dummy Hofstaat, CA NÖ-LG
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arbeser, Johann Ferdinand>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ landmarschallisches Gericht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ landmarschallisches Gericht (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Raitoffizier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Raitoffizier
process_chunks >>>  Source Person Relation: 146 -- Arbeser, Johann Ferdinand -- {'related_person': <Person: Arbeser, Johann Ferdinand>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: NÖ landmarschallisches Gericht (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Raitoffizier>}

--------- Start of row | 147 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arbesser (Arbeisser)
person_process_field_familienname >>> fam1: Arbesser
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 20), match='(Arbeisser)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Rentmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Rentmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Rentmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG? / Rentamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG? 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG? '
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Rentmeister'], cH Dummy Hofstaat, CA NÖ-LG? 
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arbesser, Ambrosius Maximilian >, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG? 
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG? (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Rentmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Rentmeister
process_chunks >>>  Source Person Relation: 147 -- Arbesser, Ambrosius Maximilian  -- {'related_person': <Person: Arbesser, Ambrosius Maximilian >, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: NÖ-LG? (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Rentmeister>}

--------- Start of row | 148 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arbonacz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Akzessist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Akzessist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Akzessist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = UHKz / Accessisen
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = UHKz 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'UHKz '
process_chunks >>> cD ['1704-00-00'], cF ['Akzessist'], cH L, CA UHKz 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arbonacz, Johann >, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: UHKz 
chunk_process_amt_NEW >>> c_A was: UHKz  and amt after matching with amt index is: ungar. Kanzlei hatte Hofstaatkürzel ksl. u. kgl.
chunk_process_amt_NEW >>>  Return value of inst2 = ungar. Kanzlei hatte Hofstaatkürzel ksl. u. kgl. (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Akzessist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Akzessist
process_chunks >>>  Source Person Relation: 148 -- Arbonacz, Johann  -- {'related_person': <Person: Arbonacz, Johann >, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: ungar. Kanzlei hatte Hofstaatkürzel ksl. u. kgl. (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Akzessist>}

--------- Start of row | 149 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arch (Arco)
person_process_field_familienname >>> fam1: Arch
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 11), match='(Arco)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1681-12-09', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1681-12-09', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1681-12-09', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1681-12-09', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1681-12-09, new: 1681-12-09<1681-12-09>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1681-12-09<1681-12-09>
chunk_process_datum >>> rel, chunk edw: 1681-12-09<1681-12-09>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arch, Philipp>, 'start_date_written': '1681-12-09<1681-12-09>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 149 -- Arch, Philipp -- {'related_person': <Person: Arch, Philipp>, 'start_date_written': '1681-12-09<1681-12-09>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 150 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arch (Arco)
person_process_field_familienname >>> fam1: Arch
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 11), match='(Arco)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['FM, ksl.', 'Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['FM, ksl.', 'Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['FM, ksl.', 'Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR; OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' OKäA'
process_chunks >>> cD ['1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>'], cF ['Kämmerer'], cH L, CA GR
helper_hsv_post_process_dates >>> inner date: <1689-03-14 - 1689-10-03>
helper_hsv_post_process_dates >>> new_i_date: <1689-03-14 - 1689-10-03>
helper_hsv_post_process_dates >>> old: 1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>, new: 1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>
chunk_process_datum >>> rel, chunk sdw: 1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arch, Vinciguera >, 'start_date_written': '1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 150 -- Arch, Vinciguera  -- {'related_person': <Person: Arch, Vinciguera >, 'start_date_written': '1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>', 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}
process_chunks >>> cD ['1704-00-00'], cF ['FM, ksl.', 'Geh. Rat'], cH L, CA  OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arch, Vinciguera >, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OKäA
chunk_process_amt_NEW >>> c_A was:  OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['FM, ksl.', 'Geh. Rat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = FM, ksl.
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat
process_chunks >>>  Source Person Relation: 150 -- Arch, Vinciguera  -- {'related_person': <Person: Arch, Vinciguera >, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Rat>}

--------- Start of row | 151 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Archer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1702-02-01', 'bis 1704-10-01<1704-10-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammertrabant', 'Silberdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1702-02-01', 'bis 1704-10-01<1704-10-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammertrabant', 'Silberdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = AW; JH; MJB
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1702-02-01', 'bis 1704-10-01<1704-10-01>'], 'HOFSTAAT': 'AW', 'FUNKTION': ['Kammertrabant', 'Silberdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA'
process_chunks >>> cD ['1702-02-01', 'bis 1704-10-01<1704-10-01>'], cF ['Kammertrabant', 'Silberdiener'], cH AW, CA OMeA
helper_hsv_post_process_dates >>> old: 1702-02-01, new: 1702-02-01<1702-02-01>
helper_hsv_post_process_dates >>> inner date: <1704-10-01>
helper_hsv_post_process_dates >>> new_i_date: <1704-10-01>
helper_hsv_post_process_dates >>> old: bis 1704-10-01<1704-10-01>, new: bis 1704-10-01<1704-10-01>
chunk_process_datum >>> rel, chunk sdw: 1702-02-01<1702-02-01>
chunk_process_datum >>> rel, chunk edw: 1702-02-01<1702-02-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Archer, Christoph Heinrich>, 'start_date_written': '1702-02-01<1702-02-01>', 'end_date_written': 'bis 1704-10-01<1704-10-01>'}
chunk_get_nm_hst >>> c_H = AW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: AW (Kgin.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (AW (Kgin.))
chunk_create_relations >>> create relations called for c_F ['Kammertrabant', 'Silberdiener']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammertrabant
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Silberdiener
process_chunks >>>  Source Person Relation: 151 -- Archer, Christoph Heinrich -- {'related_person': <Person: Archer, Christoph Heinrich>, 'start_date_written': '1702-02-01<1702-02-01>', 'end_date_written': 'bis 1704-10-01<1704-10-01>', 'related_institution': <Institution: Obersthofmeisteramt (AW (Kgin.))>, 'relation_type': <PersonInstitutionRelation: Silberdiener>}

--------- Start of row | 152 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Archinto
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-12-24', 'bis 1680-04-15<1680-04-15>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-12-24', 'bis 1680-04-15<1680-04-15>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-12-24', 'bis 1680-04-15<1680-04-15>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1677-12-24', 'bis 1680-04-15<1680-04-15>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1677-12-24, new: 1677-12-24<1677-12-24>
helper_hsv_post_process_dates >>> inner date: <1680-04-15>
helper_hsv_post_process_dates >>> new_i_date: <1680-04-15>
helper_hsv_post_process_dates >>> old: bis 1680-04-15<1680-04-15>, new: bis 1680-04-15<1680-04-15>
chunk_process_datum >>> rel, chunk sdw: 1677-12-24<1677-12-24>
chunk_process_datum >>> rel, chunk edw: 1677-12-24<1677-12-24>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Archinto, Ludovico>, 'start_date_written': '1677-12-24<1677-12-24>', 'end_date_written': 'bis 1680-04-15<1680-04-15>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 152 -- Archinto, Ludovico -- {'related_person': <Person: Archinto, Ludovico>, 'start_date_written': '1677-12-24<1677-12-24>', 'end_date_written': 'bis 1680-04-15<1680-04-15>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 153 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arco
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}, {'DATUM': ['1673-02-23'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1673-02-23'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Edelknabe'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1673-02-23'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD [], cF ['Edelknabe'], cH L, CA OStA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arco, Scipio Anton>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Edelknabe']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Edelknabe
process_chunks >>>  Source Person Relation: 153 -- Arco, Scipio Anton -- {'related_person': <Person: Arco, Scipio Anton>, 'related_institution': <Institution: Oberststallmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Edelknabe>}
process_chunks >>> cD ['1673-02-23'], cF ['Truchseß'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1673-02-23, new: 1673-02-23<1673-02-23>
chunk_process_datum >>> rel, chunk sdw: 1673-02-23<1673-02-23>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arco, Scipio Anton>, 'start_date_written': '1673-02-23<1673-02-23>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Truchseß']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Truchseß
process_chunks >>>  Source Person Relation: 153 -- Arco, Scipio Anton -- {'related_person': <Person: Arco, Scipio Anton>, 'start_date_written': '1673-02-23<1673-02-23>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Truchseß>}

--------- Start of row | 154 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ardaris (Ardois, Ardeiß, Ardris, Artedi, Artois, Erdödy)
person_process_field_familienname >>> fam1: Ardaris
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 56), match='(Ardois, Ardeiß, Ardris, Artedi, Artois, Erdödy)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-10-10', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-10-10', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-10-10', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1666-10-10', 'bis 1678<1678-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1666-10-10, new: 1666-10-10<1666-10-10>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666-10-10<1666-10-10>
chunk_process_datum >>> rel, chunk edw: 1666-10-10<1666-10-10>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ardaris, Adam>, 'start_date_written': '1666-10-10<1666-10-10>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 154 -- Ardaris, Adam -- {'related_person': <Person: Ardaris, Adam>, 'start_date_written': '1666-10-10<1666-10-10>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 155 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ardödi (Arteti, Erdödy)
person_process_field_familienname >>> fam1: Ardödi
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 23), match='(Arteti, Erdödy)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1661-12-07', 'bis 1670-03-22<1670-03-22>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1661-12-07', 'bis 1670-03-22<1670-03-22>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1661-12-07', 'bis 1670-03-22<1670-03-22>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1661-12-07', 'bis 1670-03-22<1670-03-22>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1661-12-07, new: 1661-12-07<1661-12-07>
helper_hsv_post_process_dates >>> inner date: <1670-03-22>
helper_hsv_post_process_dates >>> new_i_date: <1670-03-22>
helper_hsv_post_process_dates >>> old: bis 1670-03-22<1670-03-22>, new: bis 1670-03-22<1670-03-22>
chunk_process_datum >>> rel, chunk sdw: 1661-12-07<1661-12-07>
chunk_process_datum >>> rel, chunk edw: 1661-12-07<1661-12-07>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ardödi, Georg>, 'start_date_written': '1661-12-07<1661-12-07>', 'end_date_written': 'bis 1670-03-22<1670-03-22>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 155 -- Ardödi, Georg -- {'related_person': <Person: Ardödi, Georg>, 'start_date_written': '1661-12-07<1661-12-07>', 'end_date_written': 'bis 1670-03-22<1670-03-22>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 156 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ardoedi (Arteti, Erdödy)
person_process_field_familienname >>> fam1: Ardoedi
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 24), match='(Arteti, Erdödy)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-12-01', 'bis 1674/75<1674-06-30 - 75>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-12-01', 'bis 1674/75<1674-06-30 - 75>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-12-01', 'bis 1674/75<1674-06-30 - 75>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1663-12-01', 'bis 1674/75<1674-06-30 - 75>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1663-12-01, new: 1663-12-01<1663-12-01>
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75>
helper_hsv_post_process_dates >>> old: bis 1674/75<1674-06-30 - 75>, new: bis 1674/75<1674-06-30 - 75>
chunk_process_datum >>> rel, chunk sdw: 1663-12-01<1663-12-01>
chunk_process_datum >>> rel, chunk edw: 1663-12-01<1663-12-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ardoedi, Alexander>, 'start_date_written': '1663-12-01<1663-12-01>', 'end_date_written': 'bis 1674/75<1674-06-30 - 75>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 156 -- Ardoedi, Alexander -- {'related_person': <Person: Ardoedi, Alexander>, 'start_date_written': '1663-12-01<1663-12-01>', 'end_date_written': 'bis 1674/75<1674-06-30 - 75>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 157 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ardoldi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ardoldi, Christoph>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 157 -- Ardoldi, Christoph -- {'related_person': <Person: Ardoldi, Christoph>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 158 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ardoldi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ardoldi, Niclas>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 158 -- Ardoldi, Niclas -- {'related_person': <Person: Ardoldi, Niclas>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 159 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Argenta, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Argenta, de END INPUT, ROW:159
person_process_field_titel >>> t_tit = Conte
person_process_field_titel >>> t_list = ['Conte']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1689-00-00/1689-11-23<1689-00-00 - 1689-11-23>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1689-00-00/1689-11-23<1689-00-00 - 1689-11-23>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1689-00-00/1689-11-23<1689-00-00 - 1689-11-23>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1689-00-00/1689-11-23<1689-00-00 - 1689-11-23>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1689-00-00 - 1689-11-23>
helper_hsv_post_process_dates >>> new_i_date: <1689-06-30 - 1689-11-23>
helper_hsv_post_process_dates >>> old: 1689-00-00/1689-11-23<1689-00-00 - 1689-11-23>, new: 1689-00-00/1689-11-23<1689-06-30 - 1689-11-23>
chunk_process_datum >>> rel, chunk sdw: 1689-00-00/1689-11-23<1689-06-30 - 1689-11-23>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Argenta, de, Carolo>, 'start_date_written': '1689-00-00/1689-11-23<1689-06-30 - 1689-11-23>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 159 -- Argenta, de, Carolo -- {'related_person': <Person: Argenta, de, Carolo>, 'start_date_written': '1689-00-00/1689-11-23<1689-06-30 - 1689-11-23>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 160 | -------------- 
replacer >>> r_fun: replaced ,O with: , O
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arnold
person_process_field_titel >>> t_tit = Reichsritter, Edler
person_process_field_titel >>> t_list = ['Reichsritter, Edler']
person_process_field_titel >>> Komma in tit: Reichsritter, Edler
person_process_field_titel >>> CREATING SPLIT TITLE Reichsritter from Reichsritter, Edler
person_process_field_titel >>> CREATING SPLIT TITLE Edler from Reichsritter, Edler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> RenameFunctions.py >>> removing OWM from ents
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß', 'Kommandant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß', 'Kommandant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß', 'Kommandant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Truchsesse
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA '
process_chunks >>> cD ['1704-00-00'], cF ['Truchseß', 'Kommandant'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arnold, Johann Georg>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Truchseß', 'Kommandant']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Truchseß
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kommandant
process_chunks >>>  Source Person Relation: 160 -- Arnold, Johann Georg -- {'related_person': <Person: Arnold, Johann Georg>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kommandant>}

--------- Start of row | 161 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arnoldt
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1694-10-01'], 'HOFSTAAT': None, 'FUNKTION': ['Rottmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1694-10-01'], 'HOFSTAAT': None, 'FUNKTION': ['Rottmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1694-10-01'], 'HOFSTAAT': 'J', 'FUNKTION': ['Rottmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Trabantenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1694-10-01'], cF ['Rottmeister'], cH J, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1694-10-01, new: 1694-10-01<1694-10-01>
chunk_process_datum >>> rel, chunk sdw: 1694-10-01<1694-10-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arnoldt, Johann Michael>, 'start_date_written': '1694-10-01<1694-10-01>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Rottmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Rottmeister
process_chunks >>>  Source Person Relation: 161 -- Arnoldt, Johann Michael -- {'related_person': <Person: Arnoldt, Johann Michael>, 'start_date_written': '1694-10-01<1694-10-01>', 'related_institution': <Institution: Dummy Amt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Rottmeister>}

--------- Start of row | 162 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arnoldt
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1694-10-01'], 'HOFSTAAT': None, 'FUNKTION': ['Trabant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1694-10-01'], 'HOFSTAAT': None, 'FUNKTION': ['Trabant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1694-10-01'], 'HOFSTAAT': 'J', 'FUNKTION': ['Trabant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Trabantenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1694-10-01'], cF ['Trabant'], cH J, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1694-10-01, new: 1694-10-01<1694-10-01>
chunk_process_datum >>> rel, chunk sdw: 1694-10-01<1694-10-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arnoldt, Thomas>, 'start_date_written': '1694-10-01<1694-10-01>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Trabant']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Trabant
process_chunks >>>  Source Person Relation: 162 -- Arnoldt, Thomas -- {'related_person': <Person: Arnoldt, Thomas>, 'start_date_written': '1694-10-01<1694-10-01>', 'related_institution': <Institution: Dummy Amt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Trabant>}

--------- Start of row | 163 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arnstein (Armstein, Arstein)
person_process_field_familienname >>> fam1: Arnstein
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 28), match='(Armstein, Arstein)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent', 'Reichshofratsagent'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent', 'Reichshofratsagent'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofratsagent', 'Reichshofratsagent'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Agenten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHR '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1685-11-01<1685-11-01>'], cF ['Reichshofratsagent', 'Reichshofratsagent'], cH L, CA RHR 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1685-11-01>
helper_hsv_post_process_dates >>> new_i_date: <1685-11-01>
helper_hsv_post_process_dates >>> old: bis 1685-11-01<1685-11-01>, new: bis 1685-11-01<1685-11-01>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arnstein, Johann Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1685-11-01<1685-11-01>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: Reichshofrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Reichshofratsagent', 'Reichshofratsagent']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofratsagent
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofratsagent
process_chunks >>>  Source Person Relation: 163 -- Arnstein, Johann Christoph -- {'related_person': <Person: Arnstein, Johann Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1685-11-01<1685-11-01>', 'related_institution': <Institution: Reichshofrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Reichshofratsagent>}

--------- Start of row | 164 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arrigoni
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkaplan'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Prediger, Hof-
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA '
process_chunks >>> cD ['1704-00-00'], cF ['Hofkaplan'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arrigoni, Dominicus>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkaplan']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkaplan
process_chunks >>>  Source Person Relation: 164 -- Arrigoni, Dominicus -- {'related_person': <Person: Arrigoni, Dominicus>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkaplan>}

--------- Start of row | 165 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arsenius
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regierungsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Ritterbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-RR '
process_chunks >>> cD ['1669-00-00'], cF ['Regierungsrat'], cH L, CA NÖ-RR 
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arsenius, Franz>, 'start_date_written': '1669<1669-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regierungsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regierungsrat
process_chunks >>>  Source Person Relation: 165 -- Arsenius, Franz -- {'related_person': <Person: Arsenius, Franz>, 'start_date_written': '1669<1669-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regierungsrat>}

--------- Start of row | 166 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Artety (Erdödy)
person_process_field_familienname >>> fam1: Artety
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Erdödy)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1655-02-08'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1655-02-08'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1655-02-08'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1655-02-08'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1655-02-08, new: 1655-02-08<1655-02-08>
chunk_process_datum >>> rel, chunk sdw: 1655-02-08<1655-02-08>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Artety, Nicola>, 'start_date_written': '1655-02-08<1655-02-08>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 166 -- Artety, Nicola -- {'related_person': <Person: Artety, Nicola>, 'start_date_written': '1655-02-08<1655-02-08>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 167 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arthofen
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Rollist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Rollist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Rollist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'BHR '
process_chunks >>> cD ['1704-00-00'], cF ['Rollist'], cH L, CA BHR 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arthofen, Johann>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: Böhmischer Hofrat
chunk_process_amt_NEW >>>  Return value of inst2 = Böhmischer Hofrat (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Rollist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Rollist
process_chunks >>>  Source Person Relation: 167 -- Arthofen, Johann -- {'related_person': <Person: Arthofen, Johann>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Böhmischer Hofrat (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Rollist>}

--------- Start of row | 168 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arzt (Artzt)
person_process_field_familienname >>> fam1: Arzt
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Artzt)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzleiheizer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzleiheizer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzleiheizer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHK-LE / Registratur
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHK-LE 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHK-LE '
process_chunks >>> cD ['1669-00-00', 'bis 1704<1704-06-30>'], cF ['Kanzleiheizer'], cH L, CA RHK-LE 
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669<1669-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669<1669-06-30>
chunk_process_datum >>> rel, chunk edw: 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arzt, Benedict >, 'start_date_written': '1669<1669-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHK-LE 
chunk_process_amt_NEW >>> c_A was: RHK-LE  and amt after matching with amt index is: Reichhofkanzlei-Lateinische Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzleiheizer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzleiheizer
process_chunks >>>  Source Person Relation: 168 -- Arzt, Benedict  -- {'related_person': <Person: Arzt, Benedict >, 'start_date_written': '1669<1669-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzleiheizer>}

--------- Start of row | 169 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arzt (Artzt)
person_process_field_familienname >>> fam1: Arzt
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Artzt)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1689-03-19/(', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1689-03-19/(', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1689-03-19/(', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1689-03-19/(', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1689-03-19/(, new: 1689-03-19/(
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1689-03-19/(
chunk_process_datum >>> rel, chunk edw: 1689-03-19/(
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arzt, Johann Emanuel>, 'start_date_written': '1689-03-19/(', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1689-03-19/( ' due to error Could not interpret date.: 
process_chunks >>>  Source Person Relation: 169 -- Arzt, Johann Emanuel -- {'related_person': <Person: Arzt, Johann Emanuel>, 'start_date_written': '1689-03-19/(', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 170 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Asamb (Asang)
person_process_field_familienname >>> fam1: Asamb
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 13), match='(Asang)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1703-01-16', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1703-01-16', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1703-01-16', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'J', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA'
process_chunks >>> cD ['1703-01-16', 'bis 1704<1704-06-30>'], cF [], cH J, CA OMeA
helper_hsv_post_process_dates >>> old: 1703-01-16, new: 1703-01-16<1703-01-16>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1703-01-16<1703-01-16>
chunk_process_datum >>> rel, chunk edw: 1703-01-16<1703-01-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Asamb, Matthias>, 'start_date_written': '1703-01-16<1703-01-16>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F []
process_chunks >>>  Source Person Relation: 170 -- Asamb, Matthias -- {'related_person': <Person: Asamb, Matthias>, 'start_date_written': '1703-01-16<1703-01-16>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (J1 (Ehzg.))>}

--------- Start of row | 171 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Asch
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1697'], 'HOFSTAAT': None, 'FUNKTION': ['Ballmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1697'], 'HOFSTAAT': None, 'FUNKTION': ['Ballmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = ksl.
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ksl.
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ksl.
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1697'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Ballmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1697'], cF ['Ballmeister'], cH ksl., CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1697, new: 1697<1697-06-30>
chunk_process_datum >>> rel, chunk sdw: 1697<1697-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Asch, Jacob Andrä>, 'start_date_written': '1697<1697-06-30>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Ballmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Ballmeister
process_chunks >>>  Source Person Relation: 171 -- Asch, Jacob Andrä -- {'related_person': <Person: Asch, Jacob Andrä>, 'start_date_written': '1697<1697-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Ballmeister>}

--------- Start of row | 172 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Asole (Assole)
person_process_field_familienname >>> fam1: Asole
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 14), match='(Assole)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK'
process_chunks >>> cD ['1701-00-00'], cF ['Kanzlist'], cH L, CA HK
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Asole, Georg>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 172 -- Asole, Georg -- {'related_person': <Person: Asole, Georg>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 173 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aspermont , Reckheim
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1687-10-27/1688-02-10<1687-10-27 - 1688-02-10>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1687-10-27/1688-02-10<1687-10-27 - 1688-02-10>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1687-10-27/1688-02-10<1687-10-27 - 1688-02-10>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1687-10-27/1688-02-10<1687-10-27 - 1688-02-10>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1687-10-27 - 1688-02-10>
helper_hsv_post_process_dates >>> new_i_date: <1687-10-27 - 1688-02-10>
helper_hsv_post_process_dates >>> old: 1687-10-27/1688-02-10<1687-10-27 - 1688-02-10>, new: 1687-10-27/1688-02-10<1687-10-27 - 1688-02-10>
chunk_process_datum >>> rel, chunk sdw: 1687-10-27/1688-02-10<1687-10-27 - 1688-02-10>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aspermont , Reckheim, Friedrich>, 'start_date_written': '1687-10-27/1688-02-10<1687-10-27 - 1688-02-10>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 173 -- Aspermont , Reckheim, Friedrich -- {'related_person': <Person: Aspermont , Reckheim, Friedrich>, 'start_date_written': '1687-10-27/1688-02-10<1687-10-27 - 1688-02-10>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 174 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aspermont (Aspremont , Reckheim)
person_process_field_familienname >>> fam1: Aspermont
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 32), match='(Aspremont , Reckheim)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}, {'DATUM': ['1677-05-16', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1677-05-16', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = ksl.; L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ksl.
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ksl.
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h:  L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-05-16', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR; OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' OKäA'
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.'], cH ksl., CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aspermont, Ferdinand Gobert>}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Rat, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat, wirkl.
process_chunks >>>  Source Person Relation: 174 -- Aspermont, Ferdinand Gobert -- {'related_person': <Person: Aspermont, Ferdinand Gobert>, 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Rat, wirkl.>}
process_chunks >>> cD ['1677-05-16', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA  OKäA
helper_hsv_post_process_dates >>> old: 1677-05-16, new: 1677-05-16<1677-05-16>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677-05-16<1677-05-16>
chunk_process_datum >>> rel, chunk edw: 1677-05-16<1677-05-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aspermont, Ferdinand Gobert>, 'start_date_written': '1677-05-16<1677-05-16>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OKäA
chunk_process_amt_NEW >>> c_A was:  OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 174 -- Aspermont, Ferdinand Gobert -- {'related_person': <Person: Aspermont, Ferdinand Gobert>, 'start_date_written': '1677-05-16<1677-05-16>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 175 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aspermont Reckheim
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aspermont Reckheim, Heinrich>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 175 -- Aspermont Reckheim, Heinrich -- {'related_person': <Person: Aspermont Reckheim, Heinrich>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 176 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Attems
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Attems, Franz Andre>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 176 -- Attems, Franz Andre -- {'related_person': <Person: Attems, Franz Andre>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 177 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Attems
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}, {'DATUM': ['1680-06-11/1682-04-03<1680-06-11 - 1682-04-03>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1680-06-11/1682-04-03<1680-06-11 - 1682-04-03>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = ksl.; L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ksl.
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ksl.
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h:  L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1680-06-11/1682-04-03<1680-06-11 - 1682-04-03>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR; OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' OKäA'
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.'], cH ksl., CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Attems, Ignaz Maria>}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Rat, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat, wirkl.
process_chunks >>>  Source Person Relation: 177 -- Attems, Ignaz Maria -- {'related_person': <Person: Attems, Ignaz Maria>, 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Rat, wirkl.>}
process_chunks >>> cD ['1680-06-11/1682-04-03<1680-06-11 - 1682-04-03>', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA  OKäA
helper_hsv_post_process_dates >>> inner date: <1680-06-11 - 1682-04-03>
helper_hsv_post_process_dates >>> new_i_date: <1680-06-11 - 1682-04-03>
helper_hsv_post_process_dates >>> old: 1680-06-11/1682-04-03<1680-06-11 - 1682-04-03>, new: 1680-06-11/1682-04-03<1680-06-11 - 1682-04-03>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1680-06-11/1682-04-03<1680-06-11 - 1682-04-03>
chunk_process_datum >>> rel, chunk edw: 1680-06-11/1682-04-03<1680-06-11 - 1682-04-03>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Attems, Ignaz Maria>, 'start_date_written': '1680-06-11/1682-04-03<1680-06-11 - 1682-04-03>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OKäA
chunk_process_amt_NEW >>> c_A was:  OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 177 -- Attems, Ignaz Maria -- {'related_person': <Person: Attems, Ignaz Maria>, 'start_date_written': '1680-06-11/1682-04-03<1680-06-11 - 1682-04-03>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 178 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Attems
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1676-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Attems, Johann Friedrich>, 'start_date_written': '1676<1676-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 178 -- Attems, Johann Friedrich -- {'related_person': <Person: Attems, Johann Friedrich>, 'start_date_written': '1676<1676-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 179 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Attems
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']

--------- Start of row | 180 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Attems (Altimis, Athimus, Atimus)
person_process_field_familienname >>> fam1: Attems
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 33), match='(Altimis, Athimus, Atimus)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1668-06-30/1668-08-14<1668-06-30 - 1668-08-14>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1668-06-30/1668-08-14<1668-06-30 - 1668-08-14>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1668-06-30/1668-08-14<1668-06-30 - 1668-08-14>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1668-06-30/1668-08-14<1668-06-30 - 1668-08-14>', 'bis 1677<1677-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1668-06-30 - 1668-08-14>
helper_hsv_post_process_dates >>> new_i_date: <1668-06-30 - 1668-08-14>
helper_hsv_post_process_dates >>> old: 1668-06-30/1668-08-14<1668-06-30 - 1668-08-14>, new: 1668-06-30/1668-08-14<1668-06-30 - 1668-08-14>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1668-06-30/1668-08-14<1668-06-30 - 1668-08-14>
chunk_process_datum >>> rel, chunk edw: 1668-06-30/1668-08-14<1668-06-30 - 1668-08-14>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Attems, Franz Anton>, 'start_date_written': '1668-06-30/1668-08-14<1668-06-30 - 1668-08-14>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 180 -- Attems, Franz Anton -- {'related_person': <Person: Attems, Franz Anton>, 'start_date_written': '1668-06-30/1668-08-14<1668-06-30 - 1668-08-14>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 181 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Attems (Altimis)
person_process_field_familienname >>> fam1: Attems
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 16), match='(Altimis)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Attems, Johann Jacob>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 181 -- Attems, Johann Jacob -- {'related_person': <Person: Attems, Johann Jacob>, 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 182 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Atting
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-00-00', 'bis 1675<1675-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-00-00', 'bis 1675<1675-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00', 'bis 1675<1675-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1674-00-00', 'bis 1675<1675-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674<1674-06-30>
helper_hsv_post_process_dates >>> inner date: <1675-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30>
helper_hsv_post_process_dates >>> old: bis 1675<1675-06-30>, new: bis 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674<1674-06-30>
chunk_process_datum >>> rel, chunk edw: 1674<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Atting, Franz Anton >, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 182 -- Atting, Franz Anton  -- {'related_person': <Person: Atting, Franz Anton >, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1675<1675-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 183 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auchberger
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Untermarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Untermarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Untermarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ(?)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ(?)
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ(?)'
process_chunks >>> cD ['1676-00-00'], cF ['Untermarschall'], cH L, CA NÖ(?)
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auchberger, Johann Magnus>, 'start_date_written': '1676<1676-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ(?)
chunk_process_amt_NEW >>> c_A was: NÖ(?) and amt after matching with amt index is: nan
chunk_process_amt_NEW >>>  Return value of inst2 = nan (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Untermarschall']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Untermarschall
process_chunks >>>  Source Person Relation: 183 -- Auchberger, Johann Magnus -- {'related_person': <Person: Auchberger, Johann Magnus>, 'start_date_written': '1676<1676-06-30>', 'related_institution': <Institution: nan (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Untermarschall>}

--------- Start of row | 184 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auchem, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Auchem, von END INPUT, ROW:184
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-RR '
process_chunks >>> cD ['1676-00-00'], cF ['Regimentsrat'], cH L, CA NÖ-RR 
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auchem, von, Peter>, 'start_date_written': '1676<1676-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 184 -- Auchem, von, Peter -- {'related_person': <Person: Auchem, von, Peter>, 'start_date_written': '1676<1676-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}

--------- Start of row | 185 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-HBH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-HBH 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK-HBH '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Raitoffizier'], cH L, CA HK-HBH 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auer, Andre >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-HBH 
chunk_process_amt_NEW >>> c_A was: HK-HBH  and amt after matching with amt index is: Hofbuchhalterei
chunk_process_amt_NEW >>>  Return value of inst2 = Hofbuchhalterei (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Raitoffizier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Raitoffizier
process_chunks >>>  Source Person Relation: 185 -- Auer, Andre  -- {'related_person': <Person: Auer, Andre >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Hofbuchhalterei (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Raitoffizier>}

--------- Start of row | 186 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Adam Anton Seifried>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 186 -- Auersperg, Adam Anton Seifried -- {'related_person': <Person: Auersperg, Adam Anton Seifried>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 187 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1688-11-20/(', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1688-11-20/(', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1688-11-20/(', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1688-11-20/(', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1688-11-20/(, new: 1688-11-20/(
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1688-11-20/(
chunk_process_datum >>> rel, chunk edw: 1688-11-20/(
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Franz Anton>, 'start_date_written': '1688-11-20/(', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1688-11-20/( ' due to error Could not interpret date.: 
process_chunks >>>  Source Person Relation: 187 -- Auersperg, Franz Anton -- {'related_person': <Person: Auersperg, Franz Anton>, 'start_date_written': '1688-11-20/(', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 188 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}, {'DATUM': ['1677-11-12/1682-01-03<1677-11-12 - 1682-01-03>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1677-11-12/1682-01-03<1677-11-12 - 1682-01-03>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = ksl.
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-11-12/1682-01-03<1677-11-12 - 1682-01-03>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR; OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' OKäA'
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.'], cH ksl., CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Franz Carl >}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Rat, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat, wirkl.
process_chunks >>>  Source Person Relation: 188 -- Auersperg, Franz Carl  -- {'related_person': <Person: Auersperg, Franz Carl >, 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Rat, wirkl.>}
process_chunks >>> cD ['1677-11-12/1682-01-03<1677-11-12 - 1682-01-03>', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH ksl., CA  OKäA
helper_hsv_post_process_dates >>> inner date: <1677-11-12 - 1682-01-03>
helper_hsv_post_process_dates >>> new_i_date: <1677-11-12 - 1682-01-03>
helper_hsv_post_process_dates >>> old: 1677-11-12/1682-01-03<1677-11-12 - 1682-01-03>, new: 1677-11-12/1682-01-03<1677-11-12 - 1682-01-03>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677-11-12/1682-01-03<1677-11-12 - 1682-01-03>
chunk_process_datum >>> rel, chunk edw: 1677-11-12/1682-01-03<1677-11-12 - 1682-01-03>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Franz Carl >, 'start_date_written': '1677-11-12/1682-01-03<1677-11-12 - 1682-01-03>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OKäA
chunk_process_amt_NEW >>> c_A was:  OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 188 -- Auersperg, Franz Carl  -- {'related_person': <Person: Auersperg, Franz Carl >, 'start_date_written': '1677-11-12/1682-01-03<1677-11-12 - 1682-01-03>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 189 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Georg Sigmund>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 189 -- Auersperg, Georg Sigmund -- {'related_person': <Person: Auersperg, Georg Sigmund>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 190 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1660-10-09'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1660-10-09'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1660-10-09'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1660-10-09'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1660-10-09, new: 1660-10-09<1660-10-09>
chunk_process_datum >>> rel, chunk sdw: 1660-10-09<1660-10-09>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Hanns Andree>, 'start_date_written': '1660-10-09<1660-10-09>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 190 -- Auersperg, Hanns Andree -- {'related_person': <Person: Auersperg, Hanns Andree>, 'start_date_written': '1660-10-09<1660-10-09>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 191 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-00-00/1673-10-24<1677-00-00 - 1673-10-24>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-00-00/1673-10-24<1677-00-00 - 1673-10-24>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00/1673-10-24<1677-00-00 - 1673-10-24>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1677-00-00/1673-10-24<1677-00-00 - 1673-10-24>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1677-00-00 - 1673-10-24>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30 - 1673-10-24>
helper_hsv_post_process_dates >>> old: 1677-00-00/1673-10-24<1677-00-00 - 1673-10-24>, new: 1677-00-00/1673-10-24<1677-06-30 - 1673-10-24>
chunk_process_datum >>> rel, chunk sdw: 1677-00-00/1673-10-24<1677-06-30 - 1673-10-24>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Hermann>, 'start_date_written': '1677-00-00/1673-10-24<1677-06-30 - 1673-10-24>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 191 -- Auersperg, Hermann -- {'related_person': <Person: Auersperg, Hermann>, 'start_date_written': '1677-00-00/1673-10-24<1677-06-30 - 1673-10-24>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 192 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}, {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1701<1701-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR; OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' OKäA'
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Johann Herwart >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Rat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat
process_chunks >>>  Source Person Relation: 192 -- Auersperg, Johann Herwart  -- {'related_person': <Person: Auersperg, Johann Herwart >, 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Rat>}
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1701<1701-06-30>'], cF ['Kämmerer'], cH L, CA  OKäA
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1701-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1701-06-30>
helper_hsv_post_process_dates >>> old: bis 1701<1701-06-30>, new: bis 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Johann Herwart >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OKäA
chunk_process_amt_NEW >>> c_A was:  OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 192 -- Auersperg, Johann Herwart  -- {'related_person': <Person: Auersperg, Johann Herwart >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1701<1701-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 193 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Fürst
person_process_field_titel >>> t_list = ['Fürst']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1657-06-19', 'bis 1658-08-01<1658-08-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1657-06-19', 'bis 1658-08-01<1658-08-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1657-06-19', 'bis 1658-08-01<1658-08-01>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR'
process_chunks >>> cD ['1657-06-19', 'bis 1658-08-01<1658-08-01>'], cF ['Geh. Rat'], cH L, CA GR
helper_hsv_post_process_dates >>> old: 1657-06-19, new: 1657-06-19<1657-06-19>
helper_hsv_post_process_dates >>> inner date: <1658-08-01>
helper_hsv_post_process_dates >>> new_i_date: <1658-08-01>
helper_hsv_post_process_dates >>> old: bis 1658-08-01<1658-08-01>, new: bis 1658-08-01<1658-08-01>
chunk_process_datum >>> rel, chunk sdw: 1657-06-19<1657-06-19>
chunk_process_datum >>> rel, chunk edw: 1657-06-19<1657-06-19>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Johann Weickard >, 'start_date_written': '1657-06-19<1657-06-19>', 'end_date_written': 'bis 1658-08-01<1658-08-01>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Rat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat
process_chunks >>>  Source Person Relation: 193 -- Auersperg, Johann Weickard  -- {'related_person': <Person: Auersperg, Johann Weickard >, 'start_date_written': '1657-06-19<1657-06-19>', 'end_date_written': 'bis 1658-08-01<1658-08-01>', 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Rat>}

--------- Start of row | 194 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(5) = [{'DATUM': ['1669-00-00', 'bis 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}, {'DATUM': ['1681-01-01/1681-03-16<1681-01-01 - 1681-03-16>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}, {'DATUM': ['1698-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Envoyé'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Envoyé'], 'AMT': None}, {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00', 'bis 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1681-01-01/1681-03-16<1681-01-01 - 1681-03-16>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1698-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Envoyé'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Envoyé'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 5, len Ämter-Spalte: 5
helper_hsv_match_hofstaate >>> r_H = ksl.; L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00', 'bis 1701<1701-06-30>'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1681-01-01/1681-03-16<1681-01-01 - 1681-03-16>'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1698-00-00'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Envoyé'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Envoyé'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = Abgesandte / England; Abgesandte / Spanien; GR; OKäA; RHR / Grafen- , Herrenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = Abgesandte 
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  Abgesandte 
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  RHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Abgesandte '
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' Abgesandte '
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' GR'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' OKäA'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' RHR '
process_chunks >>> cD ['1669-00-00', 'bis 1701<1701-06-30>'], cF ['Reichshofrat'], cH ksl., CA Abgesandte 
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669<1669-06-30>
helper_hsv_post_process_dates >>> inner date: <1701-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1701-06-30>
helper_hsv_post_process_dates >>> old: bis 1701<1701-06-30>, new: bis 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669<1669-06-30>
chunk_process_datum >>> rel, chunk edw: 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Leopold>, 'start_date_written': '1669<1669-06-30>', 'end_date_written': 'bis 1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Abgesandte 
chunk_process_amt_NEW >>>  Return value of inst2 = Abgesandte (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Reichshofrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofrat
process_chunks >>>  Source Person Relation: 194 -- Auersperg, Leopold -- {'related_person': <Person: Auersperg, Leopold>, 'start_date_written': '1669<1669-06-30>', 'end_date_written': 'bis 1701<1701-06-30>', 'related_institution': <Institution: Abgesandte (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Reichshofrat>}
process_chunks >>> cD ['1681-01-01/1681-03-16<1681-01-01 - 1681-03-16>'], cF ['Kämmerer'], cH ksl., CA  Abgesandte 
helper_hsv_post_process_dates >>> inner date: <1681-01-01 - 1681-03-16>
helper_hsv_post_process_dates >>> new_i_date: <1681-01-01 - 1681-03-16>
helper_hsv_post_process_dates >>> old: 1681-01-01/1681-03-16<1681-01-01 - 1681-03-16>, new: 1681-01-01/1681-03-16<1681-01-01 - 1681-03-16>
chunk_process_datum >>> rel, chunk sdw: 1681-01-01/1681-03-16<1681-01-01 - 1681-03-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Leopold>, 'start_date_written': '1681-01-01/1681-03-16<1681-01-01 - 1681-03-16>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  Abgesandte 
chunk_process_amt_NEW >>>  Return value of inst2 = Abgesandte (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 194 -- Auersperg, Leopold -- {'related_person': <Person: Auersperg, Leopold>, 'start_date_written': '1681-01-01/1681-03-16<1681-01-01 - 1681-03-16>', 'related_institution': <Institution: Abgesandte (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}
process_chunks >>> cD ['1698-00-00'], cF ['Envoyé'], cH ksl., CA  GR
helper_hsv_post_process_dates >>> old: 1698-00-00, new: 1698<1698-06-30>
chunk_process_datum >>> rel, chunk sdw: 1698<1698-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Leopold>, 'start_date_written': '1698<1698-06-30>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  GR
chunk_process_amt_NEW >>> c_A was:  GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Envoyé']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Envoyé
process_chunks >>>  Source Person Relation: 194 -- Auersperg, Leopold -- {'related_person': <Person: Auersperg, Leopold>, 'start_date_written': '1698<1698-06-30>', 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Envoyé>}
process_chunks >>> cD ['1701-00-00'], cF ['Envoyé'], cH ksl., CA  OKäA
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Leopold>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OKäA
chunk_process_amt_NEW >>> c_A was:  OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Envoyé']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Envoyé
process_chunks >>>  Source Person Relation: 194 -- Auersperg, Leopold -- {'related_person': <Person: Auersperg, Leopold>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Envoyé>}
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Geh. Rat'], cH ksl., CA  RHR 
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Leopold>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  RHR 
chunk_process_amt_NEW >>> c_A was:  RHR  and amt after matching with amt index is: Reichshofrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Rat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat
process_chunks >>>  Source Person Relation: 194 -- Auersperg, Leopold -- {'related_person': <Person: Auersperg, Leopold>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Reichshofrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Rat>}

--------- Start of row | 195 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1676-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Max Carl>, 'start_date_written': '1676<1676-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 195 -- Auersperg, Max Carl -- {'related_person': <Person: Auersperg, Max Carl>, 'start_date_written': '1676<1676-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 196 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}, {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer, Herrenstand; OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG '
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' OKäA'
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Wolf Ehrenreich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ landmarschallisches Gericht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ landmarschallisches Gericht (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 196 -- Auersperg, Wolf Ehrenreich -- {'related_person': <Person: Auersperg, Wolf Ehrenreich>, 'related_institution': <Institution: NÖ landmarschallisches Gericht (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Landrechtsbeisitzer'], cH L, CA  OKäA
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Wolf Ehrenreich>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OKäA
chunk_process_amt_NEW >>> c_A was:  OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Landrechtsbeisitzer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landrechtsbeisitzer
process_chunks >>>  Source Person Relation: 196 -- Auersperg, Wolf Ehrenreich -- {'related_person': <Person: Auersperg, Wolf Ehrenreich>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Landrechtsbeisitzer>}

--------- Start of row | 197 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1690-00-00/1690-12-20<1690-00-00 - 1690-12-20>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1690-00-00/1690-12-20<1690-00-00 - 1690-12-20>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1690-00-00/1690-12-20<1690-00-00 - 1690-12-20>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1690-00-00/1690-12-20<1690-00-00 - 1690-12-20>', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1690-00-00 - 1690-12-20>
helper_hsv_post_process_dates >>> new_i_date: <1690-06-30 - 1690-12-20>
helper_hsv_post_process_dates >>> old: 1690-00-00/1690-12-20<1690-00-00 - 1690-12-20>, new: 1690-00-00/1690-12-20<1690-06-30 - 1690-12-20>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1690-00-00/1690-12-20<1690-06-30 - 1690-12-20>
chunk_process_datum >>> rel, chunk edw: 1690-00-00/1690-12-20<1690-06-30 - 1690-12-20>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Wolf Georg>, 'start_date_written': '1690-00-00/1690-12-20<1690-06-30 - 1690-12-20>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 197 -- Auersperg, Wolf Georg -- {'related_person': <Person: Auersperg, Wolf Georg>, 'start_date_written': '1690-00-00/1690-12-20<1690-06-30 - 1690-12-20>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 198 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Wolf Matthias>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 198 -- Auersperg, Wolf Matthias -- {'related_person': <Person: Auersperg, Wolf Matthias>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 199 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Reichsgraf
person_process_field_titel >>> t_list = ['Reichsgraf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['ab 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['ab 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['ab 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Edelknabe'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA'
process_chunks >>> cD ['ab 1704<1704-06-30>'], cF ['Edelknabe'], cH L, CA OStA
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: ab 1704<1704-06-30>, new: ab 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: ab 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Wolfgang Wilhelm>, 'start_date_written': 'ab 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Edelknabe']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Edelknabe
process_chunks >>>  Source Person Relation: 199 -- Auersperg, Wolfgang Wilhelm -- {'related_person': <Person: Auersperg, Wolfgang Wilhelm>, 'start_date_written': 'ab 1704<1704-06-30>', 'related_institution': <Institution: Oberststallmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Edelknabe>}

--------- Start of row | 200 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Auersperg, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Auersperg, von END INPUT, ROW:200
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00'], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammerfräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1669-00-00'], cF ['Kammerfräulein'], cH EM, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, von, NN>, 'start_date_written': '1669<1669-06-30>'}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Kammerfräulein']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerfräulein
process_chunks >>>  Source Person Relation: 200 -- Auersperg, von, NN -- {'related_person': <Person: Auersperg, von, NN>, 'start_date_written': '1669<1669-06-30>', 'related_institution': <Institution: Dummy Amt (EM (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Kammerfräulein>}

--------- Start of row | 201 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aufanger (Anfang)
person_process_field_familienname >>> fam1: Aufanger
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 17), match='(Anfang)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Türhüter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Türhüter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Türhüter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR '
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>'], cF ['Türhüter'], cH L, CA HKR 
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aufanger, Niclas>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Türhüter']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Türhüter
process_chunks >>>  Source Person Relation: 201 -- Aufanger, Niclas -- {'related_person': <Person: Aufanger, Niclas>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Türhüter>}

--------- Start of row | 202 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aufhauser
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1694-10-01'], 'HOFSTAAT': None, 'FUNKTION': ['Trabant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1694-10-01'], 'HOFSTAAT': None, 'FUNKTION': ['Trabant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1694-10-01'], 'HOFSTAAT': 'J', 'FUNKTION': ['Trabant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Trabantenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1694-10-01'], cF ['Trabant'], cH J, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1694-10-01, new: 1694-10-01<1694-10-01>
chunk_process_datum >>> rel, chunk sdw: 1694-10-01<1694-10-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aufhauser, Jacob>, 'start_date_written': '1694-10-01<1694-10-01>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Trabant']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Trabant
process_chunks >>>  Source Person Relation: 202 -- Aufhauser, Jacob -- {'related_person': <Person: Aufhauser, Jacob>, 'start_date_written': '1694-10-01<1694-10-01>', 'related_institution': <Institution: Dummy Amt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Trabant>}

--------- Start of row | 203 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Augenstein
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OÖ-HKz / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OÖ-HKz 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OÖ-HKz '
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Kanzlist'], cH L, CA OÖ-HKz 
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Augenstein, Kaspar>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OÖ-HKz 
chunk_process_amt_NEW >>> c_A was: OÖ-HKz  and amt after matching with amt index is: Oberösterreichische Hofkanzlei
chunk_process_amt_NEW >>>  Return value of inst2 = Oberösterreichische Hofkanzlei (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 203 -- Augenstein, Kaspar -- {'related_person': <Person: Augenstein, Kaspar>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberösterreichische Hofkanzlei (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 204 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Augest
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Augest, Johann Joseph>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 204 -- Augest, Johann Joseph -- {'related_person': <Person: Augest, Johann Joseph>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 205 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aulles
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Mundköchin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Mundköchin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'EM', 'FUNKTION': ['Mundköchin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1704-00-00'], cF ['Mundköchin'], cH EM, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aulles, Maria Anna>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Mundköchin']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Mundköchin
process_chunks >>>  Source Person Relation: 205 -- Aulles, Maria Anna -- {'related_person': <Person: Aulles, Maria Anna>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (EM (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Mundköchin>}

--------- Start of row | 206 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aureli (Aulely, Aurely, Aurelio)
person_process_field_familienname >>> fam1: Aureli
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 32), match='(Aulely, Aurely, Aurelio)'>
person_process_field_titel >>> t_tit = Dr.med.
person_process_field_titel >>> t_list = ['Dr.med.']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Offiziere ,a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Hofmediziner'], cH EG, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aureli, NN>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create relations called for c_F ['Hofmediziner']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofmediziner
process_chunks >>>  Source Person Relation: 206 -- Aureli, NN -- {'related_person': <Person: Aureli, NN>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Dummy Amt (EG (KW))>, 'relation_type': <PersonInstitutionRelation: Hofmediziner>}

--------- Start of row | 207 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aybling, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aybling, von END INPUT, ROW:207
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Registrator'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG? / Registratur
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG? 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG? '
process_chunks >>> cD ['1704-00-00'], cF ['Registrator'], cH Dummy Hofstaat, CA NÖ-LG? 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aybling, von, Nikolaus Eberhard>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG? 
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG? (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Registrator']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Registrator
process_chunks >>>  Source Person Relation: 207 -- Aybling, von, Nikolaus Eberhard -- {'related_person': <Person: Aybling, von, Nikolaus Eberhard>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: NÖ-LG? (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Registrator>}

--------- Start of row | 208 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aydenhaubt
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Agent'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR(?) / Agenten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR(?) 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'BHR(?) '
process_chunks >>> cD ['1669-00-00'], cF ['Agent'], cH L, CA BHR(?) 
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aydenhaubt, Johann>, 'start_date_written': '1669<1669-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR(?) 
chunk_process_amt_NEW >>>  Return value of inst2 = BHR(?) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Agent']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Agent
process_chunks >>>  Source Person Relation: 208 -- Aydenhaubt, Johann -- {'related_person': <Person: Aydenhaubt, Johann>, 'start_date_written': '1669<1669-06-30>', 'related_institution': <Institution: BHR(?) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Agent>}

--------- Start of row | 209 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Azremunth
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1677-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677<1677-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Azremunth, Ferdinand Gabert>, 'start_date_written': '1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 209 -- Azremunth, Ferdinand Gabert -- {'related_person': <Person: Azremunth, Ferdinand Gabert>, 'start_date_written': '1677<1677-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 210 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> B?(a/e/o)hr
person_process_field_familienname >>> fam1: B?(a/e/o)hr
person_process_field_familienname >>> fam2: <re.Match object; span=(2, 9), match='(a/e/o)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabenlautenist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabenlautenist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Edelknabenlautenist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA'
process_chunks >>> cD ['1704-00-00'], cF ['Edelknabenlautenist'], cH L, CA OStA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: B?(a/e/o)hr, Andreas Anton>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Edelknabenlautenist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Edelknabenlautenist
process_chunks >>>  Source Person Relation: 210 -- B?(a/e/o)hr, Andreas Anton -- {'related_person': <Person: B?(a/e/o)hr, Andreas Anton>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberststallmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Edelknabenlautenist>}

--------- Start of row | 211 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baaden
person_process_field_titel >>> t_tit = Prinz
person_process_field_titel >>> t_list = ['Prinz']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1698-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Generalleutnant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1698-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Generalleutnant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1698-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Generalleutnant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1698-00-00'], cF ['Generalleutnant'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1698-00-00, new: 1698<1698-06-30>
chunk_process_datum >>> rel, chunk sdw: 1698<1698-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baaden, Louis>, 'start_date_written': '1698<1698-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Generalleutnant']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Generalleutnant
process_chunks >>>  Source Person Relation: 211 -- Baaden, Louis -- {'related_person': <Person: Baaden, Louis>, 'start_date_written': '1698<1698-06-30>', 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Generalleutnant>}

--------- Start of row | 212 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baal
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1662-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1662-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1662-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1662-00-00'], cF ['Kämmerer'], cH LW, CA OKäA
helper_hsv_post_process_dates >>> old: 1662-00-00, new: 1662<1662-06-30>
chunk_process_datum >>> rel, chunk sdw: 1662<1662-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baal, Georg>, 'start_date_written': '1662<1662-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (LW)
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 212 -- Baal, Georg -- {'related_person': <Person: Baal, Georg>, 'start_date_written': '1662<1662-06-30>', 'related_institution': <Institution: Oberstkämmereramt (LW)>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 213 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baarn, von der
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Baarn, von der END INPUT, ROW:213
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Hofkaplan'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kaplan, Hof-
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1663-00-00'], cF ['Hofkaplan'], cH LW, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baarn, von der, Antoni>, 'start_date_written': '1663<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (LW)
chunk_create_relations >>> create relations called for c_F ['Hofkaplan']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkaplan
process_chunks >>>  Source Person Relation: 213 -- Baarn, von der, Antoni -- {'related_person': <Person: Baarn, von der, Antoni>, 'start_date_written': '1663<1663-06-30>', 'related_institution': <Institution: Dummy Amt (LW)>, 'relation_type': <PersonInstitutionRelation: Hofkaplan>}

--------- Start of row | 214 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bäberdick
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Unterkommissar'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Unterkommissar'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Unterkommissar'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ Landschaftskommissariat
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ Landschaftskommissariat
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ Landschaftskommissariat'
process_chunks >>> cD ['1704-00-00'], cF ['Unterkommissar'], cH Dummy Hofstaat, CA NÖ Landschaftskommissariat
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bäberdick, Gabriel>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ Landschaftskommissariat
chunk_process_amt_NEW >>> c_A was: NÖ Landschaftskommissariat and amt after matching with amt index is: nan
chunk_process_amt_NEW >>>  Return value of inst2 = nan (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Unterkommissar']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Unterkommissar
process_chunks >>>  Source Person Relation: 214 -- Bäberdick, Gabriel -- {'related_person': <Person: Bäberdick, Gabriel>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: nan (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Unterkommissar>}

--------- Start of row | 215 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bacher
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1674/75<1674-06-30 - 75>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1674/75<1674-06-30 - 75>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1674/75<1674-06-30 - 75>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Konzipisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1674/75<1674-06-30 - 75>'], cF ['Konzipist'], cH L, CA HK 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75>
helper_hsv_post_process_dates >>> old: bis 1674/75<1674-06-30 - 75>, new: bis 1674/75<1674-06-30 - 75>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bacher, Johann>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1674/75<1674-06-30 - 75>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Konzipist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konzipist
process_chunks >>>  Source Person Relation: 215 -- Bacher, Johann -- {'related_person': <Person: Bacher, Johann>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1674/75<1674-06-30 - 75>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Konzipist>}

--------- Start of row | 216 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bacher (Pacher, Patscher)
person_process_field_familienname >>> fam1: Bacher
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 25), match='(Pacher, Patscher)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['/1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['/1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['/1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Konzipisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK '
process_chunks >>> cD ['/1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Konzipist'], cH L, CA HK 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: /1672/73-00-00<1672-06-30 - 73-00-00>, new: /1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: /1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: /1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bacher, Franz>, 'start_date_written': '/1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Konzipist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konzipist
process_chunks >>>  Source Person Relation: 216 -- Bacher, Franz -- {'related_person': <Person: Bacher, Franz>, 'start_date_written': '/1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Konzipist>}

--------- Start of row | 217 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bacher (Pacher)
person_process_field_familienname >>> fam1: Bacher
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Pacher)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Konzipisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK '
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1678<1678-06-30>'], cF ['Konzipist'], cH L, CA HK 
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk edw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bacher, Johann Leopold>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Konzipist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konzipist
process_chunks >>>  Source Person Relation: 217 -- Bacher, Johann Leopold -- {'related_person': <Person: Bacher, Johann Leopold>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Konzipist>}

--------- Start of row | 218 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bachner (Pachner)
person_process_field_familienname >>> fam1: Bachner
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='(Pachner)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK'
process_chunks >>> cD ['1701-00-00'], cF ['Konzipist'], cH L, CA HK
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bachner, Christoph Joseph>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Konzipist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konzipist
process_chunks >>>  Source Person Relation: 218 -- Bachner, Christoph Joseph -- {'related_person': <Person: Bachner, Christoph Joseph>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Konzipist>}

--------- Start of row | 219 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Backus
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = UHKz / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = UHKz 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'UHKz '
process_chunks >>> cD ['1704-00-00'], cF ['Kanzlist'], cH L, CA UHKz 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Backus, Johannes>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: UHKz 
chunk_process_amt_NEW >>> c_A was: UHKz  and amt after matching with amt index is: ungar. Kanzlei hatte Hofstaatkürzel ksl. u. kgl.
chunk_process_amt_NEW >>>  Return value of inst2 = ungar. Kanzlei hatte Hofstaatkürzel ksl. u. kgl. (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 219 -- Backus, Johannes -- {'related_person': <Person: Backus, Johannes>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: ungar. Kanzlei hatte Hofstaatkürzel ksl. u. kgl. (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 220 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baden
person_process_field_titel >>> t_tit = Markgraf
person_process_field_titel >>> t_list = ['Markgraf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1685-11-01'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Konferenzrat'], 'AMT': None}, {'DATUM': ['1681', 'bis 1691<1691-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsratspräsident'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1685-11-01'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Konferenzrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1681', 'bis 1691<1691-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsratspräsident'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 3
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1685-11-01'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Konferenzrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1681', 'bis 1691<1691-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsratspräsident'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR; GK; HKR
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD ['1685-11-01'], cF ['Geh. Konferenzrat'], cH L, CA GR
helper_hsv_post_process_dates >>> old: 1685-11-01, new: 1685-11-01<1685-11-01>
chunk_process_datum >>> rel, chunk sdw: 1685-11-01<1685-11-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baden, Hermann>, 'start_date_written': '1685-11-01<1685-11-01>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Konferenzrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Konferenzrat
process_chunks >>>  Source Person Relation: 220 -- Baden, Hermann -- {'related_person': <Person: Baden, Hermann>, 'start_date_written': '1685-11-01<1685-11-01>', 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Konferenzrat>}
process_chunks >>> cD ['1681', 'bis 1691<1691-06-30>'], cF ['Hofkriegsratspräsident'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1681, new: 1681<1681-06-30>
helper_hsv_post_process_dates >>> inner date: <1691-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1691-06-30>
helper_hsv_post_process_dates >>> old: bis 1691<1691-06-30>, new: bis 1691<1691-06-30>
chunk_process_datum >>> rel, chunk sdw: 1681<1681-06-30>
chunk_process_datum >>> rel, chunk edw: 1681<1681-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baden, Hermann>, 'start_date_written': '1681<1681-06-30>', 'end_date_written': 'bis 1691<1691-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkriegsratspräsident']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkriegsratspräsident
process_chunks >>>  Source Person Relation: 220 -- Baden, Hermann -- {'related_person': <Person: Baden, Hermann>, 'start_date_written': '1681<1681-06-30>', 'end_date_written': 'bis 1691<1691-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkriegsratspräsident>}

--------- Start of row | 221 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baden
person_process_field_titel >>> t_tit = Markgraf
person_process_field_titel >>> t_list = ['Markgraf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1658-03-19'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat', 'Hauptmann'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1658-03-19'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat', 'Hauptmann'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1658-03-19'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat', 'Hauptmann'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR; OMeA / Hartschierenleibgarde
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR'
process_chunks >>> cD ['1658-03-19'], cF ['Hofkriegsrat', 'Hauptmann'], cH L, CA HKR
helper_hsv_post_process_dates >>> old: 1658-03-19, new: 1658-03-19<1658-03-19>
chunk_process_datum >>> rel, chunk sdw: 1658-03-19<1658-03-19>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baden, Leopold Wilhelm>, 'start_date_written': '1658-03-19<1658-03-19>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkriegsrat', 'Hauptmann']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkriegsrat
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hauptmann
process_chunks >>>  Source Person Relation: 221 -- Baden, Leopold Wilhelm -- {'related_person': <Person: Baden, Leopold Wilhelm>, 'start_date_written': '1658-03-19<1658-03-19>', 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hauptmann>}

--------- Start of row | 222 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bader (Baader)
person_process_field_familienname >>> fam1: Bader
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 14), match='(Baader)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Registrator'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Registrator
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG '
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Registrator'], cH Dummy Hofstaat, CA NÖ-LG 
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bader, Georg>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ landmarschallisches Gericht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ landmarschallisches Gericht (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Registrator']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Registrator
process_chunks >>>  Source Person Relation: 222 -- Bader, Georg -- {'related_person': <Person: Bader, Georg>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: NÖ landmarschallisches Gericht (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Registrator>}

--------- Start of row | 223 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bagni
person_process_field_titel >>> t_tit = Marques
person_process_field_titel >>> t_list = ['Marques']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bagni, Scipio>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 223 -- Bagni, Scipio -- {'related_person': <Person: Bagni, Scipio>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 224 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bagni, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Bagni, de END INPUT, ROW:224
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['ab 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['ab 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['ab 1704<1704-06-30>'], 'HOFSTAAT': 'J', 'FUNKTION': ['Edelknabe'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA'
process_chunks >>> cD ['ab 1704<1704-06-30>'], cF ['Edelknabe'], cH J, CA OStA
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: ab 1704<1704-06-30>, new: ab 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: ab 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bagni, de, Ludovicus>, 'start_date_written': 'ab 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Edelknabe']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Edelknabe
process_chunks >>>  Source Person Relation: 224 -- Bagni, de, Ludovicus -- {'related_person': <Person: Bagni, de, Ludovicus>, 'start_date_written': 'ab 1704<1704-06-30>', 'related_institution': <Institution: Oberststallmeisteramt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Edelknabe>}

--------- Start of row | 225 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baier (Bayer)
person_process_field_familienname >>> fam1: Baier
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 13), match='(Bayer)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR'
process_chunks >>> cD ['1675-00-00'], cF ['Sekretär'], cH L, CA GR
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baier, Christoph>, 'start_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 225 -- Baier, Christoph -- {'related_person': <Person: Baier, Christoph>, 'start_date_written': '1675<1675-06-30>', 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär>}

--------- Start of row | 226 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baier (Beyer, Peyer)
person_process_field_familienname >>> fam1: Baier
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 20), match='(Beyer, Peyer)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00', '1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00', '1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00', '1677-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkaplan'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Kaplan, Hof-
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA '
process_chunks >>> cD ['1675-00-00', '1677-00-00'], cF ['Hofkaplan'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk edw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baier, NN>, 'start_date_written': '1675<1675-06-30>', 'end_date_written': '1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkaplan']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkaplan
process_chunks >>>  Source Person Relation: 226 -- Baier, NN -- {'related_person': <Person: Baier, NN>, 'start_date_written': '1675<1675-06-30>', 'end_date_written': '1677<1677-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkaplan>}

--------- Start of row | 227 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baier (Beyer)
person_process_field_familienname >>> fam1: Baier
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 13), match='(Beyer)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR '
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HKR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baier, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 227 -- Baier, Johann -- {'related_person': <Person: Baier, Johann>, 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 228 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baierhuber (Beyerhueber)
person_process_field_familienname >>> fam1: Baierhuber
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 24), match='(Beyerhueber)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Registrator'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzleiverwandte
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'BHR '
process_chunks >>> cD ['1675-00-00', 'bis 1677<1677-06-30>'], cF ['Registrator'], cH L, CA BHR 
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk edw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baierhuber, Christoph>, 'start_date_written': '1675<1675-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: Böhmischer Hofrat
chunk_process_amt_NEW >>>  Return value of inst2 = Böhmischer Hofrat (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Registrator']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Registrator
process_chunks >>>  Source Person Relation: 228 -- Baierhuber, Christoph -- {'related_person': <Person: Baierhuber, Christoph>, 'start_date_written': '1675<1675-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Böhmischer Hofrat (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Registrator>}

--------- Start of row | 229 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baierl (Peuerl, Peyel, Peyerl)
person_process_field_familienname >>> fam1: Baierl
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 30), match='(Peuerl, Peyel, Peyerl)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['? 1675<1675-06-30>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['? 1675<1675-06-30>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['? 1675<1675-06-30>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Kanzleiverwandte
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG '
process_chunks >>> cD ['? 1675<1675-06-30>', 'bis 1677<1677-06-30>'], cF ['Konzipist'], cH Dummy Hofstaat, CA NÖ-LG 
helper_hsv_post_process_dates >>> inner date: <1675-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30>
helper_hsv_post_process_dates >>> old: ? 1675<1675-06-30>, new: ? 1675<1675-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: ? 1675<1675-06-30>
chunk_process_datum >>> rel, chunk edw: ? 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baierl, Christoph>, 'start_date_written': '? 1675<1675-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ landmarschallisches Gericht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ landmarschallisches Gericht (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Konzipist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konzipist
process_chunks >>>  Source Person Relation: 229 -- Baierl, Christoph -- {'related_person': <Person: Baierl, Christoph>, 'start_date_written': '? 1675<1675-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: NÖ landmarschallisches Gericht (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Konzipist>}

--------- Start of row | 230 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bajol
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA'
process_chunks >>> cD ['1704-00-00'], cF ['Kammerdiener'], cH EM, CA OMeA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bajol, Johann Franz>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (EM (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Kammerdiener']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerdiener
process_chunks >>>  Source Person Relation: 230 -- Bajol, Johann Franz -- {'related_person': <Person: Bajol, Johann Franz>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (EM (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Kammerdiener>}

--------- Start of row | 231 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Balassa (Balassi, Ballari, Balassus, Balassy, Bollari)
person_process_field_familienname >>> fam1: Balassa
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 54), match='(Balassi, Ballari, Balassus, Balassy, Bollari)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-08-07', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-08-07', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-08-07', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1666-08-07', 'bis 1677<1677-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1666-08-07, new: 1666-08-07<1666-08-07>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666-08-07<1666-08-07>
chunk_process_datum >>> rel, chunk edw: 1666-08-07<1666-08-07>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Balassa, Gabriel>, 'start_date_written': '1666-08-07<1666-08-07>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 231 -- Balassa, Gabriel -- {'related_person': <Person: Balassa, Gabriel>, 'start_date_written': '1666-08-07<1666-08-07>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 232 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Balassa (Balassy, Balassi, Ballassi, Ballasy, Ballachy)
person_process_field_familienname >>> fam1: Balassa
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 55), match='(Balassy, Balassi, Ballassi, Ballasy, Ballachy)'>
person_process_field_titel >>> t_tit = Freiherr, Graf
person_process_field_titel >>> t_list = ['Freiherr, Graf']
person_process_field_titel >>> Komma in tit: Freiherr, Graf
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Freiherr, Graf
person_process_field_titel >>> CREATING SPLIT TITLE Graf from Freiherr, Graf
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1657-07-16', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1657-07-16', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1657-07-16', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1657-07-16', 'bis 1678<1678-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1657-07-16, new: 1657-07-16<1657-07-16>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1657-07-16<1657-07-16>
chunk_process_datum >>> rel, chunk edw: 1657-07-16<1657-07-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Balassa, Valentin >, 'start_date_written': '1657-07-16<1657-07-16>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 232 -- Balassa, Valentin  -- {'related_person': <Person: Balassa, Valentin >, 'start_date_written': '1657-07-16<1657-07-16>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 233 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Balassa (Ballachi,Balassi, Balassi de Gyazmath, Balassy, Ballassi, Ballassy, Palapa, Palapi, Pallasi)
person_process_field_familienname >>> fam1: Balassa
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 101), match='(Ballachi,Balassi, Balassi de Gyazmath, Balassy, >
person_process_field_titel >>> t_tit = Freiherr, Graf
person_process_field_titel >>> t_list = ['Freiherr, Graf']
person_process_field_titel >>> Komma in tit: Freiherr, Graf
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Freiherr, Graf
person_process_field_titel >>> CREATING SPLIT TITLE Graf from Freiherr, Graf
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1665-04-18', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1665-04-18', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1665-04-18', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1665-04-18', 'bis 1678<1678-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1665-04-18, new: 1665-04-18<1665-04-18>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1665-04-18<1665-04-18>
chunk_process_datum >>> rel, chunk edw: 1665-04-18<1665-04-18>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Balassa, Adam >, 'start_date_written': '1665-04-18<1665-04-18>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 233 -- Balassa, Adam  -- {'related_person': <Person: Balassa, Adam >, 'start_date_written': '1665-04-18<1665-04-18>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 234 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Balassa (Ballachi,Balassi, Balassy, Ballassi, Ballassy, Palapa, Pallasi)
person_process_field_familienname >>> fam1: Balassa
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 72), match='(Ballachi,Balassi, Balassy, Ballassi, Ballassy, P>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1659-01-06', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1659-01-06', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1659-01-06', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1659-01-06', 'bis 1678<1678-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1659-01-06, new: 1659-01-06<1659-01-06>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1659-01-06<1659-01-06>
chunk_process_datum >>> rel, chunk edw: 1659-01-06<1659-01-06>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Balassa, Emerich >, 'start_date_written': '1659-01-06<1659-01-06>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 234 -- Balassa, Emerich  -- {'related_person': <Person: Balassa, Emerich >, 'start_date_written': '1659-01-06<1659-01-06>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 235 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Balazo
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1662-06-28'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1662-06-28'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1662-06-28'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1662-06-28'], cF ['Truchseß'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1662-06-28, new: 1662-06-28<1662-06-28>
chunk_process_datum >>> rel, chunk sdw: 1662-06-28<1662-06-28>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Balazo, Adam>, 'start_date_written': '1662-06-28<1662-06-28>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Truchseß']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Truchseß
process_chunks >>>  Source Person Relation: 235 -- Balazo, Adam -- {'related_person': <Person: Balazo, Adam>, 'start_date_written': '1662-06-28<1662-06-28>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Truchseß>}

--------- Start of row | 236 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Balboa, d'
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Amtsdiener', 'Extraschatzmeistergehilfe'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Amtsdiener', 'Extraschatzmeistergehilfe'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = MMT
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-00-00'], 'HOFSTAAT': 'MMT', 'FUNKTION': ['Amtsdiener', 'Extraschatzmeistergehilfe'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Mannspersonen)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Mannspersonen)
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = '(Mannspersonen)'
process_chunks >>> cD ['1666-00-00'], cF ['Amtsdiener', 'Extraschatzmeistergehilfe'], cH MMT, CA (Mannspersonen)
helper_hsv_post_process_dates >>> old: 1666-00-00, new: 1666<1666-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666<1666-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Balboa, d', Caspar>, 'start_date_written': '1666<1666-06-30>'}
chunk_get_nm_hst >>> c_H = MMT
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMT (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Mannspersonen)
chunk_process_amt_NEW >>>  Return value of inst2 = (Mannspersonen) (MMT (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Amtsdiener', 'Extraschatzmeistergehilfe']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Amtsdiener
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Extraschatzmeistergehilfe
process_chunks >>>  Source Person Relation: 236 -- Balboa, d', Caspar -- {'related_person': <Person: Balboa, d', Caspar>, 'start_date_written': '1666<1666-06-30>', 'related_institution': <Institution: (Mannspersonen) (MMT (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Extraschatzmeistergehilfe>}

--------- Start of row | 237 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bald (Paldt)
person_process_field_familienname >>> fam1: Bald
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Paldt)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Buchhaltereioffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Buchhaltereioffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Buchhaltereioffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK-NÖ-BH'
process_chunks >>> cD ['1701-00-00'], cF ['Buchhaltereioffizier'], cH Dummy Hofstaat, CA HK-NÖ-BH
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bald, Simon Friedrich>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: Niederösterreichische Buchhalterei 
chunk_process_amt_NEW >>>  Return value of inst2 = Niederösterreichische Buchhalterei  (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Buchhaltereioffizier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Buchhaltereioffizier
process_chunks >>>  Source Person Relation: 237 -- Bald, Simon Friedrich -- {'related_person': <Person: Bald, Simon Friedrich>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Niederösterreichische Buchhalterei  (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Buchhaltereioffizier>}

--------- Start of row | 238 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baldauff
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Heizer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Heizer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = ME
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ME
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ME
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'ME', 'FUNKTION': ['Heizer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA'
process_chunks >>> cD ['1704-00-00'], cF ['Heizer'], cH ME, CA OMeA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baldauff, Johann Matthias>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = ME
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: ME (L1)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (ME (L1))
chunk_create_relations >>> create relations called for c_F ['Heizer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Heizer
process_chunks >>>  Source Person Relation: 238 -- Baldauff, Johann Matthias -- {'related_person': <Person: Baldauff, Johann Matthias>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (ME (L1))>, 'relation_type': <PersonInstitutionRelation: Heizer>}

--------- Start of row | 239 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baldthauser
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-RR'
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>'], cF ['Regimentsrat'], cH L, CA NÖ-RR
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baldthauser, Johann>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 239 -- Baldthauser, Johann -- {'related_person': <Person: Baldthauser, Johann>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}

--------- Start of row | 240 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baleray
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1662-06-28'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1662-06-28'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1662-06-28'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1662-06-28'], cF ['Truchseß'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1662-06-28, new: 1662-06-28<1662-06-28>
chunk_process_datum >>> rel, chunk sdw: 1662-06-28<1662-06-28>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baleray, Stephan>, 'start_date_written': '1662-06-28<1662-06-28>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Truchseß']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Truchseß
process_chunks >>>  Source Person Relation: 240 -- Baleray, Stephan -- {'related_person': <Person: Baleray, Stephan>, 'start_date_written': '1662-06-28<1662-06-28>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Truchseß>}

--------- Start of row | 241 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Balku von Hatthafy
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = SHKz / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = SHKz 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'SHKz '
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Kanzlist'], cH L, CA SHKz 
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Balku von Hatthafy, Michael >, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: SHKz 
chunk_process_amt_NEW >>> c_A was: SHKz  and amt after matching with amt index is: Siebenbürgische Hofkanzlei
chunk_process_amt_NEW >>>  Return value of inst2 = Siebenbürgische Hofkanzlei (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 241 -- Balku von Hatthafy, Michael  -- {'related_person': <Person: Balku von Hatthafy, Michael >, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Siebenbürgische Hofkanzlei (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 242 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baller
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kopeischreiber'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kopeischreiber'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kopeischreiber'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R'
process_chunks >>> cD ['1675-00-00'], cF ['Kopeischreiber'], cH L, CA NÖ-R
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baller, Adam>, 'start_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R
chunk_process_amt_NEW >>> c_A was: NÖ-R and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kopeischreiber']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kopeischreiber
process_chunks >>>  Source Person Relation: 242 -- Baller, Adam -- {'related_person': <Person: Baller, Adam>, 'start_date_written': '1675<1675-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kopeischreiber>}

--------- Start of row | 243 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baller (Pahler)
person_process_field_familienname >>> fam1: Baller
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Pahler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hoffourier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hoffourier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hoffourier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMaA  /  Hofquartieramt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMaA  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMaA  '
process_chunks >>> cD ['1677-00-00'], cF ['Hoffourier'], cH L, CA OMaA  
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677<1677-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baller, NN>, 'start_date_written': '1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMaA  
chunk_process_amt_NEW >>> c_A was: OMaA   and amt after matching with amt index is: Obersthofmarschallamt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmarschallamt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hoffourier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hoffourier
process_chunks >>>  Source Person Relation: 243 -- Baller, NN -- {'related_person': <Person: Baller, NN>, 'start_date_written': '1677<1677-06-30>', 'related_institution': <Institution: Obersthofmarschallamt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hoffourier>}

--------- Start of row | 244 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baller (Paller, Poller)
person_process_field_familienname >>> fam1: Baller
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 23), match='(Paller, Poller)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Türhüter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Türhüter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Türhüter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], cF ['Türhüter'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baller, Adam>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Türhüter']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Türhüter
process_chunks >>>  Source Person Relation: 244 -- Baller, Adam -- {'related_person': <Person: Baller, Adam>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Türhüter>}

--------- Start of row | 245 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ballestrazi (1704-00-00)
person_process_field_familienname >>> fam1: Ballestrazi
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 24), match='(1704-00-00)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Saaltürhüter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Saaltürhüter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = K
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: K
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: K
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'K', 'FUNKTION': ['Saaltürhüter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1704-00-00'], cF ['Saaltürhüter'], cH K, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ballestrazi, Jakob>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = K
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: K (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (K (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Saaltürhüter']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Saaltürhüter
process_chunks >>>  Source Person Relation: 245 -- Ballestrazi, Jakob -- {'related_person': <Person: Ballestrazi, Jakob>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (K (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Saaltürhüter>}

--------- Start of row | 246 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bancher (Banchier)
person_process_field_familienname >>> fam1: Bancher
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 18), match='(Banchier)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1699-07-01', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sesselträger'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1699-07-01', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sesselträger'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1699-07-01', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'J', 'FUNKTION': ['Sesselträger'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA'
process_chunks >>> cD ['1699-07-01', 'bis 1704<1704-06-30>'], cF ['Sesselträger'], cH J, CA OStA
helper_hsv_post_process_dates >>> old: 1699-07-01, new: 1699-07-01<1699-07-01>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1699-07-01<1699-07-01>
chunk_process_datum >>> rel, chunk edw: 1699-07-01<1699-07-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bancher, Giuseppe >, 'start_date_written': '1699-07-01<1699-07-01>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Sesselträger']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sesselträger
process_chunks >>>  Source Person Relation: 246 -- Bancher, Giuseppe  -- {'related_person': <Person: Bancher, Giuseppe >, 'start_date_written': '1699-07-01<1699-07-01>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberststallmeisteramt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Sesselträger>}

--------- Start of row | 247 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Band (Pandt, von Pant, Porti)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Band (Pandt, von Pant, Porti) END INPUT, ROW:247
person_process_field_familienname >>> fam1: Band
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 29), match='(Pandt, von Pant, Porti)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammerdiener (1672/73-00-00 bis 1677-00-00)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Kammerdiener'], cH EG, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Band, NN>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create relations called for c_F ['Kammerdiener']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerdiener
process_chunks >>>  Source Person Relation: 247 -- Band, NN -- {'related_person': <Person: Band, NN>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Dummy Amt (EG (KW))>, 'relation_type': <PersonInstitutionRelation: Kammerdiener>}

--------- Start of row | 248 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Banden
person_process_field_titel >>> t_tit = Reichsritter
person_process_field_titel >>> t_list = ['Reichsritter']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Schatzmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Schatzmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Schatzmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Schatzmeister'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Banden, NN>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Schatzmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Schatzmeister
process_chunks >>>  Source Person Relation: 248 -- Banden, NN -- {'related_person': <Person: Banden, NN>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Schatzmeister>}

--------- Start of row | 249 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bänderrieder (Panderrier, Panderrietter, Penderreider, Penderrieder, Penderrüeder, Pentenreider, Pondterrieder, Prinderrieder)
person_process_field_familienname >>> fam1: Bänderrieder
person_process_field_familienname >>> fam2: <re.Match object; span=(13, 126), match='(Panderrier, Panderrietter, Penderreider, Penderr>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Rentmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Rentmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Rentmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Buchhalterei
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Rentmeister'], cH L, CA NÖ-LG 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bänderrieder, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ landmarschallisches Gericht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ landmarschallisches Gericht (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Rentmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Rentmeister
process_chunks >>>  Source Person Relation: 249 -- Bänderrieder, Christoph -- {'related_person': <Person: Bänderrieder, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: NÖ landmarschallisches Gericht (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Rentmeister>}

--------- Start of row | 250 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bänderrieder (Pendnerieder, Poinderrieder)
person_process_field_familienname >>> fam1: Bänderrieder
person_process_field_familienname >>> fam2: <re.Match object; span=(13, 42), match='(Pendnerieder, Poinderrieder)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00', 'bis 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Buchhalter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00', 'bis 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Buchhalter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00', 'bis 1701<1701-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Buchhalter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH; NÖ-LG / Buchhalterei
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK-NÖ-BH'
process_chunks >>> cD ['1675-00-00', 'bis 1701<1701-06-30>'], cF ['Buchhalter'], cH Dummy Hofstaat, CA HK-NÖ-BH
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
helper_hsv_post_process_dates >>> inner date: <1701-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1701-06-30>
helper_hsv_post_process_dates >>> old: bis 1701<1701-06-30>, new: bis 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk edw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bänderrieder, Johann Christoph>, 'start_date_written': '1675<1675-06-30>', 'end_date_written': 'bis 1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: Niederösterreichische Buchhalterei 
chunk_process_amt_NEW >>>  Return value of inst2 = Niederösterreichische Buchhalterei  (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Buchhalter']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Buchhalter
process_chunks >>>  Source Person Relation: 250 -- Bänderrieder, Johann Christoph -- {'related_person': <Person: Bänderrieder, Johann Christoph>, 'start_date_written': '1675<1675-06-30>', 'end_date_written': 'bis 1701<1701-06-30>', 'related_institution': <Institution: Niederösterreichische Buchhalterei  (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Buchhalter>}

--------- Start of row | 251 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bänderrieder (Penterrieder von Adelshausen)
person_process_field_familienname >>> fam1: Bänderrieder
person_process_field_familienname >>> fam2: <re.Match object; span=(13, 43), match='(Penterrieder von Adelshausen)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Adjunkt, Akzessist', 'Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Adjunkt, Akzessist', 'Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Adjunkt, Akzessist', 'Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK; NÖ / Landschaftskanzlei
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK'
process_chunks >>> cD ['1701-00-00'], cF ['Adjunkt, Akzessist', 'Konzipist'], cH L, CA HK
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bänderrieder, Anton Konrad>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Adjunkt, Akzessist', 'Konzipist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Adjunkt, Akzessist
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konzipist
process_chunks >>>  Source Person Relation: 251 -- Bänderrieder, Anton Konrad -- {'related_person': <Person: Bänderrieder, Anton Konrad>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Konzipist>}

--------- Start of row | 252 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bandisch
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'BHR '
process_chunks >>> cD ['1669-00-00'], cF ['Kanzlist'], cH L, CA BHR 
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bandisch, Johann Wilhelm>, 'start_date_written': '1669<1669-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: Böhmischer Hofrat
chunk_process_amt_NEW >>>  Return value of inst2 = Böhmischer Hofrat (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 252 -- Bandisch, Johann Wilhelm -- {'related_person': <Person: Bandisch, Johann Wilhelm>, 'start_date_written': '1669<1669-06-30>', 'related_institution': <Institution: Böhmischer Hofrat (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 253 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Banes
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1658-01-27'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1658-01-27'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1658-01-27'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1658-01-27'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1658-01-27, new: 1658-01-27<1658-01-27>
chunk_process_datum >>> rel, chunk sdw: 1658-01-27<1658-01-27>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Banes, Nicola Basman>, 'start_date_written': '1658-01-27<1658-01-27>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 253 -- Banes, Nicola Basman -- {'related_person': <Person: Banes, Nicola Basman>, 'start_date_written': '1658-01-27<1658-01-27>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 254 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bani (Penki)
person_process_field_familienname >>> fam1: Bani
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Penki)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammerdiener)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammerdiener)
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = '(Kammerdiener)'
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>'], cF ['Kammerdiener'], cH EG, CA (Kammerdiener)
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bani, NN>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>'}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammerdiener)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammerdiener) (EG (KW))
chunk_create_relations >>> create relations called for c_F ['Kammerdiener']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerdiener
process_chunks >>>  Source Person Relation: 254 -- Bani, NN -- {'related_person': <Person: Bani, NN>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'related_institution': <Institution: (Kammerdiener) (EG (KW))>, 'relation_type': <PersonInstitutionRelation: Kammerdiener>}

--------- Start of row | 255 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Banigalj
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-04-01'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-04-01'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-04-01'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1675-04-01'], cF ['Truchseß'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1675-04-01, new: 1675-04-01<1675-04-01>
chunk_process_datum >>> rel, chunk sdw: 1675-04-01<1675-04-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Banigalj, Carl>, 'start_date_written': '1675-04-01<1675-04-01>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Truchseß']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Truchseß
process_chunks >>>  Source Person Relation: 255 -- Banigalj, Carl -- {'related_person': <Person: Banigalj, Carl>, 'start_date_written': '1675-04-01<1675-04-01>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Truchseß>}

--------- Start of row | 256 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bankl (Banki , Beckhy, Peckhl, Penckhy)
person_process_field_familienname >>> fam1: Bankl
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 39), match='(Banki , Beckhy, Peckhl, Penckhy)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1675<1675-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1675<1675-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1675<1675-06-30>'], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammerdiener
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1675<1675-06-30>'], cF ['Kammerdiener'], cH EG, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1675-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30>
helper_hsv_post_process_dates >>> old: bis 1675<1675-06-30>, new: bis 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bankl, NN>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create relations called for c_F ['Kammerdiener']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerdiener
process_chunks >>>  Source Person Relation: 256 -- Bankl, NN -- {'related_person': <Person: Bankl, NN>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1675<1675-06-30>', 'related_institution': <Institution: Dummy Amt (EG (KW))>, 'relation_type': <PersonInstitutionRelation: Kammerdiener>}

--------- Start of row | 257 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bänner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzleidiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzleidiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzleidiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHK-DE
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHK-DE
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHK-DE'
process_chunks >>> cD ['1676-00-00'], cF ['Kanzleidiener'], cH L, CA RHK-DE
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bänner, Leonhard>, 'start_date_written': '1676<1676-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHK-DE
chunk_process_amt_NEW >>> c_A was: RHK-DE and amt after matching with amt index is: Reichshofkanzlei-Deutsche Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofkanzlei-Deutsche Expedition (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzleidiener']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzleidiener
process_chunks >>>  Source Person Relation: 257 -- Bänner, Leonhard -- {'related_person': <Person: Bänner, Leonhard>, 'start_date_written': '1676<1676-06-30>', 'related_institution': <Institution: Reichshofkanzlei-Deutsche Expedition (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzleidiener>}

--------- Start of row | 258 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Banner (Bainner)
person_process_field_familienname >>> fam1: Banner
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 16), match='(Bainner)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'BHR '
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>'], cF ['Kanzlist'], cH L, CA BHR 
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Banner, Georg>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: Böhmischer Hofrat
chunk_process_amt_NEW >>>  Return value of inst2 = Böhmischer Hofrat (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 258 -- Banner, Georg -- {'related_person': <Person: Banner, Georg>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'related_institution': <Institution: Böhmischer Hofrat (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 259 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baradis (Paradeis?)
person_process_field_familienname >>> fam1: Baradis
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 19), match='(Paradeis?)'>
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1668-03-25'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1668-03-25'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1668-03-25'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1668-03-25'], cF ['Truchseß'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1668-03-25, new: 1668-03-25<1668-03-25>
chunk_process_datum >>> rel, chunk sdw: 1668-03-25<1668-03-25>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baradis, johann Heinrich>, 'start_date_written': '1668-03-25<1668-03-25>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Truchseß']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Truchseß
process_chunks >>>  Source Person Relation: 259 -- Baradis, johann Heinrich -- {'related_person': <Person: Baradis, johann Heinrich>, 'start_date_written': '1668-03-25<1668-03-25>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Truchseß>}

--------- Start of row | 260 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baraiz (Paraiz)
person_process_field_familienname >>> fam1: Baraiz
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Paraiz)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Leibschneider'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Leibschneider'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = MMT
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-00-00'], 'HOFSTAAT': 'MMT', 'FUNKTION': ['Leibschneider'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Mannspersonen)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Mannspersonen)
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = '(Mannspersonen)'
process_chunks >>> cD ['1666-00-00'], cF ['Leibschneider'], cH MMT, CA (Mannspersonen)
helper_hsv_post_process_dates >>> old: 1666-00-00, new: 1666<1666-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666<1666-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baraiz, Matthias>, 'start_date_written': '1666<1666-06-30>'}
chunk_get_nm_hst >>> c_H = MMT
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMT (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Mannspersonen)
chunk_process_amt_NEW >>>  Return value of inst2 = (Mannspersonen) (MMT (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Leibschneider']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Leibschneider
process_chunks >>>  Source Person Relation: 260 -- Baraiz, Matthias -- {'related_person': <Person: Baraiz, Matthias>, 'start_date_written': '1666<1666-06-30>', 'related_institution': <Institution: (Mannspersonen) (MMT (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Leibschneider>}

--------- Start of row | 261 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Barat
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1698-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1698-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1698-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1698-00-00', 'bis 1704<1704-06-30>'], cF ['Regimentsrat'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1698-00-00, new: 1698<1698-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1698<1698-06-30>
chunk_process_datum >>> rel, chunk edw: 1698<1698-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Barat, Ignaz>, 'start_date_written': '1698<1698-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 261 -- Barat, Ignaz -- {'related_person': <Person: Barat, Ignaz>, 'start_date_written': '1698<1698-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}

--------- Start of row | 262 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baravicino de Capely de Caspon
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1657-09-27'], 'HOFSTAAT': None, 'FUNKTION': ['Untersilberkämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1657-09-27'], 'HOFSTAAT': None, 'FUNKTION': ['Untersilberkämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1657-09-27'], 'HOFSTAAT': 'L', 'FUNKTION': ['Untersilberkämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1657-09-27'], cF ['Untersilberkämmerer'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1657-09-27, new: 1657-09-27<1657-09-27>
chunk_process_datum >>> rel, chunk sdw: 1657-09-27<1657-09-27>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baravicino de Capely de Caspon, Nicola>, 'start_date_written': '1657-09-27<1657-09-27>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Untersilberkämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Untersilberkämmerer
process_chunks >>>  Source Person Relation: 262 -- Baravicino de Capely de Caspon, Nicola -- {'related_person': <Person: Baravicino de Capely de Caspon, Nicola>, 'start_date_written': '1657-09-27<1657-09-27>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Untersilberkämmerer>}

--------- Start of row | 263 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Barbi
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Reichshofratsagent'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Agenten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHR '
process_chunks >>> cD ['1676-00-00'], cF ['Reichshofratsagent'], cH Dummy Hofstaat, CA RHR 
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Barbi, Konrad Oswald>, 'start_date_written': '1676<1676-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: Reichshofrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofrat (Behörde) (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Reichshofratsagent']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofratsagent
process_chunks >>>  Source Person Relation: 263 -- Barbi, Konrad Oswald -- {'related_person': <Person: Barbi, Konrad Oswald>, 'start_date_written': '1676<1676-06-30>', 'related_institution': <Institution: Reichshofrat (Behörde) (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Reichshofratsagent>}

--------- Start of row | 264 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Barbo
person_process_field_titel >>> t_tit = [Graf]
person_process_field_titel >>> t_list = ['[Graf]']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Kämmerer, wirkl., 1677-00-00/1674-04-26)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :264, Kämmerer, wirkl. (unter Johann Maximilian Graf von Lamberg) , (1677-00-00/1674-04-26), [{'start': 0, 'end': 16, 'token_start': 0, 'token_end': 3, 'label': 'FUNKTION'}, {'start': 62, 'end': 83, 'token_start': 14, 'token_end': 24, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Kämmerer, wirkl., 1677-00-00/1674-04-26]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Kämmerer, wirkl., 1677-00-00/1674-04-26)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-00-00/1674-04-26<1677-00-00 - 1674-04-26>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-00-00/1674-04-26<1677-00-00 - 1674-04-26>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00/1674-04-26<1677-00-00 - 1674-04-26>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1677-00-00/1674-04-26<1677-00-00 - 1674-04-26>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1677-00-00 - 1674-04-26>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30 - 1674-04-26>
helper_hsv_post_process_dates >>> old: 1677-00-00/1674-04-26<1677-00-00 - 1674-04-26>, new: 1677-00-00/1674-04-26<1677-06-30 - 1674-04-26>
chunk_process_datum >>> rel, chunk sdw: 1677-00-00/1674-04-26<1677-06-30 - 1674-04-26>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Barbo, Bernhard>, 'start_date_written': '1677-00-00/1674-04-26<1677-06-30 - 1674-04-26>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 264 -- Barbo, Bernhard -- {'related_person': <Person: Barbo, Bernhard>, 'start_date_written': '1677-00-00/1674-04-26<1677-06-30 - 1674-04-26>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 265 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Barbo
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1674-00-00', 'bis 1677<1677-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674<1674-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674<1674-06-30>
chunk_process_datum >>> rel, chunk edw: 1674<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Barbo, Franz>, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 265 -- Barbo, Franz -- {'related_person': <Person: Barbo, Franz>, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 266 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Barbo
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1686-11-15/(', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1686-11-15/(', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1686-11-15/(', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1686-11-15/(', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1686-11-15/(, new: 1686-11-15/(
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1686-11-15/(
chunk_process_datum >>> rel, chunk edw: 1686-11-15/(
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Barbo, Maximilian >, 'start_date_written': '1686-11-15/(', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1686-11-15/( ' due to error Could not interpret date.: 
process_chunks >>>  Source Person Relation: 266 -- Barbo, Maximilian  -- {'related_person': <Person: Barbo, Maximilian >, 'start_date_written': '1686-11-15/(', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 267 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Barbo
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1676-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Barbo, Wolf Andre>, 'start_date_written': '1676<1676-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 267 -- Barbo, Wolf Andre -- {'related_person': <Person: Barbo, Wolf Andre>, 'start_date_written': '1676<1676-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 268 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Barbo
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1690-00-00/1690-07-23<1690-00-00 - 1690-07-23>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1690-00-00/1690-07-23<1690-00-00 - 1690-07-23>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1690-00-00/1690-07-23<1690-00-00 - 1690-07-23>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1690-00-00/1690-07-23<1690-00-00 - 1690-07-23>', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1690-00-00 - 1690-07-23>
helper_hsv_post_process_dates >>> new_i_date: <1690-06-30 - 1690-07-23>
helper_hsv_post_process_dates >>> old: 1690-00-00/1690-07-23<1690-00-00 - 1690-07-23>, new: 1690-00-00/1690-07-23<1690-06-30 - 1690-07-23>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1690-00-00/1690-07-23<1690-06-30 - 1690-07-23>
chunk_process_datum >>> rel, chunk edw: 1690-00-00/1690-07-23<1690-06-30 - 1690-07-23>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Barbo, Wolf Eberhard>, 'start_date_written': '1690-00-00/1690-07-23<1690-06-30 - 1690-07-23>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 268 -- Barbo, Wolf Eberhard -- {'related_person': <Person: Barbo, Wolf Eberhard>, 'start_date_written': '1690-00-00/1690-07-23<1690-06-30 - 1690-07-23>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 269 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Barbo; Waxenstein
person_process_field_titel >>> t_tit = NN; Graf
person_process_field_titel >>> t_list = ['NN', 'Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-04-26'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-04-26'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-04-26'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1674-04-26'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1674-04-26, new: 1674-04-26<1674-04-26>
chunk_process_datum >>> rel, chunk sdw: 1674-04-26<1674-04-26>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Barbo; Waxenstein, Bernardin>, 'start_date_written': '1674-04-26<1674-04-26>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 269 -- Barbo; Waxenstein, Bernardin -- {'related_person': <Person: Barbo; Waxenstein, Bernardin>, 'start_date_written': '1674-04-26<1674-04-26>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 270 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Barkóczy (Bargobsky, Bargocgi, Bargorzgi, Bargozgi, Bargozgy, Bargozki, Bargozky, Paragotky)
person_process_field_familienname >>> fam1: Barkóczy
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 92), match='(Bargobsky, Bargocgi, Bargorzgi, Bargozgi, Bargoz>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1664-12-19', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1664-12-19', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1664-12-19', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1664-12-19', 'bis 1678<1678-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1664-12-19, new: 1664-12-19<1664-12-19>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1664-12-19<1664-12-19>
chunk_process_datum >>> rel, chunk edw: 1664-12-19<1664-12-19>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Barkóczy, Stephan >, 'start_date_written': '1664-12-19<1664-12-19>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 270 -- Barkóczy, Stephan  -- {'related_person': <Person: Barkóczy, Stephan >, 'start_date_written': '1664-12-19<1664-12-19>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 271 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Barkóczy (Barkozi)
person_process_field_familienname >>> fam1: Barkóczy
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 18), match='(Barkozi)'>
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1681-06-09 - 1681-06-10>
helper_hsv_post_process_dates >>> new_i_date: <1681-06-09 - 1681-06-10>
helper_hsv_post_process_dates >>> old: 1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>, new: 1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>
chunk_process_datum >>> rel, chunk edw: 1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Barkóczy, Franz >, 'start_date_written': '1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 271 -- Barkóczy, Franz  -- {'related_person': <Person: Barkóczy, Franz >, 'start_date_written': '1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 272 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Barnabe
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabensprachmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabensprachmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Edelknabensprachmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / zur Kammer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1663-00-00'], cF ['Edelknabensprachmeister'], cH LW, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Barnabe, Stephan>, 'start_date_written': '1663<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (LW)
chunk_create_relations >>> create relations called for c_F ['Edelknabensprachmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Edelknabensprachmeister
process_chunks >>>  Source Person Relation: 272 -- Barnabe, Stephan -- {'related_person': <Person: Barnabe, Stephan>, 'start_date_written': '1663<1663-06-30>', 'related_institution': <Institution: Dummy Amt (LW)>, 'relation_type': <PersonInstitutionRelation: Edelknabensprachmeister>}

--------- Start of row | 273 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bartholomäus (Barthelme)
person_process_field_familienname >>> fam1: Bartholomäus
person_process_field_familienname >>> fam2: <re.Match object; span=(13, 24), match='(Barthelme)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00', '1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Akzessist', 'Ingrossist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', '1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Akzessist', 'Ingrossist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', '1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Akzessist', 'Ingrossist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-HBH-NÖ-BH; HK-NÖ-BH / Akzessisten
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK-HBH-NÖ-BH'
process_chunks >>> cD ['1701-00-00', '1704-00-00'], cF ['Akzessist', 'Ingrossist'], cH L, CA HK-HBH-NÖ-BH
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bartholomäus, Maximilian>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-HBH-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-HBH-NÖ-BH and amt after matching with amt index is: Niederösterreichische Buchhalterei 
chunk_process_amt_NEW >>>  Return value of inst2 = Niederösterreichische Buchhalterei  (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Akzessist', 'Ingrossist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Akzessist
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Ingrossist
process_chunks >>>  Source Person Relation: 273 -- Bartholomäus, Maximilian -- {'related_person': <Person: Bartholomäus, Maximilian>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Niederösterreichische Buchhalterei  (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Ingrossist>}

--------- Start of row | 274 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bartinger (Bardinger, Bortinger, Holtringer, Partinger, Portinger)
person_process_field_familienname >>> fam1: Bartinger
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 66), match='(Bardinger, Bortinger, Holtringer, Partinger, Por>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-HBH; HK-HBH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK-HBH'
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], cF ['Raitoffizier'], cH L, CA HK-HBH
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bartinger, Franz>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-HBH
chunk_process_amt_NEW >>> c_A was: HK-HBH and amt after matching with amt index is: Hofbuchhalterei
chunk_process_amt_NEW >>>  Return value of inst2 = Hofbuchhalterei (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Raitoffizier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Raitoffizier
process_chunks >>>  Source Person Relation: 274 -- Bartinger, Franz -- {'related_person': <Person: Bartinger, Franz>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: Hofbuchhalterei (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Raitoffizier>}

--------- Start of row | 275 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bartolotti von Bartenfeld (Bortholotti von Partenfeld, Perchtelotti von Parttenfelt, Perthalothi)
person_process_field_familienname >>> fam1: Bartolotti von Bartenfeld
person_process_field_familienname >>> fam2: <re.Match object; span=(26, 97), match='(Bortholotti von Partenfeld, Perchtelotti von Par>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1701<1701-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Ritter- , Gelehrtenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK '
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1701<1701-06-30>'], cF ['Hofkammerrat'], cH L, CA HK 
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1701-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1701-06-30>
helper_hsv_post_process_dates >>> old: bis 1701<1701-06-30>, new: bis 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bartolotti von Bartenfeld, Karl >, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkammerrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkammerrat
process_chunks >>>  Source Person Relation: 275 -- Bartolotti von Bartenfeld, Karl  -- {'related_person': <Person: Bartolotti von Bartenfeld, Karl >, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1701<1701-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkammerrat>}

--------- Start of row | 276 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bartolotti von Bartenfeld (Bortholotti von Partenfeld)
person_process_field_familienname >>> fam1: Bartolotti von Bartenfeld
person_process_field_familienname >>> fam2: <re.Match object; span=(26, 54), match='(Bortholotti von Partenfeld)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Ritter- , Gelehrtenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK '
process_chunks >>> cD ['1701-00-00'], cF ['Hofkammerrat'], cH L, CA HK 
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bartolotti von Bartenfeld, Johann Paul>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkammerrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkammerrat
process_chunks >>>  Source Person Relation: 276 -- Bartolotti von Bartenfeld, Johann Paul -- {'related_person': <Person: Bartolotti von Bartenfeld, Johann Paul>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkammerrat>}

--------- Start of row | 277 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bartolotti von Bartenfeld (Bortholotti von Partenfeldt)
person_process_field_familienname >>> fam1: Bartolotti von Bartenfeld
person_process_field_familienname >>> fam2: <re.Match object; span=(26, 55), match='(Bortholotti von Partenfeldt)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Zahlmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Zahlmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Zahlmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = Generalkriegszahlamt; HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = Generalkriegszahlamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  HK
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Generalkriegszahlamt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' HK'
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA Generalkriegszahlamt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bartolotti von Bartenfeld, Johann Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Generalkriegszahlamt
chunk_process_amt_NEW >>> c_A was: Generalkriegszahlamt and amt after matching with amt index is: Hofkriegszahlamt
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegszahlamt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkammerrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkammerrat
process_chunks >>>  Source Person Relation: 277 -- Bartolotti von Bartenfeld, Johann Carl -- {'related_person': <Person: Bartolotti von Bartenfeld, Johann Carl>, 'related_institution': <Institution: Hofkriegszahlamt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkammerrat>}
process_chunks >>> cD ['1701-00-00'], cF ['Zahlmeister'], cH L, CA  HK
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bartolotti von Bartenfeld, Johann Carl>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  HK
chunk_process_amt_NEW >>> c_A was:  HK and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Zahlmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Zahlmeister
process_chunks >>>  Source Person Relation: 277 -- Bartolotti von Bartenfeld, Johann Carl -- {'related_person': <Person: Bartolotti von Bartenfeld, Johann Carl>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Zahlmeister>}

--------- Start of row | 278 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bartolotti von Bartenfeld (Bortholotti von Parthenfeld, Bartolotti von Bartenfeldt)
person_process_field_familienname >>> fam1: Bartolotti von Bartenfeld
person_process_field_familienname >>> fam2: <re.Match object; span=(26, 83), match='(Bortholotti von Parthenfeld, Bartolotti von Bart>
person_process_field_titel >>> t_tit = NN; Graf; Reichsgraf 1729-11-09
person_process_field_titel >>> t_list = ['NN', 'Graf', 'Reichsgraf 1729-11-09']
helper_hsv_post_process_dates >>> old: 1729-11-09, new: 1729-11-09<1729-11-09>
create_title >>> tit_res: Rittereichsgraf 1729-11-09, date after processing: 1729-11-09<1729-11-09>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Landrechtsbeisitzer, Regent, Rat, ksl., Regimentsrat, NÖ Landrechtsbeisitzer, 1693-00-00, Regimentsrat, 1700-11-20, 1709-00-00, Salzamtmann, 1701-00-00, 1704-00-00, Hofkammerrat, 1704-00-00)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :278, Landrechtsbeisitzer; Regent , Rat, ksl.; Regimentsrat, Ritterstand; NÖ Landrechtsbeisitzer (1693-00-00) ; Regimentsrat (1700-11-20 bis 1709-00-00) ; Salzamtmann (1701-00-00 bis 1704-00-00) ; Hofkammerrat (1704-00-00), [{'start': 0, 'end': 19, 'token_start': 0, 'token_end': 0, 'label': 'FUNKTION'}, {'start': 21, 'end': 27, 'token_start': 2, 'token_end': 2, 'label': 'FUNKTION'}, {'start': 30, 'end': 39, 'token_start': 4, 'token_end': 7, 'label': 'FUNKTION'}, {'start': 41, 'end': 53, 'token_start': 9, 'token_end': 9, 'label': 'FUNKTION'}, {'start': 68, 'end': 90, 'token_start': 13, 'token_end': 14, 'label': 'FUNKTION'}, {'start': 92, 'end': 102, 'token_start': 16, 'token_end': 20, 'label': 'DATUM'}, {'start': 105, 'end': 117, 'token_start': 23, 'token_end': 23, 'label': 'FUNKTION'}, {'start': 119, 'end': 129, 'token_start': 25, 'token_end': 29, 'label': 'DATUM'}, {'start': 134, 'end': 144, 'token_start': 31, 'token_end': 35, 'label': 'DATUM'}, {'start': 147, 'end': 158, 'token_start': 38, 'token_end': 38, 'label': 'FUNKTION'}, {'start': 160, 'end': 170, 'token_start': 40, 'token_end': 44, 'label': 'DATUM'}, {'start': 175, 'end': 185, 'token_start': 46, 'token_end': 50, 'label': 'DATUM'}, {'start': 188, 'end': 200, 'token_start': 53, 'token_end': 53, 'label': 'FUNKTION'}, {'start': 202, 'end': 212, 'token_start': 55, 'token_end': 59, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Landrechtsbeisitzer, Regent, Rat, ksl., Regimentsrat, NÖ Landrechtsbeisitzer, 1693-00-00, Regimentsrat, 1700-11-20, 1709-00-00, Salzamtmann, 1701-00-00, 1704-00-00, Hofkammerrat, 1704-00-00]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Landrechtsbeisitzer, Regent, Rat, ksl., Regimentsrat, NÖ Landrechtsbeisitzer, 1693-00-00, Regimentsrat, 1700-11-20, 1709-00-00, Salzamtmann, 1701-00-00, 1704-00-00, Hofkammerrat, 1704-00-00)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(7) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regent', 'Rat, ksl.'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1693-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Landrechtsbeisitzer'], 'AMT': None}, {'DATUM': ['1700-11-20', 'bis 1709<1709-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Salzamtmann'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regent', 'Rat, ksl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1693-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Landrechtsbeisitzer'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1700-11-20', 'bis 1709<1709-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	5: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Salzamtmann'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	6: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 7, len Ämter-Spalte: 4
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regent', 'Rat, ksl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1693-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['NÖ Landrechtsbeisitzer'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1700-11-20', 'bis 1709<1709-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Salzamtmann'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Ritterstand; NÖ-LG / Landrechtsbeisitzer, Ritterstand; Salzamt Mähren; Salzamt NÖ
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-RR / Ritterstand'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD [], cF ['Landrechtsbeisitzer'], cH Dummy Hofstaat, CA NÖ-RR / Ritterstand
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bartolotti von Bartenfeld, Johann Baptist >}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR / Ritterstand
chunk_process_amt_NEW >>> c_A was: NÖ-RR / Ritterstand and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Landrechtsbeisitzer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landrechtsbeisitzer
process_chunks >>>  Source Person Relation: 278 -- Bartolotti von Bartenfeld, Johann Baptist  -- {'related_person': <Person: Bartolotti von Bartenfeld, Johann Baptist >, 'related_institution': <Institution: NÖ Regierung (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Landrechtsbeisitzer>}
process_chunks >>> cD [], cF ['Regent', 'Rat, ksl.'], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bartolotti von Bartenfeld, Johann Baptist >}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Regent', 'Rat, ksl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regent
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Rat, ksl.
process_chunks >>>  Source Person Relation: 278 -- Bartolotti von Bartenfeld, Johann Baptist  -- {'related_person': <Person: Bartolotti von Bartenfeld, Johann Baptist >, 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Rat, ksl.>}
process_chunks >>> cD [], cF ['Regimentsrat'], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bartolotti von Bartenfeld, Johann Baptist >}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 278 -- Bartolotti von Bartenfeld, Johann Baptist  -- {'related_person': <Person: Bartolotti von Bartenfeld, Johann Baptist >, 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}
process_chunks >>> cD ['1693-00-00'], cF ['NÖ Landrechtsbeisitzer'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1693-00-00, new: 1693<1693-06-30>
chunk_process_datum >>> rel, chunk sdw: 1693<1693-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bartolotti von Bartenfeld, Johann Baptist >, 'start_date_written': '1693<1693-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['NÖ Landrechtsbeisitzer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = NÖ Landrechtsbeisitzer
process_chunks >>>  Source Person Relation: 278 -- Bartolotti von Bartenfeld, Johann Baptist  -- {'related_person': <Person: Bartolotti von Bartenfeld, Johann Baptist >, 'start_date_written': '1693<1693-06-30>', 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: NÖ Landrechtsbeisitzer>}
process_chunks >>> cD ['1700-11-20', 'bis 1709<1709-06-30>'], cF ['Regimentsrat'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1700-11-20, new: 1700-11-20<1700-11-20>
helper_hsv_post_process_dates >>> inner date: <1709-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1709-06-30>
helper_hsv_post_process_dates >>> old: bis 1709<1709-06-30>, new: bis 1709<1709-06-30>
chunk_process_datum >>> rel, chunk sdw: 1700-11-20<1700-11-20>
chunk_process_datum >>> rel, chunk edw: 1700-11-20<1700-11-20>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bartolotti von Bartenfeld, Johann Baptist >, 'start_date_written': '1700-11-20<1700-11-20>', 'end_date_written': 'bis 1709<1709-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 278 -- Bartolotti von Bartenfeld, Johann Baptist  -- {'related_person': <Person: Bartolotti von Bartenfeld, Johann Baptist >, 'start_date_written': '1700-11-20<1700-11-20>', 'end_date_written': 'bis 1709<1709-06-30>', 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Salzamtmann'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bartolotti von Bartenfeld, Johann Baptist >, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Salzamtmann']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Salzamtmann
process_chunks >>>  Source Person Relation: 278 -- Bartolotti von Bartenfeld, Johann Baptist  -- {'related_person': <Person: Bartolotti von Bartenfeld, Johann Baptist >, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Salzamtmann>}
process_chunks >>> cD ['1704-00-00'], cF ['Hofkammerrat'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bartolotti von Bartenfeld, Johann Baptist >, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Hofkammerrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkammerrat
process_chunks >>>  Source Person Relation: 278 -- Bartolotti von Bartenfeld, Johann Baptist  -- {'related_person': <Person: Bartolotti von Bartenfeld, Johann Baptist >, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Hofkammerrat>}

--------- Start of row | 279 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Basler (Bäßler, Bößler, Pößler)
person_process_field_familienname >>> fam1: Basler
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 31), match='(Bäßler, Bößler, Pößler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R '
process_chunks >>> cD ['1674-00-00', 'bis 1677<1677-06-30>'], cF ['Kanzlist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674<1674-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674<1674-06-30>
chunk_process_datum >>> rel, chunk edw: 1674<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Basler, Adam>, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 279 -- Basler, Adam -- {'related_person': <Person: Basler, Adam>, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 280 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bassenheim
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bassenheim, Kasimir Ferdinand>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 280 -- Bassenheim, Kasimir Ferdinand -- {'related_person': <Person: Bassenheim, Kasimir Ferdinand>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 281 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Basser
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Tafeldecker', 'Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Tafeldecker', 'Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Tafeldecker', 'Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1663-00-00'], cF ['Tafeldecker', 'Kammerdiener'], cH LW, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Basser, Valentin>, 'start_date_written': '1663<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (LW)
chunk_create_relations >>> create relations called for c_F ['Tafeldecker', 'Kammerdiener']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Tafeldecker
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerdiener
process_chunks >>>  Source Person Relation: 281 -- Basser, Valentin -- {'related_person': <Person: Basser, Valentin>, 'start_date_written': '1663<1663-06-30>', 'related_institution': <Institution: Dummy Amt (LW)>, 'relation_type': <PersonInstitutionRelation: Kammerdiener>}

--------- Start of row | 282 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Basserot, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Basserot, von END INPUT, ROW:282
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHR'
process_chunks >>> cD [], cF ['Reichshofrat'], cH L, CA RHR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Basserot, von, Herman>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR
chunk_process_amt_NEW >>> c_A was: RHR and amt after matching with amt index is: Reichshofrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Reichshofrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofrat
process_chunks >>>  Source Person Relation: 282 -- Basserot, von, Herman -- {'related_person': <Person: Basserot, von, Herman>, 'related_institution': <Institution: Reichshofrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Reichshofrat>}

--------- Start of row | 283 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bassner (Baßner)
person_process_field_familienname >>> fam1: Bassner
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 16), match='(Baßner)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK-NÖ-BH'
process_chunks >>> cD ['1677-00-00'], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677<1677-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bassner, Martin>, 'start_date_written': '1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: Niederösterreichische Buchhalterei 
chunk_process_amt_NEW >>>  Return value of inst2 = Niederösterreichische Buchhalterei  (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Raitoffizier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Raitoffizier
process_chunks >>>  Source Person Relation: 283 -- Bassner, Martin -- {'related_person': <Person: Bassner, Martin>, 'start_date_written': '1677<1677-06-30>', 'related_institution': <Institution: Niederösterreichische Buchhalterei  (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Raitoffizier>}

--------- Start of row | 284 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bátthyany
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1681-06-09 - 1681-06-10>
helper_hsv_post_process_dates >>> new_i_date: <1681-06-09 - 1681-06-10>
helper_hsv_post_process_dates >>> old: 1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>, new: 1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>
chunk_process_datum >>> rel, chunk sdw: 1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bátthyany, Adam>, 'start_date_written': '1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 284 -- Bátthyany, Adam -- {'related_person': <Person: Bátthyany, Adam>, 'start_date_written': '1681-06-09/1681-06-10<1681-06-09 - 1681-06-10>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 285 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Batthyány (Balthian, Batthány, Batthian, Budiani, Patian, Patthian)
person_process_field_familienname >>> fam1: Batthyány
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 67), match='(Balthian, Batthány, Batthian, Budiani, Patian, P>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1655-03-19', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1655-03-19', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1655-03-19', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1655-03-19', 'bis 1678<1678-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1655-03-19, new: 1655-03-19<1655-03-19>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1655-03-19<1655-03-19>
chunk_process_datum >>> rel, chunk edw: 1655-03-19<1655-03-19>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Batthyány, Christoph >, 'start_date_written': '1655-03-19<1655-03-19>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 285 -- Batthyány, Christoph  -- {'related_person': <Person: Batthyány, Christoph >, 'start_date_written': '1655-03-19<1655-03-19>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}

--------- Start of row | 286 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Battini
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-RR '
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>'], cF ['Regimentsrat'], cH L, CA NÖ-RR 
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Battini, Franz Hannibal>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 286 -- Battini, Franz Hannibal -- {'related_person': <Person: Battini, Franz Hannibal>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}

--------- Start of row | 287 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Batz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Amtsschreiber'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Amtsschreiber'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Amtsschreiber'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofkontrollorsamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA '
process_chunks >>> cD ['1704-00-00'], cF ['Amtsschreiber'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Batz, Johann Georg>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Amtsschreiber']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Amtsschreiber
process_chunks >>>  Source Person Relation: 287 -- Batz, Johann Georg -- {'related_person': <Person: Batz, Johann Georg>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Amtsschreiber>}

--------- Start of row | 288 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Batzendorf
person_process_field_titel >>> t_tit = Baron
person_process_field_titel >>> t_list = ['Baron']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Mundschenk'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA'
process_chunks >>> cD ['1704-00-00'], cF ['Mundschenk'], cH L, CA OMeA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Batzendorf, NN>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Mundschenk']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Mundschenk
process_chunks >>>  Source Person Relation: 288 -- Batzendorf, NN -- {'related_person': <Person: Batzendorf, NN>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Mundschenk>}

--------- Start of row | 289 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baudisch
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'BHR '
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Kanzlist'], cH L, CA BHR 
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baudisch, Johann Wilhelm>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: Böhmischer Hofrat
chunk_process_amt_NEW >>>  Return value of inst2 = Böhmischer Hofrat (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 289 -- Baudisch, Johann Wilhelm -- {'related_person': <Person: Baudisch, Johann Wilhelm>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Böhmischer Hofrat (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 290 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauenstetter (Pauenstetter)
person_process_field_familienname >>> fam1: Bauenstetter
person_process_field_familienname >>> fam2: <re.Match object; span=(13, 27), match='(Pauenstetter)'>
person_process_field_titel >>> t_tit = Dr.
person_process_field_titel >>> t_list = ['Dr.']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Syndikus', 'Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Syndikus', 'Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Syndikus', 'Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG '
process_chunks >>> cD ['1675-00-00', 'bis 1677<1677-06-30>'], cF ['Syndikus', 'Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk edw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauenstetter, NN>, 'start_date_written': '1675<1675-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ landmarschallisches Gericht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ landmarschallisches Gericht (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Syndikus', 'Verordneter']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Syndikus
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Verordneter
process_chunks >>>  Source Person Relation: 290 -- Bauenstetter, NN -- {'related_person': <Person: Bauenstetter, NN>, 'start_date_written': '1675<1675-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: NÖ landmarschallisches Gericht (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Verordneter>}

--------- Start of row | 291 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauer
person_process_field_titel >>> t_tit = JUD
person_process_field_titel >>> t_list = ['JUD']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Advokat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Advokat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Advokat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Advokaten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR '
process_chunks >>> cD ['1704-00-00'], cF ['Advokat'], cH L, CA HKR 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauer, Leonhard>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Advokat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Advokat
process_chunks >>>  Source Person Relation: 291 -- Bauer, Leonhard -- {'related_person': <Person: Bauer, Leonhard>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Advokat>}

--------- Start of row | 292 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist', 'Translator'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist', 'Translator'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist', 'Translator'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR- Kz
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR- Kz
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR- Kz'
process_chunks >>> cD ['1701-00-00'], cF ['Kanzlist', 'Translator'], cH L, CA HKR- Kz
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauer, Martin>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR- Kz
chunk_process_amt_NEW >>> c_A was: HKR- Kz and amt after matching with amt index is: Hofkriegskanzlei
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegskanzlei (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist', 'Translator']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Translator
process_chunks >>>  Source Person Relation: 292 -- Bauer, Martin -- {'related_person': <Person: Bauer, Martin>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Hofkriegskanzlei (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Translator>}

--------- Start of row | 293 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauer (Bayer)
person_process_field_familienname >>> fam1: Bauer
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 13), match='(Bayer)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHK-LE
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHK-LE
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHK-LE'
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>'], cF ['Sekretär'], cH L, CA RHK-LE
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauer, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHK-LE
chunk_process_amt_NEW >>> c_A was: RHK-LE and amt after matching with amt index is: Reichhofkanzlei-Lateinische Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 293 -- Bauer, Christoph -- {'related_person': <Person: Bauer, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'related_institution': <Institution: Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär>}

--------- Start of row | 294 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauer (Beier, Beyer, Peyer)
person_process_field_familienname >>> fam1: Bauer
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 27), match='(Beier, Beyer, Peyer)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkaplan'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofkapelle
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], cF ['Hofkaplan'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauer, NN>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkaplan']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkaplan
process_chunks >>>  Source Person Relation: 294 -- Bauer, NN -- {'related_person': <Person: Bauer, NN>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofkaplan>}

--------- Start of row | 295 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauer (Beyer, Peuer von Pyeseg)
person_process_field_familienname >>> fam1: Bauer
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 31), match='(Beyer, Peuer von Pyeseg)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> RenameFunctions.py >>> removing Rat from ents
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär, geh.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär, geh.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär, geh.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHK-LE
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHK-LE
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHK-LE'
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1685-11-01<1685-11-01>'], cF ['Sekretär, geh.'], cH L, CA RHK-LE
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> inner date: <1685-11-01>
helper_hsv_post_process_dates >>> new_i_date: <1685-11-01>
helper_hsv_post_process_dates >>> old: bis 1685-11-01<1685-11-01>, new: bis 1685-11-01<1685-11-01>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk edw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauer, Christoph>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': 'bis 1685-11-01<1685-11-01>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHK-LE
chunk_process_amt_NEW >>> c_A was: RHK-LE and amt after matching with amt index is: Reichhofkanzlei-Lateinische Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär, geh.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär, geh.
process_chunks >>>  Source Person Relation: 295 -- Bauer, Christoph -- {'related_person': <Person: Bauer, Christoph>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': 'bis 1685-11-01<1685-11-01>', 'related_institution': <Institution: Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär, geh.>}

--------- Start of row | 296 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauer (Beyer)
person_process_field_familienname >>> fam1: Bauer
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 13), match='(Beyer)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR  /  Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR  '
process_chunks >>> cD ['1677-00-00'], cF ['Kanzlist'], cH L, CA HKR  
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677<1677-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauer, Ferdinand>, 'start_date_written': '1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR  
chunk_process_amt_NEW >>> c_A was: HKR   and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 296 -- Bauer, Ferdinand -- {'related_person': <Person: Bauer, Ferdinand>, 'start_date_written': '1677<1677-06-30>', 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 297 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauer (Beyer)
person_process_field_familienname >>> fam1: Bauer
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 13), match='(Beyer)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Kanzlist'], cH L, CA HKR 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauer, Johann>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 297 -- Bauer, Johann -- {'related_person': <Person: Bauer, Johann>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 298 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauer (Beyer)
person_process_field_familienname >>> fam1: Bauer
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 13), match='(Beyer)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR'
process_chunks >>> cD ['1675-00-00'], cF ['Konzipist'], cH L, CA HKR
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauer, NN>, 'start_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Konzipist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konzipist
process_chunks >>>  Source Person Relation: 298 -- Bauer, NN -- {'related_person': <Person: Bauer, NN>, 'start_date_written': '1675<1675-06-30>', 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Konzipist>}

--------- Start of row | 299 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauer (Pauer)
person_process_field_familienname >>> fam1: Bauer
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 13), match='(Pauer)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Beichtvater, Instruktor, Pater, Professor, theol. Fakultät)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :299, Beichtvater , Instruktor, Pater; Professor, theol. Fakultät, [{'start': 0, 'end': 11, 'token_start': 0, 'token_end': 0, 'label': 'FUNKTION'}, {'start': 14, 'end': 24, 'token_start': 2, 'token_end': 2, 'label': 'FUNKTION'}, {'start': 26, 'end': 31, 'token_start': 4, 'token_end': 4, 'label': 'FUNKTION'}, {'start': 33, 'end': 42, 'token_start': 6, 'token_end': 6, 'label': 'FUNKTION'}, {'start': 44, 'end': 59, 'token_start': 8, 'token_end': 10, 'label': 'AMT'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Beichtvater, Instruktor, Pater, Professor, theol. Fakultät]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Beichtvater, Instruktor, Pater, Professor, theol. Fakultät)
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = theol. Fakultät
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Beichtvater', 'Instruktor', 'Pater'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Professor'], 'AMT': 'theol. Fakultät'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Beichtvater', 'Instruktor', 'Pater'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Professor'], 'AMT': 'theol. Fakultät'}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = K
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'K', 'FUNKTION': ['Beichtvater', 'Instruktor', 'Pater'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'K', 'FUNKTION': ['Professor'], 'AMT': 'theol. Fakultät'}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofkapelle
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA / Hofkapelle'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'theol. Fakultät'
process_chunks >>> cD [], cF ['Beichtvater', 'Instruktor', 'Pater'], cH K, CA OMeA / Hofkapelle
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauer, Andreas>}
chunk_get_nm_hst >>> c_H = K
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: K (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA / Hofkapelle
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA / Hofkapelle (K (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Beichtvater', 'Instruktor', 'Pater']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Beichtvater
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Instruktor
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Pater
process_chunks >>>  Source Person Relation: 299 -- Bauer, Andreas -- {'related_person': <Person: Bauer, Andreas>, 'related_institution': <Institution: OMeA / Hofkapelle (K (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Pater>}
process_chunks >>> cD [], cF ['Professor'], cH K, CA theol. Fakultät
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauer, Andreas>}
chunk_get_nm_hst >>> c_H = K
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: K (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: theol. Fakultät
chunk_process_amt_NEW >>>  Return value of inst2 = theol. Fakultät (K (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Professor']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Professor
process_chunks >>>  Source Person Relation: 299 -- Bauer, Andreas -- {'related_person': <Person: Bauer, Andreas>, 'related_institution': <Institution: theol. Fakultät (K (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Professor>}

--------- Start of row | 300 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauer (Paüer)
person_process_field_familienname >>> fam1: Bauer
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 13), match='(Paüer)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-HBH-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-HBH-NÖ-BH
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK-HBH-NÖ-BH'
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-HBH-NÖ-BH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauer, Adam Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-HBH-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-HBH-NÖ-BH and amt after matching with amt index is: Niederösterreichische Buchhalterei 
chunk_process_amt_NEW >>>  Return value of inst2 = Niederösterreichische Buchhalterei  (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Raitoffizier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Raitoffizier
process_chunks >>>  Source Person Relation: 300 -- Bauer, Adam Franz -- {'related_person': <Person: Bauer, Adam Franz>, 'related_institution': <Institution: Niederösterreichische Buchhalterei  (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Raitoffizier>}

--------- Start of row | 301 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauer (Payer von Päyerau)
person_process_field_familienname >>> fam1: Bauer
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 25), match='(Payer von Päyerau)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Ratsprotokollist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Ratsprotokollist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Ratsprotokollist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'BHR'
process_chunks >>> cD [], cF ['Ratsprotokollist'], cH L, CA BHR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauer, Augustin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR
chunk_process_amt_NEW >>> c_A was: BHR and amt after matching with amt index is: Böhmischer Hofrat
chunk_process_amt_NEW >>>  Return value of inst2 = Böhmischer Hofrat (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Ratsprotokollist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Ratsprotokollist
process_chunks >>>  Source Person Relation: 301 -- Bauer, Augustin -- {'related_person': <Person: Bauer, Augustin>, 'related_institution': <Institution: Böhmischer Hofrat (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Ratsprotokollist>}

--------- Start of row | 302 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauer (Peyr)
person_process_field_familienname >>> fam1: Bauer
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 12), match='(Peyr)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hoffourier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hoffourier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hoffourier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMaA  /  Hofquartieramt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMaA  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMaA  '
process_chunks >>> cD ['1677-00-00'], cF ['Hoffourier'], cH L, CA OMaA  
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677<1677-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauer, NN>, 'start_date_written': '1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMaA  
chunk_process_amt_NEW >>> c_A was: OMaA   and amt after matching with amt index is: Obersthofmarschallamt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmarschallamt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hoffourier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hoffourier
process_chunks >>>  Source Person Relation: 302 -- Bauer, NN -- {'related_person': <Person: Bauer, NN>, 'start_date_written': '1677<1677-06-30>', 'related_institution': <Institution: Obersthofmarschallamt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hoffourier>}

--------- Start of row | 303 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauerhuber (Bauerhuber von Hub, Beyerhuber von Hub, Beyerhueber von Hueb, Beyerhuber von Hug)
person_process_field_familienname >>> fam1: Bauerhuber
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 93), match='(Bauerhuber von Hub, Beyerhuber von Hub, Beyerhue>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Registrator'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzleiverwandte
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'BHR '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Registrator'], cH L, CA BHR 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauerhuber, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: Böhmischer Hofrat
chunk_process_amt_NEW >>>  Return value of inst2 = Böhmischer Hofrat (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Registrator']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Registrator
process_chunks >>>  Source Person Relation: 303 -- Bauerhuber, Christoph -- {'related_person': <Person: Bauerhuber, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Böhmischer Hofrat (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Registrator>}

--------- Start of row | 304 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauerl (Payrl, Peyerl)
person_process_field_familienname >>> fam1: Bauerl
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 22), match='(Payrl, Peyerl)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist', 'Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist', 'Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist', 'Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Kanzlei
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], cF ['Kanzlist', 'Konzipist'], cH L, CA NÖ-LG 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauerl, Christoph >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ landmarschallisches Gericht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ landmarschallisches Gericht (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist', 'Konzipist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konzipist
process_chunks >>>  Source Person Relation: 304 -- Bauerl, Christoph  -- {'related_person': <Person: Bauerl, Christoph >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: NÖ landmarschallisches Gericht (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Konzipist>}

--------- Start of row | 305 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bauern (Peyern)
person_process_field_familienname >>> fam1: Bauern
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Peyern)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK'
process_chunks >>> cD ['1701-00-00'], cF ['Konzipist'], cH L, CA HK
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bauern, Sebastian>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Konzipist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konzipist
process_chunks >>>  Source Person Relation: 305 -- Bauern, Sebastian -- {'related_person': <Person: Bauern, Sebastian>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Konzipist>}

--------- Start of row | 306 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baumeister
person_process_field_titel >>> t_tit = JUD
person_process_field_titel >>> t_list = ['JUD']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Advokat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Advokat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Advokat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Advokaten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR '
process_chunks >>> cD ['1704-00-00'], cF ['Advokat'], cH L, CA HKR 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baumeister, Franz Ignaz>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Advokat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Advokat
process_chunks >>>  Source Person Relation: 306 -- Baumeister, Franz Ignaz -- {'related_person': <Person: Baumeister, Franz Ignaz>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Advokat>}

--------- Start of row | 307 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baumgartner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kontrolloramtsschreiber'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kontrolloramtsschreiber'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Kontrolloramtsschreiber'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Küchen- , Kelleroffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1663-00-00'], cF ['Kontrolloramtsschreiber'], cH LW, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baumgartner, Christoph>, 'start_date_written': '1663<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (LW)
chunk_create_relations >>> create relations called for c_F ['Kontrolloramtsschreiber']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kontrolloramtsschreiber
process_chunks >>>  Source Person Relation: 307 -- Baumgartner, Christoph -- {'related_person': <Person: Baumgartner, Christoph>, 'start_date_written': '1663<1663-06-30>', 'related_institution': <Institution: Dummy Amt (LW)>, 'relation_type': <PersonInstitutionRelation: Kontrolloramtsschreiber>}

--------- Start of row | 308 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Baur
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1694-10-01/1696-06-30<1694-10-01 - 1696-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1694-10-01/1696-06-30<1694-10-01 - 1696-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1694-10-01/1696-06-30<1694-10-01 - 1696-06-30>'], 'HOFSTAAT': 'J', 'FUNKTION': ['Hartschier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Hartschierenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1694-10-01/1696-06-30<1694-10-01 - 1696-06-30>'], cF ['Hartschier'], cH J, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1694-10-01 - 1696-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1694-10-01 - 1696-06-30>
helper_hsv_post_process_dates >>> old: 1694-10-01/1696-06-30<1694-10-01 - 1696-06-30>, new: 1694-10-01/1696-06-30<1694-10-01 - 1696-06-30>
chunk_process_datum >>> rel, chunk sdw: 1694-10-01/1696-06-30<1694-10-01 - 1696-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Baur, Michael>, 'start_date_written': '1694-10-01/1696-06-30<1694-10-01 - 1696-06-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Hartschier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hartschier
process_chunks >>>  Source Person Relation: 308 -- Baur, Michael -- {'related_person': <Person: Baur, Michael>, 'start_date_written': '1694-10-01/1696-06-30<1694-10-01 - 1696-06-30>', 'related_institution': <Institution: Dummy Amt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Hartschier>}

--------- Start of row | 309 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bawer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Büchsenspanner, 1694-10-01, 1697-04-01)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :309, Büchsenspanner (1694-10-01 \ 1697-04-01), [{'token_start': 0, 'token_end': 0, 'start': 0, 'end': 14, 'text': 'Büchsenspanner', 'label': 'FUNKTION', 'source': '/nerdpool/models/viecpro_ner_hzab_12-20', 'input_hash': -675033445}, {'token_start': 2, 'token_end': 6, 'start': 16, 'end': 26, 'text': '1694-10-01', 'label': 'DATUM', 'source': '/nerdpool/models/viecpro_ner_hzab_12-20', 'input_hash': -675033445}, {'token_start': 8, 'token_end': 12, 'start': 29, 'end': 39, 'text': '1697-04-01', 'label': 'DATUM', 'source': '/nerdpool/models/viecpro_ner_hzab_12-20', 'input_hash': -675033445}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Büchsenspanner, 1694-10-01, 1697-04-01]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Büchsenspanner, 1694-10-01, 1697-04-01)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1694-10-01', '1697-04-01'], 'HOFSTAAT': None, 'FUNKTION': ['Büchsenspanner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1694-10-01', '1697-04-01'], 'HOFSTAAT': None, 'FUNKTION': ['Büchsenspanner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1694-10-01', '1697-04-01'], 'HOFSTAAT': 'J', 'FUNKTION': ['Büchsenspanner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA'
process_chunks >>> cD ['1694-10-01', '1697-04-01'], cF ['Büchsenspanner'], cH J, CA OStA
helper_hsv_post_process_dates >>> old: 1694-10-01, new: 1694-10-01<1694-10-01>
helper_hsv_post_process_dates >>> old: 1697-04-01, new: 1697-04-01<1697-04-01>
chunk_process_datum >>> rel, chunk sdw: 1694-10-01<1694-10-01>
chunk_process_datum >>> rel, chunk edw: 1694-10-01<1694-10-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bawer, Lorenz>, 'start_date_written': '1694-10-01<1694-10-01>', 'end_date_written': '1697-04-01<1697-04-01>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Büchsenspanner']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Büchsenspanner
process_chunks >>>  Source Person Relation: 309 -- Bawer, Lorenz -- {'related_person': <Person: Bawer, Lorenz>, 'start_date_written': '1694-10-01<1694-10-01>', 'end_date_written': '1697-04-01<1697-04-01>', 'related_institution': <Institution: Oberststallmeisteramt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Büchsenspanner>}

--------- Start of row | 310 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bayer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>'], cF ['Sekretär'], cH L, CA GR 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bayer, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR 
chunk_process_amt_NEW >>> c_A was: GR  and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 310 -- Bayer, Christoph -- {'related_person': <Person: Bayer, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär>}

--------- Start of row | 311 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bayer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Forstmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Forstmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Forstmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OJäA / Baden
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OJäA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OJäA '
process_chunks >>> cD ['1704-00-00'], cF ['Forstmeister'], cH L, CA OJäA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bayer, Johann Georg>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OJäA 
chunk_process_amt_NEW >>>  Return value of inst2 = OJäA (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Forstmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Forstmeister
process_chunks >>>  Source Person Relation: 311 -- Bayer, Johann Georg -- {'related_person': <Person: Bayer, Johann Georg>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: OJäA (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Forstmeister>}

--------- Start of row | 312 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bayerhueber von Hueb [Beyerhueber]
person_process_field_familienname >>> fam1: Bayerhueber von Hueb
person_process_field_familienname >>> fam2: <re.Match object; span=(21, 34), match='[Beyerhueber]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Registrator'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlei
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'BHR '
process_chunks >>> cD ['1675-00-00'], cF ['Registrator'], cH L, CA BHR 
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bayerhueber von Hueb, Christoph>, 'start_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: Böhmischer Hofrat
chunk_process_amt_NEW >>>  Return value of inst2 = Böhmischer Hofrat (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Registrator']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Registrator
process_chunks >>>  Source Person Relation: 312 -- Bayerhueber von Hueb, Christoph -- {'related_person': <Person: Bayerhueber von Hueb, Christoph>, 'start_date_written': '1675<1675-06-30>', 'related_institution': <Institution: Böhmischer Hofrat (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Registrator>}

--------- Start of row | 313 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bayern, vn
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-009'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-009'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-009'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK-NÖ-BH '
process_chunks >>> cD ['1704-00-009'], cF ['Raitoffizier'], cH Dummy Hofstaat, CA HK-NÖ-BH 
helper_hsv_post_process_dates >>> old: 1704-00-009, new: 1704-00-009
chunk_process_datum >>> rel, chunk sdw: 1704-00-009
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bayern, vn, Melchior>, 'start_date_written': '1704-00-009'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: Niederösterreichische Buchhalterei 
chunk_process_amt_NEW >>>  Return value of inst2 = Niederösterreichische Buchhalterei  (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Raitoffizier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Raitoffizier
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1704-00-009 ' due to error Could not interpret date.: 
process_chunks >>>  Source Person Relation: 313 -- Bayern, vn, Melchior -- {'related_person': <Person: Bayern, vn, Melchior>, 'start_date_written': '1704-00-009', 'related_institution': <Institution: Niederösterreichische Buchhalterei  (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Raitoffizier>}

--------- Start of row | 314 | -------------- 
replacer >>> r_fun: replaced )) with: ) )
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bayersperg
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1681-11-15/('], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1681-11-15/('], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1681-11-15/('], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1681-11-15/('], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1681-11-15/(, new: 1681-11-15/(
chunk_process_datum >>> rel, chunk sdw: 1681-11-15/(
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bayersperg, NN>, 'start_date_written': '1681-11-15/('}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1681-11-15/( ' due to error Could not interpret date.: 
process_chunks >>>  Source Person Relation: 314 -- Bayersperg, NN -- {'related_person': <Person: Bayersperg, NN>, 'start_date_written': '1681-11-15/(', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 315 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bayos (Bayas, d')
person_process_field_familienname >>> fam1: Bayos
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 17), match="(Bayas, d')">
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Amtsdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Amtsdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = MMT
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-00-00'], 'HOFSTAAT': 'MMT', 'FUNKTION': ['Amtsdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Mannspersonen)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Mannspersonen)
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = '(Mannspersonen)'
process_chunks >>> cD ['1666-00-00'], cF ['Amtsdiener'], cH MMT, CA (Mannspersonen)
helper_hsv_post_process_dates >>> old: 1666-00-00, new: 1666<1666-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666<1666-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bayos, Miquel Antonio>, 'start_date_written': '1666<1666-06-30>'}
chunk_get_nm_hst >>> c_H = MMT
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMT (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Mannspersonen)
chunk_process_amt_NEW >>>  Return value of inst2 = (Mannspersonen) (MMT (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Amtsdiener']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Amtsdiener
process_chunks >>>  Source Person Relation: 315 -- Bayos, Miquel Antonio -- {'related_person': <Person: Bayos, Miquel Antonio>, 'start_date_written': '1666<1666-06-30>', 'related_institution': <Institution: (Mannspersonen) (MMT (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Amtsdiener>}

--------- Start of row | 316 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bazis, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Bazis, de END INPUT, ROW:316
person_process_field_titel >>> t_tit = Dr.med.
person_process_field_titel >>> t_list = ['Dr.med.']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Leibmediziner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Leibmediziner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Leibmediziner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA / Kammerstab
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA '
process_chunks >>> cD ['1674-00-00'], cF ['Leibmediziner'], cH L, CA OKäA 
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674<1674-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bazis, de, NN>, 'start_date_written': '1674<1674-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA 
chunk_process_amt_NEW >>> c_A was: OKäA  and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Leibmediziner']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Leibmediziner
process_chunks >>>  Source Person Relation: 316 -- Bazis, de, NN -- {'related_person': <Person: Bazis, de, NN>, 'start_date_written': '1674<1674-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Leibmediziner>}

--------- Start of row | 317 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bazzendorf
person_process_field_titel >>> t_tit = Baron
person_process_field_titel >>> t_list = ['Baron']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Truchsesse
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA '
process_chunks >>> cD ['1704-00-00'], cF ['Truchseß'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bazzendorf, NN, der jüngere>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Truchseß']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Truchseß
process_chunks >>>  Source Person Relation: 317 -- Bazzendorf, NN, der jüngere -- {'related_person': <Person: Bazzendorf, NN, der jüngere>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Truchseß>}

--------- Start of row | 318 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bazzo, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Bazzo, de END INPUT, ROW:318
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR '
process_chunks >>> cD ['1674-00-00'], cF ['Sekretär'], cH L, CA HKR 
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674<1674-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bazzo, de, Hieronimus>, 'start_date_written': '1674<1674-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 318 -- Bazzo, de, Hieronimus -- {'related_person': <Person: Bazzo, de, Hieronimus>, 'start_date_written': '1674<1674-06-30>', 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär>}

--------- Start of row | 319 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beaufils
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammermusiker'], 'AMT': None}, {'DATUM': ['1700-01-01', '1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Oboist', 'Hauboist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammermusiker'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1700-01-01', '1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Oboist', 'Hauboist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Kammermusiker'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1700-01-01', '1704-00-00'], 'HOFSTAAT': 'J', 'FUNKTION': ['Oboist', 'Hauboist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA / Hofmusik; OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA 
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OMeA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA '
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' OMeA'
process_chunks >>> cD [], cF ['Kammermusiker'], cH J, CA OKäA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beaufils, Anton >}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA 
chunk_process_amt_NEW >>> c_A was: OKäA  and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Kammermusiker']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammermusiker
process_chunks >>>  Source Person Relation: 319 -- Beaufils, Anton  -- {'related_person': <Person: Beaufils, Anton >, 'related_institution': <Institution: Oberstkämmereramt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Kammermusiker>}
process_chunks >>> cD ['1700-01-01', '1704-00-00'], cF ['Oboist', 'Hauboist'], cH J, CA  OMeA
helper_hsv_post_process_dates >>> old: 1700-01-01, new: 1700-01-01<1700-01-01>
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1700-01-01<1700-01-01>
chunk_process_datum >>> rel, chunk edw: 1700-01-01<1700-01-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beaufils, Anton >, 'start_date_written': '1700-01-01<1700-01-01>', 'end_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OMeA
chunk_process_amt_NEW >>> c_A was:  OMeA and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Oboist', 'Hauboist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Oboist
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hauboist
process_chunks >>>  Source Person Relation: 319 -- Beaufils, Anton  -- {'related_person': <Person: Beaufils, Anton >, 'start_date_written': '1700-01-01<1700-01-01>', 'end_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Hauboist>}

--------- Start of row | 320 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beceri
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1665-10-26'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1665-10-26'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1665-10-26'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1665-10-26'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1665-10-26, new: 1665-10-26<1665-10-26>
chunk_process_datum >>> rel, chunk sdw: 1665-10-26<1665-10-26>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beceri, Francesco>, 'start_date_written': '1665-10-26<1665-10-26>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 320 -- Beceri, Francesco -- {'related_person': <Person: Beceri, Francesco>, 'start_date_written': '1665-10-26<1665-10-26>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 321 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bechholt (Bechtold, Bechtoldt, Behtoldt)
person_process_field_familienname >>> fam1: Bechholt
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 40), match='(Bechtold, Bechtoldt, Behtoldt)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-00-00', '1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat', 'Regierungsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-00-00', '1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat', 'Regierungsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00', '1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat', 'Regierungsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-RR '
process_chunks >>> cD ['1674-00-00', '1675-00-00'], cF ['Regimentsrat', 'Regierungsrat'], cH L, CA NÖ-RR 
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674<1674-06-30>
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674<1674-06-30>
chunk_process_datum >>> rel, chunk edw: 1674<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bechholt, Michael>, 'start_date_written': '1674<1674-06-30>', 'end_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat', 'Regierungsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regierungsrat
process_chunks >>>  Source Person Relation: 321 -- Bechholt, Michael -- {'related_person': <Person: Bechholt, Michael>, 'start_date_written': '1674<1674-06-30>', 'end_date_written': '1675<1675-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regierungsrat>}

--------- Start of row | 322 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bechinie von Laschan
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00', '1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['ksl. Hofrat', 'Referendar', 'Sekretär, geh.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', '1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['ksl. Hofrat', 'Referendar', 'Sekretär, geh.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', '1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['ksl. Hofrat', 'Referendar', 'Sekretär, geh.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'BHR'
process_chunks >>> cD ['1701-00-00', '1704-00-00'], cF ['ksl. Hofrat', 'Referendar', 'Sekretär, geh.'], cH L, CA BHR
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bechinie von Laschan, Georg Umbrecht>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR
chunk_process_amt_NEW >>> c_A was: BHR and amt after matching with amt index is: Böhmischer Hofrat
chunk_process_amt_NEW >>>  Return value of inst2 = Böhmischer Hofrat (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['ksl. Hofrat', 'Referendar', 'Sekretär, geh.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = ksl. Hofrat
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Referendar
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär, geh.
process_chunks >>>  Source Person Relation: 322 -- Bechinie von Laschan, Georg Umbrecht -- {'related_person': <Person: Bechinie von Laschan, Georg Umbrecht>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Böhmischer Hofrat (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär, geh.>}

--------- Start of row | 323 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bechtoldj (Bechteldi)
person_process_field_familienname >>> fam1: Bechtoldj
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 21), match='(Bechteldi)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-02-12/1677-02-17<1677-02-12 - 1677-02-17>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-02-12/1677-02-17<1677-02-12 - 1677-02-17>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-02-12/1677-02-17<1677-02-12 - 1677-02-17>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Truchsesse
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA '
process_chunks >>> cD ['1677-02-12/1677-02-17<1677-02-12 - 1677-02-17>', 'bis 1704<1704-06-30>'], cF ['Truchseß'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> inner date: <1677-02-12 - 1677-02-17>
helper_hsv_post_process_dates >>> new_i_date: <1677-02-12 - 1677-02-17>
helper_hsv_post_process_dates >>> old: 1677-02-12/1677-02-17<1677-02-12 - 1677-02-17>, new: 1677-02-12/1677-02-17<1677-02-12 - 1677-02-17>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677-02-12/1677-02-17<1677-02-12 - 1677-02-17>
chunk_process_datum >>> rel, chunk edw: 1677-02-12/1677-02-17<1677-02-12 - 1677-02-17>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bechtoldj, Johann Alfonso >, 'start_date_written': '1677-02-12/1677-02-17<1677-02-12 - 1677-02-17>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Truchseß']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Truchseß
process_chunks >>>  Source Person Relation: 323 -- Bechtoldj, Johann Alfonso  -- {'related_person': <Person: Bechtoldj, Johann Alfonso >, 'start_date_written': '1677-02-12/1677-02-17<1677-02-12 - 1677-02-17>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Truchseß>}

--------- Start of row | 324 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beck
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Adjunkt, Registrator', 'Expeditor'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Adjunkt, Registrator', 'Expeditor'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Adjunkt, Registrator', 'Expeditor'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Registrator , Expeditor
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK-NÖ-BH '
process_chunks >>> cD ['1704-00-00'], cF ['Adjunkt, Registrator', 'Expeditor'], cH Dummy Hofstaat, CA HK-NÖ-BH 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beck, Johann>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: Niederösterreichische Buchhalterei 
chunk_process_amt_NEW >>>  Return value of inst2 = Niederösterreichische Buchhalterei  (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Adjunkt, Registrator', 'Expeditor']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Adjunkt, Registrator
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Expeditor
process_chunks >>>  Source Person Relation: 324 -- Beck, Johann -- {'related_person': <Person: Beck, Johann>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Niederösterreichische Buchhalterei  (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Expeditor>}

--------- Start of row | 325 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beck, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Beck, de END INPUT, ROW:325
person_process_field_titel >>> t_tit = Baron
person_process_field_titel >>> t_list = ['Baron']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['ab 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['ab 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['ab 1704<1704-06-30>'], 'HOFSTAAT': 'J', 'FUNKTION': ['Edelknabe'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA'
process_chunks >>> cD ['ab 1704<1704-06-30>'], cF ['Edelknabe'], cH J, CA OStA
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: ab 1704<1704-06-30>, new: ab 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: ab 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beck, de, Marquard>, 'start_date_written': 'ab 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Edelknabe']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Edelknabe
process_chunks >>>  Source Person Relation: 325 -- Beck, de, Marquard -- {'related_person': <Person: Beck, de, Marquard>, 'start_date_written': 'ab 1704<1704-06-30>', 'related_institution': <Institution: Oberststallmeisteramt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Edelknabe>}

--------- Start of row | 326 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Becker (Bocker, Böcker, Böckher, Pecker, Peckher, Beckers von, in Waldhorn, auch Schönkirchen)
person_process_field_familienname >>> fam1: Becker
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 94), match='(Bocker, Böcker, Böckher, Pecker, Peckher, Becker>
person_process_field_titel >>> t_tit = NN; Freiherr, Reichsritter; Dr. med.
person_process_field_titel >>> t_list = ['NN', 'Freiherr, Reichsritter', 'Dr. med.']
person_process_field_titel >>> Komma in tit: Freiherr, Reichsritter
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Freiherr, Reichsritter
person_process_field_titel >>> CREATING SPLIT TITLE Reichsritter from Freiherr, Reichsritter
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Leibmediziner', 'Rat, ksl.'], 'AMT': None}, {'DATUM': ['1666-09-00', 'bis1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Professor', 'Fakultät'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Leibmediziner', 'Rat, ksl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1666-09-00', 'bis1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Professor', 'Fakultät'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Leibmediziner', 'Rat, ksl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-09-00', 'bis1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Professor', 'Fakultät'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA / Kammerstab; OMeA / Offiziere ,a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA 
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA '
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' OMeA '
process_chunks >>> cD [], cF ['Leibmediziner', 'Rat, ksl.'], cH L, CA OKäA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Becker, Nikolaus Wilhem>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA 
chunk_process_amt_NEW >>> c_A was: OKäA  and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Leibmediziner', 'Rat, ksl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Leibmediziner
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Rat, ksl.
process_chunks >>>  Source Person Relation: 326 -- Becker, Nikolaus Wilhem -- {'related_person': <Person: Becker, Nikolaus Wilhem>, 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Rat, ksl.>}
process_chunks >>> cD ['1666-09-00', 'bis1704-00-00'], cF ['Professor', 'Fakultät'], cH L, CA  OMeA 
helper_hsv_post_process_dates >>> old: 1666-09-00, new: 1666-09-00<1666-09-00>
helper_hsv_post_process_dates >>> old: bis1704-00-00, new: bis1704-00-00
chunk_process_datum >>> rel, chunk sdw: 1666-09-00<1666-09-00>
chunk_process_datum >>> rel, chunk edw: 1666-09-00<1666-09-00>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Becker, Nikolaus Wilhem>, 'start_date_written': '1666-09-00<1666-09-00>', 'end_date_written': 'bis1704-00-00'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OMeA 
chunk_process_amt_NEW >>> c_A was:  OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Professor', 'Fakultät']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Professor
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1666-09-00<1666-09-00> ' due to error ('Invalid iso date: ', '1666-09-00'): 
parse_date >>>  APIS: Could not parse date: ' bis1704-00-00 ' due to error month must be in 1..12: 
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Fakultät
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1666-09-00<1666-09-00> ' due to error ('Invalid iso date: ', '1666-09-00'): 
parse_date >>>  APIS: Could not parse date: ' bis1704-00-00 ' due to error month must be in 1..12: 
process_chunks >>>  Source Person Relation: 326 -- Becker, Nikolaus Wilhem -- {'related_person': <Person: Becker, Nikolaus Wilhem>, 'start_date_written': '1666-09-00<1666-09-00>', 'end_date_written': 'bis1704-00-00', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Fakultät>}

--------- Start of row | 327 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beckh
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reitknecht'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reitknecht'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Reitknecht'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Reitknechte
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA '
process_chunks >>> cD ['1663-00-00'], cF ['Reitknecht'], cH LW, CA OStA 
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beckh, Gregor>, 'start_date_written': '1663<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: OStA 
chunk_process_amt_NEW >>> c_A was: OStA  and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (LW)
chunk_create_relations >>> create relations called for c_F ['Reitknecht']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reitknecht
process_chunks >>>  Source Person Relation: 327 -- Beckh, Gregor -- {'related_person': <Person: Beckh, Gregor>, 'start_date_written': '1663<1663-06-30>', 'related_institution': <Institution: Oberststallmeisteramt (LW)>, 'relation_type': <PersonInstitutionRelation: Reitknecht>}

--------- Start of row | 328 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beckh
person_process_field_titel >>> t_tit = Baron
person_process_field_titel >>> t_list = ['Baron']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1681-01-23/1681-01-24<1681-01-23 - 1681-01-24>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1681-01-23/1681-01-24<1681-01-23 - 1681-01-24>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1681-01-23/1681-01-24<1681-01-23 - 1681-01-24>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1681-01-23/1681-01-24<1681-01-23 - 1681-01-24>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1681-01-23 - 1681-01-24>
helper_hsv_post_process_dates >>> new_i_date: <1681-01-23 - 1681-01-24>
helper_hsv_post_process_dates >>> old: 1681-01-23/1681-01-24<1681-01-23 - 1681-01-24>, new: 1681-01-23/1681-01-24<1681-01-23 - 1681-01-24>
chunk_process_datum >>> rel, chunk sdw: 1681-01-23/1681-01-24<1681-01-23 - 1681-01-24>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beckh, Melchior Leopold>, 'start_date_written': '1681-01-23/1681-01-24<1681-01-23 - 1681-01-24>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 328 -- Beckh, Melchior Leopold -- {'related_person': <Person: Beckh, Melchior Leopold>, 'start_date_written': '1681-01-23/1681-01-24<1681-01-23 - 1681-01-24>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 329 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Becki [Pecki]
person_process_field_familienname >>> fam1: Becki
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 13), match='[Pecki]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammerdiener
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1675-00-00'], cF ['Kammerdiener'], cH EG, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Becki, NN>, 'start_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create relations called for c_F ['Kammerdiener']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerdiener
process_chunks >>>  Source Person Relation: 329 -- Becki, NN -- {'related_person': <Person: Becki, NN>, 'start_date_written': '1675<1675-06-30>', 'related_institution': <Institution: Dummy Amt (EG (KW))>, 'relation_type': <PersonInstitutionRelation: Kammerdiener>}

--------- Start of row | 330 | -------------- 
replacer >>> r_fun: replaced )] with: ) ]
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['? 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Acc. [Ingrossist', 'Akzessist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['? 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Acc. [Ingrossist', 'Akzessist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['? 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Acc. [Ingrossist', 'Akzessist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-KBH / Ingrossisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-KBH 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK-KBH '
process_chunks >>> cD ['? 1704<1704-06-30>'], cF ['Acc. [Ingrossist', 'Akzessist'], cH L, CA HK-KBH 
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: ? 1704<1704-06-30>, new: ? 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: ? 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beer, Johann Joseph>, 'start_date_written': '? 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-KBH 
chunk_process_amt_NEW >>> c_A was: HK-KBH  and amt after matching with amt index is: Hofkriegsbuchhalterei
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsbuchhalterei (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Acc. [Ingrossist', 'Akzessist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Acc. [Ingrossist
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Akzessist
process_chunks >>>  Source Person Relation: 330 -- Beer, Johann Joseph -- {'related_person': <Person: Beer, Johann Joseph>, 'start_date_written': '? 1704<1704-06-30>', 'related_institution': <Institution: Hofkriegsbuchhalterei (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Akzessist>}

--------- Start of row | 331 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Behlen/Bethlen?
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Behlen/Bethlen?, Alexander Otto>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 331 -- Behlen/Bethlen?, Alexander Otto -- {'related_person': <Person: Behlen/Bethlen?, Alexander Otto>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 332 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beierhuber von Hub (Beyrhueber von Hueb)
person_process_field_familienname >>> fam1: Beierhuber von Hub
person_process_field_familienname >>> fam2: <re.Match object; span=(19, 40), match='(Beyrhueber von Hueb)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Registrator'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzleiverwandte
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'BHR '
process_chunks >>> cD ['1675-00-00'], cF ['Registrator'], cH L, CA BHR 
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beierhuber von Hub, Christoph>, 'start_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: Böhmischer Hofrat
chunk_process_amt_NEW >>>  Return value of inst2 = Böhmischer Hofrat (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Registrator']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Registrator
process_chunks >>>  Source Person Relation: 332 -- Beierhuber von Hub, Christoph -- {'related_person': <Person: Beierhuber von Hub, Christoph>, 'start_date_written': '1675<1675-06-30>', 'related_institution': <Institution: Böhmischer Hofrat (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Registrator>}

--------- Start of row | 333 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beil (Peil)
person_process_field_familienname >>> fam1: Beil
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 11), match='(Peil)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Akzessist, Kanzlist, 1675/76-00-00, 1677-00-00)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :333, Akzessist, Kanzlist (1675/76-00-00 \ 1677-00-00), [{'token_start': 0, 'token_end': 0, 'start': 0, 'end': 9, 'text': 'Akzessist', 'label': 'FUNKTION', 'source': '/nerdpool/models/viecpro_ner_hzab_12-20', 'input_hash': -162450452}, {'token_start': 2, 'token_end': 2, 'start': 11, 'end': 19, 'text': 'Kanzlist', 'label': 'FUNKTION', 'source': '/nerdpool/models/viecpro_ner_hzab_12-20', 'input_hash': -162450452}, {'token_start': 4, 'token_end': 10, 'start': 21, 'end': 34, 'text': '1675/76-00-00', 'label': 'DATUM', 'source': '/nerdpool/models/viecpro_ner_hzab_12-20', 'input_hash': -162450452}, {'token_start': 12, 'token_end': 16, 'start': 37, 'end': 47, 'text': '1677-00-00', 'label': 'DATUM', 'source': '/nerdpool/models/viecpro_ner_hzab_12-20', 'input_hash': -162450452}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Akzessist, Kanzlist, 1675/76-00-00, 1677-00-00]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Akzessist, Kanzlist, 1675/76-00-00, 1677-00-00)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', '1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Akzessist', 'Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', '1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Akzessist', 'Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', '1677-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Akzessist', 'Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG '
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', '1677-00-00'], cF ['Akzessist', 'Kanzlist'], cH Dummy Hofstaat, CA NÖ-LG 
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beil, Franz>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': '1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ landmarschallisches Gericht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ landmarschallisches Gericht (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Akzessist', 'Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Akzessist
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 333 -- Beil, Franz -- {'related_person': <Person: Beil, Franz>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': '1677<1677-06-30>', 'related_institution': <Institution: NÖ landmarschallisches Gericht (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 334 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beimb
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK-NÖ-BH'
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beimb, Andre>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: Niederösterreichische Buchhalterei 
chunk_process_amt_NEW >>>  Return value of inst2 = Niederösterreichische Buchhalterei  (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Raitoffizier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Raitoffizier
process_chunks >>>  Source Person Relation: 334 -- Beimb, Andre -- {'related_person': <Person: Beimb, Andre>, 'related_institution': <Institution: Niederösterreichische Buchhalterei  (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Raitoffizier>}

--------- Start of row | 335 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beimer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlei
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'BHR '
process_chunks >>> cD ['1674-00-00'], cF ['Kanzlist'], cH L, CA BHR 
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674<1674-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beimer, Georg>, 'start_date_written': '1674<1674-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: Böhmischer Hofrat
chunk_process_amt_NEW >>>  Return value of inst2 = Böhmischer Hofrat (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 335 -- Beimer, Georg -- {'related_person': <Person: Beimer, Georg>, 'start_date_written': '1674<1674-06-30>', 'related_institution': <Institution: Böhmischer Hofrat (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 336 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bein (Pein)
person_process_field_familienname >>> fam1: Bein
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 11), match='(Pein)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHK-DE
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHK-DE
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHK-DE'
process_chunks >>> cD ['1701-00-00'], cF ['Konzipist'], cH L, CA RHK-DE
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bein, Jobst>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHK-DE
chunk_process_amt_NEW >>> c_A was: RHK-DE and amt after matching with amt index is: Reichshofkanzlei-Deutsche Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofkanzlei-Deutsche Expedition (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Konzipist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konzipist
process_chunks >>>  Source Person Relation: 336 -- Bein, Jobst -- {'related_person': <Person: Bein, Jobst>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Reichshofkanzlei-Deutsche Expedition (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Konzipist>}

--------- Start of row | 337 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bekdold (Bechtold, Bechtoldt, Behtoldt, Bekdolt )
person_process_field_familienname >>> fam1: Bekdold
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 49), match='(Bechtold, Bechtoldt, Behtoldt, Bekdolt )'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-RR '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Regimentsrat'], cH L, CA NÖ-RR 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bekdold, Michael>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 337 -- Bekdold, Michael -- {'related_person': <Person: Bekdold, Michael>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}

--------- Start of row | 338 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Belchamps, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Belchamps, von END INPUT, ROW:338
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['bis 1683-09-28<1683-09-28>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['bis 1683-09-28<1683-09-28>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['bis 1683-09-28<1683-09-28>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['bis 1683-09-28<1683-09-28>'], cF ['Hofkammerrat'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1683-09-28>
helper_hsv_post_process_dates >>> new_i_date: <1683-09-28>
helper_hsv_post_process_dates >>> old: bis 1683-09-28<1683-09-28>, new: bis 1683-09-28<1683-09-28>
chunk_process_datum >>> rel, chunk edw: bis 1683-09-28<1683-09-28>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Belchamps, von, Karl>, 'end_date_written': 'bis 1683-09-28<1683-09-28>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Hofkammerrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkammerrat
process_chunks >>>  Source Person Relation: 338 -- Belchamps, von, Karl -- {'related_person': <Person: Belchamps, von, Karl>, 'end_date_written': 'bis 1683-09-28<1683-09-28>', 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Hofkammerrat>}

--------- Start of row | 339 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beliari (Beliorci, Boliari)
person_process_field_familienname >>> fam1: Beliari
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 27), match='(Beliorci, Boliari)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beliari, Anton >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 339 -- Beliari, Anton  -- {'related_person': <Person: Beliari, Anton >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 340 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bellarini
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Altist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Altist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Altist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofmusikanten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA '
process_chunks >>> cD ['1704-00-00'], cF ['Altist'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bellarini, Franz>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Altist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Altist
process_chunks >>>  Source Person Relation: 340 -- Bellarini, Franz -- {'related_person': <Person: Bellarini, Franz>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Altist>}

--------- Start of row | 341 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bellaviz de Bellai
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Agent, Professor, theol. Fakultät, 1701-00-00)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :341, Agent; Professor, theol. Fakultät (1701-00-00), [{'start': 0, 'end': 5, 'token_start': 0, 'token_end': 0, 'label': 'FUNKTION'}, {'start': 7, 'end': 16, 'token_start': 2, 'token_end': 2, 'label': 'FUNKTION'}, {'start': 18, 'end': 33, 'token_start': 4, 'token_end': 6, 'label': 'AMT'}, {'start': 35, 'end': 45, 'token_start': 8, 'token_end': 12, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Agent, Professor, theol. Fakultät, 1701-00-00]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Agent, Professor, theol. Fakultät, 1701-00-00)
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = theol. Fakultät
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Professor'], 'AMT': 'theol. Fakultät'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Professor'], 'AMT': 'theol. Fakultät'}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Agent'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Professor'], 'AMT': 'theol. Fakultät'}
helper_hsv_match_amt_with_funct >>> r_A = UHKz / Agenten
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'UHKz / Agenten'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'theol. Fakultät'
process_chunks >>> cD [], cF ['Agent'], cH L, CA UHKz / Agenten
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bellaviz de Bellai, Gabriel Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: UHKz / Agenten
chunk_process_amt_NEW >>> c_A was: UHKz / Agenten and amt after matching with amt index is: ungar. Kanzlei hatte Hofstaatkürzel ksl. u. kgl.
chunk_process_amt_NEW >>>  Return value of inst2 = ungar. Kanzlei hatte Hofstaatkürzel ksl. u. kgl. (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Agent']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Agent
process_chunks >>>  Source Person Relation: 341 -- Bellaviz de Bellai, Gabriel Stephan -- {'related_person': <Person: Bellaviz de Bellai, Gabriel Stephan>, 'related_institution': <Institution: ungar. Kanzlei hatte Hofstaatkürzel ksl. u. kgl. (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Agent>}
process_chunks >>> cD ['1701-00-00'], cF ['Professor'], cH L, CA theol. Fakultät
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bellaviz de Bellai, Gabriel Stephan>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: theol. Fakultät
chunk_process_amt_NEW >>>  Return value of inst2 = theol. Fakultät (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Professor']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Professor
process_chunks >>>  Source Person Relation: 341 -- Bellaviz de Bellai, Gabriel Stephan -- {'related_person': <Person: Bellaviz de Bellai, Gabriel Stephan>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: theol. Fakultät (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Professor>}

--------- Start of row | 342 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bellerotti
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Postinbereiter', 'Pästinbereiter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Postinbereiter', 'Pästinbereiter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Postinbereiter', 'Pästinbereiter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Hoffuttermeister
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA '
process_chunks >>> cD ['1704-00-00'], cF ['Postinbereiter', 'Pästinbereiter'], cH L, CA OStA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bellerotti, Augustino Antonio>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA 
chunk_process_amt_NEW >>> c_A was: OStA  and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Postinbereiter', 'Pästinbereiter']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Postinbereiter
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Pästinbereiter
process_chunks >>>  Source Person Relation: 342 -- Bellerotti, Augustino Antonio -- {'related_person': <Person: Bellerotti, Augustino Antonio>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberststallmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Pästinbereiter>}

--------- Start of row | 343 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Belliar
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1675-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Belliar, Anton >, 'start_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 343 -- Belliar, Anton  -- {'related_person': <Person: Belliar, Anton >, 'start_date_written': '1675<1675-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 344 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beltran
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Schatzmeistergehilfe'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Schatzmeistergehilfe'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = MMT
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-00-00'], 'HOFSTAAT': 'MMT', 'FUNKTION': ['Schatzmeistergehilfe'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Mannspersonen)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Mannspersonen)
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = '(Mannspersonen)'
process_chunks >>> cD ['1666-00-00'], cF ['Schatzmeistergehilfe'], cH MMT, CA (Mannspersonen)
helper_hsv_post_process_dates >>> old: 1666-00-00, new: 1666<1666-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666<1666-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beltran, Casparo>, 'start_date_written': '1666<1666-06-30>'}
chunk_get_nm_hst >>> c_H = MMT
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMT (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Mannspersonen)
chunk_process_amt_NEW >>>  Return value of inst2 = (Mannspersonen) (MMT (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Schatzmeistergehilfe']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Schatzmeistergehilfe
process_chunks >>>  Source Person Relation: 344 -- Beltran, Casparo -- {'related_person': <Person: Beltran, Casparo>, 'start_date_written': '1666<1666-06-30>', 'related_institution': <Institution: (Mannspersonen) (MMT (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Schatzmeistergehilfe>}

--------- Start of row | 345 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bembo (Berbo)
person_process_field_familienname >>> fam1: Bembo
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 13), match='(Berbo)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Schatzmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Schatzmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = EMJ
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EMJ
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EMJ
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EMJ', 'FUNKTION': ['Schatzmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Schatzmeister'], cH EMJ, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bembo, NN>}
chunk_get_nm_hst >>> c_H = EMJ
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: JH (EG)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (JH (EG))
chunk_create_relations >>> create relations called for c_F ['Schatzmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Schatzmeister
process_chunks >>>  Source Person Relation: 345 -- Bembo, NN -- {'related_person': <Person: Bembo, NN>, 'related_institution': <Institution: Dummy Amt (JH (EG))>, 'relation_type': <PersonInstitutionRelation: Schatzmeister>}

--------- Start of row | 346 | -------------- 
replacer >>> r_fun: replaced )) with: ) )
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bemelberg
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-05-10/('], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-05-10/('], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-05-10/('], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1674-05-10/('], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1674-05-10/(, new: 1674-05-10/(
chunk_process_datum >>> rel, chunk sdw: 1674-05-10/(
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bemelberg, Carl>, 'start_date_written': '1674-05-10/('}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1674-05-10/( ' due to error Could not interpret date.: 
process_chunks >>>  Source Person Relation: 346 -- Bemelberg, Carl -- {'related_person': <Person: Bemelberg, Carl>, 'start_date_written': '1674-05-10/(', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 347 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bemer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'BHR '
process_chunks >>> cD ['1675-00-00'], cF ['Kanzlist'], cH L, CA BHR 
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bemer, Georg>, 'start_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: Böhmischer Hofrat
chunk_process_amt_NEW >>>  Return value of inst2 = Böhmischer Hofrat (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 347 -- Bemer, Georg -- {'related_person': <Person: Bemer, Georg>, 'start_date_written': '1675<1675-06-30>', 'related_institution': <Institution: Böhmischer Hofrat (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 348 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Benckler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammertrabant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammertrabant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kammertrabant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kammertrabant'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Benckler, Kaspar>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kammertrabant']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammertrabant
process_chunks >>>  Source Person Relation: 348 -- Benckler, Kaspar -- {'related_person': <Person: Benckler, Kaspar>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kammertrabant>}

--------- Start of row | 349 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bendel
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Leibkutscher'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Stangenreiter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Leibkutscher'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Stangenreiter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Leibkutscher'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Stangenreiter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Hoffuttermeister
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA / Hoffuttermeister'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD [], cF ['Leibkutscher'], cH L, CA OStA / Hoffuttermeister
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bendel, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA / Hoffuttermeister
chunk_process_amt_NEW >>>  Return value of inst2 = OStA / Hoffuttermeister (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Leibkutscher']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Leibkutscher
process_chunks >>>  Source Person Relation: 349 -- Bendel, Stephan -- {'related_person': <Person: Bendel, Stephan>, 'related_institution': <Institution: OStA / Hoffuttermeister (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Leibkutscher>}
process_chunks >>> cD ['1704-00-00'], cF ['Stangenreiter'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bendel, Stephan>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Stangenreiter']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Stangenreiter
process_chunks >>>  Source Person Relation: 349 -- Bendel, Stephan -- {'related_person': <Person: Bendel, Stephan>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Stangenreiter>}

--------- Start of row | 350 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beneburg
person_process_field_titel >>> t_tit = Graf , Edler
person_process_field_titel >>> t_list = ['Graf , Edler']
person_process_field_titel >>> Komma in tit: Graf , Edler
person_process_field_titel >>> CREATING SPLIT TITLE Graf from Graf , Edler
person_process_field_titel >>> CREATING SPLIT TITLE Edler from Graf , Edler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = ksl.
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ksl.
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ksl.
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR'
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.'], cH ksl., CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beneburg, Philipp Wilhelm>}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Rat, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat, wirkl.
process_chunks >>>  Source Person Relation: 350 -- Beneburg, Philipp Wilhelm -- {'related_person': <Person: Beneburg, Philipp Wilhelm>, 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Rat, wirkl.>}

--------- Start of row | 351 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Benger
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Agent'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = UHKz / Agenten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = UHKz 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'UHKz '
process_chunks >>> cD ['1704-00-00'], cF ['Agent'], cH L, CA UHKz 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Benger, Ferdinand Joseph>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: UHKz 
chunk_process_amt_NEW >>> c_A was: UHKz  and amt after matching with amt index is: ungar. Kanzlei hatte Hofstaatkürzel ksl. u. kgl.
chunk_process_amt_NEW >>>  Return value of inst2 = ungar. Kanzlei hatte Hofstaatkürzel ksl. u. kgl. (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Agent']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Agent
process_chunks >>>  Source Person Relation: 351 -- Benger, Ferdinand Joseph -- {'related_person': <Person: Benger, Ferdinand Joseph>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: ungar. Kanzlei hatte Hofstaatkürzel ksl. u. kgl. (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Agent>}

--------- Start of row | 352 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bening von Petersdorff
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1694-10-01', 'bis 1698-04-30<1698-04-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Rottmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1694-10-01', 'bis 1698-04-30<1698-04-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Rottmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1694-10-01', 'bis 1698-04-30<1698-04-30>'], 'HOFSTAAT': 'J', 'FUNKTION': ['Rottmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Hartschierenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1694-10-01', 'bis 1698-04-30<1698-04-30>'], cF ['Rottmeister'], cH J, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1694-10-01, new: 1694-10-01<1694-10-01>
helper_hsv_post_process_dates >>> inner date: <1698-04-30>
helper_hsv_post_process_dates >>> new_i_date: <1698-04-30>
helper_hsv_post_process_dates >>> old: bis 1698-04-30<1698-04-30>, new: bis 1698-04-30<1698-04-30>
chunk_process_datum >>> rel, chunk sdw: 1694-10-01<1694-10-01>
chunk_process_datum >>> rel, chunk edw: 1694-10-01<1694-10-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bening von Petersdorff, Hans Georg>, 'start_date_written': '1694-10-01<1694-10-01>', 'end_date_written': 'bis 1698-04-30<1698-04-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Rottmeister']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Rottmeister
process_chunks >>>  Source Person Relation: 352 -- Bening von Petersdorff, Hans Georg -- {'related_person': <Person: Bening von Petersdorff, Hans Georg>, 'start_date_written': '1694-10-01<1694-10-01>', 'end_date_written': 'bis 1698-04-30<1698-04-30>', 'related_institution': <Institution: Dummy Amt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Rottmeister>}

--------- Start of row | 353 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beninger
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1694-10-01', 'bis 1702-09-30<1702-09-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1694-10-01', 'bis 1702-09-30<1702-09-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1694-10-01', 'bis 1702-09-30<1702-09-30>'], 'HOFSTAAT': 'J', 'FUNKTION': ['Hartschier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Hartschierenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' '
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1694-10-01', 'bis 1702-09-30<1702-09-30>'], cF ['Hartschier'], cH J, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1694-10-01, new: 1694-10-01<1694-10-01>
helper_hsv_post_process_dates >>> inner date: <1702-09-30>
helper_hsv_post_process_dates >>> new_i_date: <1702-09-30>
helper_hsv_post_process_dates >>> old: bis 1702-09-30<1702-09-30>, new: bis 1702-09-30<1702-09-30>
chunk_process_datum >>> rel, chunk sdw: 1694-10-01<1694-10-01>
chunk_process_datum >>> rel, chunk edw: 1694-10-01<1694-10-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beninger, Hans Caspar>, 'start_date_written': '1694-10-01<1694-10-01>', 'end_date_written': 'bis 1702-09-30<1702-09-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Hartschier']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hartschier
process_chunks >>>  Source Person Relation: 353 -- Beninger, Hans Caspar -- {'related_person': <Person: Beninger, Hans Caspar>, 'start_date_written': '1694-10-01<1694-10-01>', 'end_date_written': 'bis 1702-09-30<1702-09-30>', 'related_institution': <Institution: Dummy Amt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Hartschier>}

--------- Start of row | 354 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bentheimb
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR'
process_chunks >>> cD ['1701-00-00'], cF ['Geh. Rat'], cH L, CA GR
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bentheimb, Arnold Mauritz Wilhelm>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Rat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat
process_chunks >>>  Source Person Relation: 354 -- Bentheimb, Arnold Mauritz Wilhelm -- {'related_person': <Person: Bentheimb, Arnold Mauritz Wilhelm>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Rat>}

--------- Start of row | 355 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Benzinger (Penzinger)
person_process_field_familienname >>> fam1: Benzinger
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 21), match='(Penzinger)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R'
process_chunks >>> cD ['1701-00-00'], cF ['Sekretär'], cH Dummy Hofstaat, CA NÖ-R
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Benzinger, Franz Dietrich>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R
chunk_process_amt_NEW >>> c_A was: NÖ-R and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 355 -- Benzinger, Franz Dietrich -- {'related_person': <Person: Benzinger, Franz Dietrich>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: NÖ Regierung (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Sekretär>}

--------- Start of row | 356 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Benzinger (Penzinger)
person_process_field_familienname >>> fam1: Benzinger
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 21), match='(Penzinger)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HK'
process_chunks >>> cD ['1701-00-00'], cF ['Konzipist'], cH L, CA HK
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Benzinger, Johann>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30) u.gewes. Kanzlist (1661-05-25 bis 1663-09-30)) 

==> zur Hofkammer, da diese die oberste Instanz und er war immer im Finanzwesen tätig. 
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Konzipist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Konzipist
process_chunks >>>  Source Person Relation: 356 -- Benzinger, Johann -- {'related_person': <Person: Benzinger, Johann>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: Hofkammer


zu OMe, HKpräs., HKräte : 
DB: Kontrollor (1665-01-01 bis 1672-01-31) (u. Zahlmeister, Hofkriegs- (?ab 1672-02-01 bis 1676), Feldkriegs- (1676), Rat, ksl. (?ab 1672-02-01 bis 1676), Hofkammerrat (1679-01-01 bis mind. 1680-06-30 (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Konzipist>}

--------- Start of row | 357 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bercheni
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bercheni, Nikolo>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 357 -- Bercheni, Nikolo -- {'related_person': <Person: Bercheni, Nikolo>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 358 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Berchtholdt
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1671-00-00', 'bis 1674<1674-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1671-00-00', 'bis 1674<1674-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1671-00-00', 'bis 1674<1674-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1671-00-00', 'bis 1674<1674-06-30>'], cF ['Regimentsrat'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1671-00-00, new: 1671<1671-06-30>
helper_hsv_post_process_dates >>> inner date: <1674-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30>
helper_hsv_post_process_dates >>> old: bis 1674<1674-06-30>, new: bis 1674<1674-06-30>
chunk_process_datum >>> rel, chunk sdw: 1671<1671-06-30>
chunk_process_datum >>> rel, chunk edw: 1671<1671-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Berchtholdt, Michael>, 'start_date_written': '1671<1671-06-30>', 'end_date_written': 'bis 1674<1674-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 358 -- Berchtholdt, Michael -- {'related_person': <Person: Berchtholdt, Michael>, 'start_date_written': '1671<1671-06-30>', 'end_date_written': 'bis 1674<1674-06-30>', 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}

--------- Start of row | 359 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Berchtold
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Berchtold, Ferdinand Franz>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 359 -- Berchtold, Ferdinand Franz -- {'related_person': <Person: Berchtold, Ferdinand Franz>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 360 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Berchtoldt
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Diener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Diener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Diener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Edelknabenpartei
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OStA '
process_chunks >>> cD ['1663-00-00'], cF ['Diener'], cH LW, CA OStA 
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Berchtoldt, Hanns Adam>, 'start_date_written': '1663<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: OStA 
chunk_process_amt_NEW >>> c_A was: OStA  and amt after matching with amt index is: Oberststallmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberststallmeisteramt (LW)
chunk_create_relations >>> create relations called for c_F ['Diener']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Diener
process_chunks >>>  Source Person Relation: 360 -- Berchtoldt, Hanns Adam -- {'related_person': <Person: Berchtoldt, Hanns Adam>, 'start_date_written': '1663<1663-06-30>', 'related_institution': <Institution: Oberststallmeisteramt (LW)>, 'relation_type': <PersonInstitutionRelation: Diener>}

--------- Start of row | 361 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Berck, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Berck, de END INPUT, ROW:361
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Registrator'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GHKz
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GHKz
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GHKz'
process_chunks >>> cD ['1663-00-00'], cF ['Registrator'], cH LW, CA GHKz
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Berck, de, Marx>, 'start_date_written': '1663<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: GHKz
chunk_process_amt_NEW >>>  Return value of inst2 = GHKz (LW)
chunk_create_relations >>> create relations called for c_F ['Registrator']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Registrator
process_chunks >>>  Source Person Relation: 361 -- Berck, de, Marx -- {'related_person': <Person: Berck, de, Marx>, 'start_date_written': '1663<1663-06-30>', 'related_institution': <Institution: GHKz (LW)>, 'relation_type': <PersonInstitutionRelation: Registrator>}

--------- Start of row | 362 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Berg (Perg, von)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Berg (Perg, von) END INPUT, ROW:362
person_process_field_familienname >>> fam1: Berg
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 16), match='(Perg, von)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-RR'
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Regimentsrat'], cH L, CA NÖ-RR
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Berg, Marx Bartholomäus>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 362 -- Berg, Marx Bartholomäus -- {'related_person': <Person: Berg, Marx Bartholomäus>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}

--------- Start of row | 363 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Berga (Berka?)
person_process_field_familienname >>> fam1: Berga
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 14), match='(Berka?)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00'], 'HOFSTAAT': 'J', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1669-00-00'], cF ['Kämmerer'], cH J, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Berga, NN>, 'start_date_written': '1669<1669-06-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 363 -- Berga, NN -- {'related_person': <Person: Berga, NN>, 'start_date_written': '1669<1669-06-30>', 'related_institution': <Institution: Dummy Amt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 364 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bergeck
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer, Herrenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-LG '
process_chunks >>> cD ['1675-00-00'], cF ['Landrechtsbeisitzer'], cH L, CA NÖ-LG 
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bergeck, Johann Rudolph>, 'start_date_written': '1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ landmarschallisches Gericht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ landmarschallisches Gericht (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Landrechtsbeisitzer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Landrechtsbeisitzer
process_chunks >>>  Source Person Relation: 364 -- Bergeck, Johann Rudolph -- {'related_person': <Person: Bergeck, Johann Rudolph>, 'start_date_written': '1675<1675-06-30>', 'related_institution': <Institution: NÖ landmarschallisches Gericht (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Landrechtsbeisitzer>}

--------- Start of row | 365 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bergen
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bergen, Joachim Ladislaus>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 365 -- Bergen, Joachim Ladislaus -- {'related_person': <Person: Bergen, Joachim Ladislaus>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 366 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bergen (Pergen)
person_process_field_familienname >>> fam1: Bergen
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Pergen)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Herrenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-RR '
process_chunks >>> cD ['1701-00-00'], cF ['Regimentsrat'], cH Dummy Hofstaat, CA NÖ-RR 
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bergen, Karl>, 'start_date_written': '1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 366 -- Bergen, Karl -- {'related_person': <Person: Bergen, Karl>, 'start_date_written': '1701<1701-06-30>', 'related_institution': <Institution: NÖ Regierung (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}

--------- Start of row | 367 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bergen (von Bergen, Pergen)
person_process_field_familienname >>> fam1: Bergen
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 27), match='(von Bergen, Pergen)'>
person_process_field_titel >>> t_tit = Edler [Freiherr]
person_process_field_titel >>> t_list = ['Edler [Freiherr]']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1663-12-21'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}, {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-12-21'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-12-21'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Ritterbank; RHK-DE
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  RHK-DE
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-RR '
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' RHK-DE'
process_chunks >>> cD ['1663-12-21'], cF ['Truchseß'], cH L, CA NÖ-RR 
helper_hsv_post_process_dates >>> old: 1663-12-21, new: 1663-12-21<1663-12-21>
chunk_process_datum >>> rel, chunk sdw: 1663-12-21<1663-12-21>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bergen, Heinrich >, 'start_date_written': '1663-12-21<1663-12-21>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Truchseß']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Truchseß
process_chunks >>>  Source Person Relation: 367 -- Bergen, Heinrich  -- {'related_person': <Person: Bergen, Heinrich >, 'start_date_written': '1663-12-21<1663-12-21>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Truchseß>}
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], cF ['Regimentsrat'], cH L, CA  RHK-DE
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bergen, Heinrich >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  RHK-DE
chunk_process_amt_NEW >>> c_A was:  RHK-DE and amt after matching with amt index is: Reichshofkanzlei-Deutsche Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofkanzlei-Deutsche Expedition (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 367 -- Bergen, Heinrich  -- {'related_person': <Person: Bergen, Heinrich >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: Reichshofkanzlei-Deutsche Expedition (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}

--------- Start of row | 368 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bergen, von (Berg, von; Pergen, von)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Bergen, von (Berg, von; Pergen, von) END INPUT, ROW:368
person_process_field_familienname >>> fam1: Bergen, von
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 36), match='(Berg, von; Pergen, von)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofsekretär'], 'AMT': None}, {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Taxator'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofsekretär'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Taxator'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofsekretär'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Taxator'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GK; OMeA / Offiziere ,a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GK'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' OMeA '
process_chunks >>> cD [], cF ['Hofsekretär'], cH L, CA GK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bergen, von, Max >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GK
chunk_process_amt_NEW >>> c_A was: GK and amt after matching with amt index is: Geheime Konferenz
chunk_process_amt_NEW >>>  Return value of inst2 = Geheime Konferenz (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofsekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofsekretär
process_chunks >>>  Source Person Relation: 368 -- Bergen, von, Max  -- {'related_person': <Person: Bergen, von, Max >, 'related_institution': <Institution: Geheime Konferenz (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofsekretär>}
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], cF ['Taxator'], cH L, CA  OMeA 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bergen, von, Max >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OMeA 
chunk_process_amt_NEW >>> c_A was:  OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Taxator']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Taxator
process_chunks >>>  Source Person Relation: 368 -- Bergen, von, Max  -- {'related_person': <Person: Bergen, von, Max >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Taxator>}

--------- Start of row | 369 | -------------- 
replacer >>> r_fun: replaced ,G with: , G
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bergen, von (Berge; Pergen, von)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Bergen, von (Berge; Pergen, von) END INPUT, ROW:369
person_process_field_familienname >>> fam1: Bergen, von
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 32), match='(Berge; Pergen, von)'>
person_process_field_titel >>> t_tit = Graf, Reichsgraf
person_process_field_titel >>> t_list = ['Graf, Reichsgraf']
person_process_field_titel >>> Komma in tit: Graf, Reichsgraf
person_process_field_titel >>> CREATING SPLIT TITLE Graf from Graf, Reichsgraf
person_process_field_titel >>> CREATING SPLIT TITLE Reichsgraf from Graf, Reichsgraf
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat', 'GFWM'], 'AMT': None}, {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat', 'GFWM'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat', 'GFWM'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR; OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'HKR'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' OKäA'
process_chunks >>> cD [], cF ['Hofkriegsrat', 'GFWM'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bergen, von, Christoph Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: Hofkriegsrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Hofkriegsrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofkriegsrat', 'GFWM']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofkriegsrat
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = GFWM
process_chunks >>>  Source Person Relation: 369 -- Bergen, von, Christoph Georg -- {'related_person': <Person: Bergen, von, Christoph Georg>, 'related_institution': <Institution: Hofkriegsrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: GFWM>}
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA  OKäA
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bergen, von, Christoph Georg>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OKäA
chunk_process_amt_NEW >>> c_A was:  OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 369 -- Bergen, von, Christoph Georg -- {'related_person': <Person: Bergen, von, Christoph Georg>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 370 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Berger
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Berger, Johann Bapitsta>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 370 -- Berger, Johann Bapitsta -- {'related_person': <Person: Berger, Johann Bapitsta>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 371 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bergh, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Bergh, von END INPUT, ROW:371
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-00-00', 'bis 1685<1685-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-00-00', 'bis 1685<1685-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00', 'bis 1685<1685-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1674-00-00', 'bis 1685<1685-06-30>'], cF ['Regimentsrat'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674<1674-06-30>
helper_hsv_post_process_dates >>> inner date: <1685-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1685-06-30>
helper_hsv_post_process_dates >>> old: bis 1685<1685-06-30>, new: bis 1685<1685-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674<1674-06-30>
chunk_process_datum >>> rel, chunk edw: 1674<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bergh, von, Marx>, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1685<1685-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Regimentsrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Regimentsrat
process_chunks >>>  Source Person Relation: 371 -- Bergh, von, Marx -- {'related_person': <Person: Bergh, von, Marx>, 'start_date_written': '1674<1674-06-30>', 'end_date_written': 'bis 1685<1685-06-30>', 'related_institution': <Institution: Dummy Amt (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Regimentsrat>}

--------- Start of row | 372 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Berhardi, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Berhardi, von END INPUT, ROW:372
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Agent'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR(?) / Agenten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR(?) 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'BHR(?) '
process_chunks >>> cD ['1669-00-00'], cF ['Agent'], cH L, CA BHR(?) 
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Berhardi, von, Franz>, 'start_date_written': '1669<1669-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR(?) 
chunk_process_amt_NEW >>>  Return value of inst2 = BHR(?) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Agent']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Agent
process_chunks >>>  Source Person Relation: 372 -- Berhardi, von, Franz -- {'related_person': <Person: Berhardi, von, Franz>, 'start_date_written': '1669<1669-06-30>', 'related_institution': <Institution: BHR(?) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Agent>}

--------- Start of row | 373 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Berka von Dubá; Berka z Dubé (Werka, Werkha, Woricka, Worika)
person_process_field_familienname >>> fam1: Berka von Dubá; Berka z Dubé
person_process_field_familienname >>> fam2: <re.Match object; span=(29, 61), match='(Werka, Werkha, Woricka, Worika)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(3) = [{'DATUM': ['1671-04-04', 'bis mind. 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}, {'DATUM': ['ab 1696<1696-06-30>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Abgesandter'], 'AMT': None}, {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1671-04-04', 'bis mind. 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['ab 1696<1696-06-30>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Abgesandter'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 3, len Ämter-Spalte: 3
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1671-04-04', 'bis mind. 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['ab 1696<1696-06-30>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Abgesandter'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = Abgesandte / Italien; GR; OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = Abgesandte 
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Abgesandte '
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' GR'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' OKäA'
process_chunks >>> cD ['1671-04-04', 'bis mind. 1677<1677-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA Abgesandte 
helper_hsv_post_process_dates >>> old: 1671-04-04, new: 1671-04-04<1671-04-04>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis mind. 1677<1677-06-30>, new: bis mind. 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1671-04-04<1671-04-04>
chunk_process_datum >>> rel, chunk edw: 1671-04-04<1671-04-04>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Berka von Dubá; Berka z Dubé, Franz Anton>, 'start_date_written': '1671-04-04<1671-04-04>', 'end_date_written': 'bis mind. 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Abgesandte 
chunk_process_amt_NEW >>>  Return value of inst2 = Abgesandte (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer, wirkl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer, wirkl.
process_chunks >>>  Source Person Relation: 373 -- Berka von Dubá; Berka z Dubé, Franz Anton -- {'related_person': <Person: Berka von Dubá; Berka z Dubé, Franz Anton>, 'start_date_written': '1671-04-04<1671-04-04>', 'end_date_written': 'bis mind. 1677<1677-06-30>', 'related_institution': <Institution: Abgesandte (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer, wirkl.>}
process_chunks >>> cD ['ab 1696<1696-06-30>', 'bis 1704<1704-06-30>'], cF ['Abgesandter'], cH L, CA  GR
helper_hsv_post_process_dates >>> inner date: <1696-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1696-06-30>
helper_hsv_post_process_dates >>> old: ab 1696<1696-06-30>, new: ab 1696<1696-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: ab 1696<1696-06-30>
chunk_process_datum >>> rel, chunk edw: ab 1696<1696-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Berka von Dubá; Berka z Dubé, Franz Anton>, 'start_date_written': 'ab 1696<1696-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  GR
chunk_process_amt_NEW >>> c_A was:  GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Abgesandter']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Abgesandter
process_chunks >>>  Source Person Relation: 373 -- Berka von Dubá; Berka z Dubé, Franz Anton -- {'related_person': <Person: Berka von Dubá; Berka z Dubé, Franz Anton>, 'start_date_written': 'ab 1696<1696-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Abgesandter>}
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Geh. Rat'], cH L, CA  OKäA
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Berka von Dubá; Berka z Dubé, Franz Anton>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OKäA
chunk_process_amt_NEW >>> c_A was:  OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Rat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat
process_chunks >>>  Source Person Relation: 373 -- Berka von Dubá; Berka z Dubé, Franz Anton -- {'related_person': <Person: Berka von Dubá; Berka z Dubé, Franz Anton>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Rat>}

--------- Start of row | 374 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Berleps
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'J', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH J, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Berleps, Sidius Herbold>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (J1 (Ehzg.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 374 -- Berleps, Sidius Herbold -- {'related_person': <Person: Berleps, Sidius Herbold>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (J1 (Ehzg.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 375 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Berleps (Berlepsch, Berlipsch)
person_process_field_familienname >>> fam1: Berleps
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 30), match='(Berlepsch, Berlipsch)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA; RHR / Grafen- , Herrenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  RHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' RHR '
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Reichshofrat'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Berleps, Peter Philipp>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Reichshofrat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofrat
process_chunks >>>  Source Person Relation: 375 -- Berleps, Peter Philipp -- {'related_person': <Person: Berleps, Peter Philipp>, 'start_date_written': '1701<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Reichshofrat>}
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA  RHR 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Berleps, Peter Philipp>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  RHR 
chunk_process_amt_NEW >>> c_A was:  RHR  and amt after matching with amt index is: Reichshofrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 375 -- Berleps, Peter Philipp -- {'related_person': <Person: Berleps, Peter Philipp>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Reichshofrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 376 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bermundez (Bermudez)
person_process_field_familienname >>> fam1: Bermundez
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 20), match='(Bermudez)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Guardadamas'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Guardadamas'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = MMT
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-00-00'], 'HOFSTAAT': 'MMT', 'FUNKTION': ['Guardadamas'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA (Mannspersonen)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA (Mannspersonen)
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA (Mannspersonen)'
process_chunks >>> cD ['1666-00-00'], cF ['Guardadamas'], cH MMT, CA OMeA (Mannspersonen)
helper_hsv_post_process_dates >>> old: 1666-00-00, new: 1666<1666-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666<1666-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bermundez, Antonio>, 'start_date_written': '1666<1666-06-30>'}
chunk_get_nm_hst >>> c_H = MMT
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMT (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA (Mannspersonen)
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (Mannspersonen) (MMT (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Guardadamas']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Guardadamas
process_chunks >>>  Source Person Relation: 376 -- Bermundez, Antonio -- {'related_person': <Person: Bermundez, Antonio>, 'start_date_written': '1666<1666-06-30>', 'related_institution': <Institution: OMeA (Mannspersonen) (MMT (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Guardadamas>}

--------- Start of row | 377 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bernardi, de (Bernardi, von; Bernhardin; Perngärti, von)
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Bernardi, de (Bernardi, von; Bernhardin; Perngärti, von) END INPUT, ROW:377
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Bernardi, de (Bernardi, von; Bernhardin; Perngärti, von) END INPUT, ROW:377
person_process_field_familienname >>> fam1: Bernardi, de
person_process_field_familienname >>> fam2: <re.Match object; span=(13, 56), match='(Bernardi, von; Bernhardin; Perngärti, von)'>
person_process_field_titel >>> t_tit = de
person_process_field_titel >>> t_list = ['de']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['ab 1669<1669-06-30>', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['ab 1669<1669-06-30>', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['ab 1669<1669-06-30>', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofratsagent'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Agenten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHR '
process_chunks >>> cD ['ab 1669<1669-06-30>', 'bis 1685-11-01<1685-11-01>'], cF ['Reichshofratsagent'], cH L, CA RHR 
helper_hsv_post_process_dates >>> inner date: <1669-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1669-06-30>
helper_hsv_post_process_dates >>> old: ab 1669<1669-06-30>, new: ab 1669<1669-06-30>
helper_hsv_post_process_dates >>> inner date: <1685-11-01>
helper_hsv_post_process_dates >>> new_i_date: <1685-11-01>
helper_hsv_post_process_dates >>> old: bis 1685-11-01<1685-11-01>, new: bis 1685-11-01<1685-11-01>
chunk_process_datum >>> rel, chunk sdw: ab 1669<1669-06-30>
chunk_process_datum >>> rel, chunk edw: ab 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bernardi, de, Johann Franz>, 'start_date_written': 'ab 1669<1669-06-30>', 'end_date_written': 'bis 1685-11-01<1685-11-01>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: Reichshofrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofrat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Reichshofratsagent']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofratsagent
process_chunks >>>  Source Person Relation: 377 -- Bernardi, de, Johann Franz -- {'related_person': <Person: Bernardi, de, Johann Franz>, 'start_date_written': 'ab 1669<1669-06-30>', 'end_date_written': 'bis 1685-11-01<1685-11-01>', 'related_institution': <Institution: Reichshofrat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Reichshofratsagent>}

--------- Start of row | 378 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bernardoni
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofpoet'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofpoet'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofpoet'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Bibliothecarius
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OMeA '
process_chunks >>> cD ['1704-00-00'], cF ['Hofpoet'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bernardoni, Peter Anton>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: Obersthofmeisteramt
chunk_process_amt_NEW >>>  Return value of inst2 = Obersthofmeisteramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Hofpoet']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hofpoet
process_chunks >>>  Source Person Relation: 378 -- Bernardoni, Peter Anton -- {'related_person': <Person: Bernardoni, Peter Anton>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Obersthofmeisteramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Hofpoet>}

--------- Start of row | 379 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bernauisa, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Bernauisa, von END INPUT, ROW:379
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = MMT
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-00-00'], 'HOFSTAAT': 'MMT', 'FUNKTION': ['Hoffräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Damas)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Damas)
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = '(Damas)'
process_chunks >>> cD ['1666-00-00'], cF ['Hoffräulein'], cH MMT, CA (Damas)
helper_hsv_post_process_dates >>> old: 1666-00-00, new: 1666<1666-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666<1666-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bernauisa, von, Elunca>, 'start_date_written': '1666<1666-06-30>'}
chunk_get_nm_hst >>> c_H = MMT
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMT (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Damas)
chunk_process_amt_NEW >>>  Return value of inst2 = (Damas) (MMT (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Hoffräulein']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Hoffräulein
process_chunks >>>  Source Person Relation: 379 -- Bernauisa, von, Elunca -- {'related_person': <Person: Bernauisa, von, Elunca>, 'start_date_written': '1666<1666-06-30>', 'related_institution': <Institution: (Damas) (MMT (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Hoffräulein>}

--------- Start of row | 380 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bernier
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bernier, Johann>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 380 -- Bernier, Johann -- {'related_person': <Person: Bernier, Johann>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 381 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Berß
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Tafeldecker', 'Offiziere'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Tafeldecker', 'Offiziere'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Tafeldecker', 'Offiziere'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1663-00-00'], cF ['Tafeldecker', 'Offiziere'], cH LW, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Berß, Peter>, 'start_date_written': '1663<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (LW)
chunk_create_relations >>> create relations called for c_F ['Tafeldecker', 'Offiziere']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Tafeldecker
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Offiziere
process_chunks >>>  Source Person Relation: 381 -- Berß, Peter -- {'related_person': <Person: Berß, Peter>, 'start_date_written': '1663<1663-06-30>', 'related_institution': <Institution: Dummy Amt (LW)>, 'relation_type': <PersonInstitutionRelation: Offiziere>}

--------- Start of row | 382 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bersius (Persius)
person_process_field_familienname >>> fam1: Bersius
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='(Persius)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Resident'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Resident'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Resident'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / kurfürstl. Residenten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHR '
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>'], cF ['Resident'], cH Dummy Hofstaat, CA RHR 
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bersius, Ferdinand>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: Reichshofrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofrat (Behörde) (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Resident']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Resident
process_chunks >>>  Source Person Relation: 382 -- Bersius, Ferdinand -- {'related_person': <Person: Bersius, Ferdinand>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'related_institution': <Institution: Reichshofrat (Behörde) (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Resident>}

--------- Start of row | 383 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bertholdi
person_process_field_titel >>> t_tit = Baron
person_process_field_titel >>> t_list = ['Baron']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1679-00-00', 'bis 1683<1683-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1679-00-00', 'bis 1683<1683-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1679-00-00', 'bis 1683<1683-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR'
process_chunks >>> cD ['1679-00-00', 'bis 1683<1683-06-30>'], cF ['Geh. Rat'], cH L, CA GR
helper_hsv_post_process_dates >>> old: 1679-00-00, new: 1679<1679-06-30>
helper_hsv_post_process_dates >>> inner date: <1683-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1683-06-30>
helper_hsv_post_process_dates >>> old: bis 1683<1683-06-30>, new: bis 1683<1683-06-30>
chunk_process_datum >>> rel, chunk sdw: 1679<1679-06-30>
chunk_process_datum >>> rel, chunk edw: 1679<1679-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bertholdi, Bartholomäus>, 'start_date_written': '1679<1679-06-30>', 'end_date_written': 'bis 1683<1683-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Geh. Rat']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Geh. Rat
process_chunks >>>  Source Person Relation: 383 -- Bertholdi, Bartholomäus -- {'related_person': <Person: Bertholdi, Bartholomäus>, 'start_date_written': '1679<1679-06-30>', 'end_date_written': 'bis 1683<1683-06-30>', 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Geh. Rat>}

--------- Start of row | 384 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bertholdi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bertholdi, Franz Carl>, 'start_date_written': '1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 384 -- Bertholdi, Franz Carl -- {'related_person': <Person: Bertholdi, Franz Carl>, 'start_date_written': '1704<1704-06-30>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 385 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bertram (Bertramb)
person_process_field_familienname >>> fam1: Bertram
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 18), match='(Bertramb)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['ab /1674/75<1674-06-30 - 75>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['ab /1674/75<1674-06-30 - 75>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['ab /1674/75<1674-06-30 - 75>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Reichshofratsagent'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Agenten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHR '
process_chunks >>> cD ['ab /1674/75<1674-06-30 - 75>', 'bis 1677<1677-06-30>'], cF ['Reichshofratsagent'], cH Dummy Hofstaat, CA RHR 
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75>
helper_hsv_post_process_dates >>> old: ab /1674/75<1674-06-30 - 75>, new: ab /1674/75<1674-06-30 - 75>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: ab /1674/75<1674-06-30 - 75>
chunk_process_datum >>> rel, chunk edw: ab /1674/75<1674-06-30 - 75>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bertram, Franz Winand>, 'start_date_written': 'ab /1674/75<1674-06-30 - 75>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: Reichshofrat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofrat (Behörde) (Dummy Hofstaat)
chunk_create_relations >>> create relations called for c_F ['Reichshofratsagent']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Reichshofratsagent
process_chunks >>>  Source Person Relation: 385 -- Bertram, Franz Winand -- {'related_person': <Person: Bertram, Franz Winand>, 'start_date_written': 'ab /1674/75<1674-06-30 - 75>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Reichshofrat (Behörde) (Dummy Hofstaat)>, 'relation_type': <PersonInstitutionRelation: Reichshofratsagent>}

--------- Start of row | 386 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bertram (Pertram, Pertramb)
person_process_field_familienname >>> fam1: Bertram
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 27), match='(Pertram, Pertramb)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}, {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHK-DE / Kanzlisten
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHK-DE / Kanzlisten'
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'Dummy Amt'
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>'], cF ['Kanzlist'], cH L, CA RHK-DE / Kanzlisten
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bertram, Raban Herman >, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHK-DE / Kanzlisten
chunk_process_amt_NEW >>> c_A was: RHK-DE / Kanzlisten and amt after matching with amt index is: Reichshofkanzlei-Deutsche Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofkanzlei-Deutsche Expedition (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 386 -- Bertram, Raban Herman  -- {'related_person': <Person: Bertram, Raban Herman >, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'related_institution': <Institution: Reichshofkanzlei-Deutsche Expedition (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF [], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bertram, Raban Herman >, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F []
process_chunks >>>  Source Person Relation: 386 -- Bertram, Raban Herman  -- {'related_person': <Person: Bertram, Raban Herman >, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>}

--------- Start of row | 387 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bertram, von ( Pertramb)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Bertram, von ( Pertramb) END INPUT, ROW:387
person_process_field_familienname >>> fam1: Bertram, von
person_process_field_familienname >>> fam2: <re.Match object; span=(13, 24), match='( Pertramb)'>
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär, geh.', 'Rat, ksl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär, geh.', 'Rat, ksl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär, geh.', 'Rat, ksl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR / Sekretarien; RHK-LE
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR / Sekretarien'
process_chunks >>> cD ['1669-00-00', 'bis 1704<1704-06-30>'], cF ['Sekretär, geh.', 'Rat, ksl.'], cH L, CA GR / Sekretarien
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669<1669-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669<1669-06-30>
chunk_process_datum >>> rel, chunk edw: 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bertram, von, Franz Winand>, 'start_date_written': '1669<1669-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR / Sekretarien
chunk_process_amt_NEW >>> c_A was: GR / Sekretarien and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Sekretär, geh.', 'Rat, ksl.']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär, geh.
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Rat, ksl.
process_chunks >>>  Source Person Relation: 387 -- Bertram, von, Franz Winand -- {'related_person': <Person: Bertram, von, Franz Winand>, 'start_date_written': '1669<1669-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Rat, ksl.>}

--------- Start of row | 388 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bertram, von (Pertram, Pertramb)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Bertram, von (Pertram, Pertramb) END INPUT, ROW:388
person_process_field_familienname >>> fam1: Bertram, von
person_process_field_familienname >>> fam2: <re.Match object; span=(13, 32), match='(Pertram, Pertramb)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHK-DE / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHK-DE 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHK-DE '
process_chunks >>> cD [], cF [], cH L, CA RHK-DE 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bertram, von, Franz Winand >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHK-DE 
chunk_process_amt_NEW >>> c_A was: RHK-DE  and amt after matching with amt index is: Reichshofkanzlei-Deutsche Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = Reichshofkanzlei-Deutsche Expedition (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F []
process_chunks >>>  Source Person Relation: 388 -- Bertram, von, Franz Winand  -- {'related_person': <Person: Bertram, von, Franz Winand >, 'related_institution': <Institution: Reichshofkanzlei-Deutsche Expedition (L1 (Ks.))>}

--------- Start of row | 389 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Bertramb, von (Perchtram)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Bertramb, von (Perchtram) END INPUT, ROW:389
person_process_field_familienname >>> fam1: Bertramb, von
person_process_field_familienname >>> fam2: <re.Match object; span=(14, 25), match='(Perchtram)'>
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Archivar, geh.', 'Lehensekretär', 'Registrator'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Archivar, geh.', 'Lehensekretär', 'Registrator'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Archivar, geh.', 'Lehensekretär', 'Registrator'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHK-LE / Registratur
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHK-LE 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'RHK-LE '
process_chunks >>> cD ['1669-00-00', 'bis 1704<1704-06-30>'], cF ['Archivar, geh.', 'Lehensekretär', 'Registrator'], cH L, CA RHK-LE 
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669<1669-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669<1669-06-30>
chunk_process_datum >>> rel, chunk edw: 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bertramb, von, Raban Hermann >, 'start_date_written': '1669<1669-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHK-LE 
chunk_process_amt_NEW >>> c_A was: RHK-LE  and amt after matching with amt index is: Reichhofkanzlei-Lateinische Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Archivar, geh.', 'Lehensekretär', 'Registrator']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Archivar, geh.
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Lehensekretär
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Registrator
process_chunks >>>  Source Person Relation: 389 -- Bertramb, von, Raban Hermann  -- {'related_person': <Person: Bertramb, von, Raban Hermann >, 'start_date_written': '1669<1669-06-30>', 'end_date_written': 'bis 1704<1704-06-30>', 'related_institution': <Institution: Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Registrator>}

--------- Start of row | 390 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beschowiz
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1681-01-06/1681-04-14<1681-01-06 - 1681-04-14>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1681-01-06/1681-04-14<1681-01-06 - 1681-04-14>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1681-01-06/1681-04-14<1681-01-06 - 1681-04-14>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1681-01-06/1681-04-14<1681-01-06 - 1681-04-14>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1681-01-06 - 1681-04-14>
helper_hsv_post_process_dates >>> new_i_date: <1681-01-06 - 1681-04-14>
helper_hsv_post_process_dates >>> old: 1681-01-06/1681-04-14<1681-01-06 - 1681-04-14>, new: 1681-01-06/1681-04-14<1681-01-06 - 1681-04-14>
chunk_process_datum >>> rel, chunk sdw: 1681-01-06/1681-04-14<1681-01-06 - 1681-04-14>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beschowiz, Casimir>, 'start_date_written': '1681-01-06/1681-04-14<1681-01-06 - 1681-04-14>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 390 -- Beschowiz, Casimir -- {'related_person': <Person: Beschowiz, Casimir>, 'start_date_written': '1681-01-06/1681-04-14<1681-01-06 - 1681-04-14>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 391 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Besler (Bessler, Boslor, Bößler, Päßler, Pößler)
person_process_field_familienname >>> fam1: Besler
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 48), match='(Bessler, Boslor, Bößler, Päßler, Pößler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R '
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Kanzlist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Besler, Adam>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 391 -- Besler, Adam -- {'related_person': <Person: Besler, Adam>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 392 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Besler (Poßler)
person_process_field_familienname >>> fam1: Besler
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Poßler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'NÖ-R '
process_chunks >>> cD ['1678-00-00'], cF ['Kanzlist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Besler, Matthias>, 'start_date_written': '1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ Regierung
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Regierung (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kanzlist']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kanzlist
process_chunks >>>  Source Person Relation: 392 -- Besler, Matthias -- {'related_person': <Person: Besler, Matthias>, 'start_date_written': '1678<1678-06-30>', 'related_institution': <Institution: NÖ Regierung (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kanzlist>}

--------- Start of row | 393 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Betäz
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-05-17'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-05-17'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-05-17'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'None'
helper_hsv_match_amt_with_funct >>> Caught Empty Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1663-05-17'], cF ['Truchseß'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1663-05-17, new: 1663-05-17<1663-05-17>
chunk_process_datum >>> rel, chunk sdw: 1663-05-17<1663-05-17>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Betäz, Octavius>, 'start_date_written': '1663-05-17<1663-05-17>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Truchseß']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Truchseß
process_chunks >>>  Source Person Relation: 393 -- Betäz, Octavius -- {'related_person': <Person: Betäz, Octavius>, 'start_date_written': '1663-05-17<1663-05-17>', 'related_institution': <Institution: Dummy Amt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Truchseß>}

--------- Start of row | 394 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Betazi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1660-09-21'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1660-09-21'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1660-09-21'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1660-09-21'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1660-09-21, new: 1660-09-21<1660-09-21>
chunk_process_datum >>> rel, chunk sdw: 1660-09-21<1660-09-21>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Betazi, Niclas>, 'start_date_written': '1660-09-21<1660-09-21>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 394 -- Betazi, Niclas -- {'related_person': <Person: Betazi, Niclas>, 'start_date_written': '1660-09-21<1660-09-21>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 395 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Betheo
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-06-09/[1677-06-12'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-06-09/[1677-06-12'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-06-09/[1677-06-12'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1677-06-09/[1677-06-12'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1677-06-09/[1677-06-12, new: 1677-06-09/[1677-06-12
chunk_process_datum >>> rel, chunk sdw: 1677-06-09/[1677-06-12
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Betheo, Franziskus>, 'start_date_written': '1677-06-09/[1677-06-12'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1677-06-09/[1677-06-12 ' due to error Could not interpret date.: 
process_chunks >>>  Source Person Relation: 395 -- Betheo, Franziskus -- {'related_person': <Person: Betheo, Franziskus>, 'start_date_written': '1677-06-09/[1677-06-12', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 396 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Betheö de Gerse
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1660-05-02'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1660-05-02'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1660-05-02'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1660-05-02'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1660-05-02, new: 1660-05-02<1660-05-02>
chunk_process_datum >>> rel, chunk sdw: 1660-05-02<1660-05-02>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Betheö de Gerse, Sigismund>, 'start_date_written': '1660-05-02<1660-05-02>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 396 -- Betheö de Gerse, Sigismund -- {'related_person': <Person: Betheö de Gerse, Sigismund>, 'start_date_written': '1660-05-02<1660-05-02>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 397 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Betschowiz
person_process_field_titel >>> t_tit = Baron
person_process_field_titel >>> t_list = ['Baron']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1688-06-08/1688-06-16<1688-06-08 - 1688-06-16>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1688-06-08/1688-06-16<1688-06-08 - 1688-06-16>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1688-06-08/1688-06-16<1688-06-08 - 1688-06-16>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'OKäA'
process_chunks >>> cD ['1688-06-08/1688-06-16<1688-06-08 - 1688-06-16>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1688-06-08 - 1688-06-16>
helper_hsv_post_process_dates >>> new_i_date: <1688-06-08 - 1688-06-16>
helper_hsv_post_process_dates >>> old: 1688-06-08/1688-06-16<1688-06-08 - 1688-06-16>, new: 1688-06-08/1688-06-16<1688-06-08 - 1688-06-16>
chunk_process_datum >>> rel, chunk sdw: 1688-06-08/1688-06-16<1688-06-08 - 1688-06-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Betschowiz, Anton Ehrenreich>, 'start_date_written': '1688-06-08/1688-06-16<1688-06-08 - 1688-06-16>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: Oberstkämmereramt
chunk_process_amt_NEW >>>  Return value of inst2 = Oberstkämmereramt (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Kämmerer']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kämmerer
process_chunks >>>  Source Person Relation: 397 -- Betschowiz, Anton Ehrenreich -- {'related_person': <Person: Betschowiz, Anton Ehrenreich>, 'start_date_written': '1688-06-08/1688-06-16<1688-06-08 - 1688-06-16>', 'related_institution': <Institution: Oberstkämmereramt (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Kämmerer>}

--------- Start of row | 398 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beuemont (Bekomont)
person_process_field_familienname >>> fam1: Beuemont
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 19), match='(Bekomont)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfrau'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfrau'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerfrau'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- , Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- , Hoffräulein)
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = '(Kammer- , Hoffräulein)'
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>'], cF ['Kammerfrau'], cH EM, CA (Kammer- , Hoffräulein)
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beuemont, Catharina>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>'}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- , Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- , Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create relations called for c_F ['Kammerfrau']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Kammerfrau
process_chunks >>>  Source Person Relation: 398 -- Beuemont, Catharina -- {'related_person': <Person: Beuemont, Catharina>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'related_institution': <Institution: (Kammer- , Hoffräulein) (EM (Ksin.))>, 'relation_type': <PersonInstitutionRelation: Kammerfrau>}

--------- Start of row | 399 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Beuer (Beuer von der Binnen, Beyer von der Binne, Beyer von der Binnen, Beyer von der Binnen, Beyer, Peuer, Peyer)
person_process_field_familienname >>> fam1: Beuer
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 114), match='(Beuer von der Binnen, Beyer von der Binne, Beyer>
person_process_field_titel >>> t_tit = von der Binnen
person_process_field_titel >>> t_list = ['von der Binnen']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> In else clause of chunks, chunk = {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>', '1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Rat, ksl.', 'Sekretär'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>', '1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Rat, ksl.', 'Sekretär'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>', '1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Rat, ksl.', 'Sekretär'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>', '1677-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Rat, ksl.', 'Sekretär'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR (Geheime Expedition) / Sekretäre; RHK-LE
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR (Geheime Expedition) 
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  RHK-LE
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = 'GR (Geheime Expedition) '
helper_hsv_match_amt_with_funct >>> Before check for empty amt, c[amt] = ' RHK-LE'
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>', '1677-00-00'], cF ['Rat, ksl.', 'Sekretär'], cH L, CA GR (Geheime Expedition) 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beuer, Christoph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR (Geheime Expedition) 
chunk_process_amt_NEW >>> c_A was: GR (Geheime Expedition)  and amt after matching with amt index is: Geheimer Rat (Behörde)
chunk_process_amt_NEW >>>  Return value of inst2 = Geheimer Rat (Behörde) (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F ['Rat, ksl.', 'Sekretär']
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Rat, ksl.
chunk_create_relations >>> PersonInstitutionRelation created returned: False; rel['relation_type'] = Sekretär
process_chunks >>>  Source Person Relation: 399 -- Beuer, Christoph -- {'related_person': <Person: Beuer, Christoph>, 'related_institution': <Institution: Geheimer Rat (Behörde) (L1 (Ks.))>, 'relation_type': <PersonInstitutionRelation: Sekretär>}
process_chunks >>> cD [], cF [], cH L, CA  RHK-LE
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Beuer, Christoph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  RHK-LE
chunk_process_amt_NEW >>> c_A was:  RHK-LE and amt after matching with amt index is: Reichhofkanzlei-Lateinische Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))
chunk_create_relations >>> create relations called for c_F []
process_chunks >>>  Source Person Relation: 399 -- Beuer, Christoph -- {'related_person': <Person: Beuer, Christoph>, 'related_institution': <Institution: Reichhofkanzlei-Lateinische Expedition (L1 (Ks.))>}
