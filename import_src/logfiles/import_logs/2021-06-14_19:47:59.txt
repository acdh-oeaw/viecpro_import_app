----------------
Import MetaInfo:

username: GPirgie
django_settings: django_settings.viecpro_remote
collection: Sample HSV Import 14-6-21 – Amt/Hofstaat bugfix
spacy_model: using local model
existing_annotations: data/viecpro_HSV_0.jsonl
path_df: data/3_HSV-angepasst-IMPORT.xlsx
path_hofstaat: data/Kürzel-Hofstaate-EX-ACC-2021-06-02.xlsx
path_aemter: data/Kürzel-Ämter-ACC-EX-2021-02-08.xlsx
path_abbreviations: data/EXCEL-ACCESS_Kürzel-Titel-Orden-2021-01-28.xlsx
logger_level: 20
collection_team: ['MRomberg', 'MKaiser', 'CStandhartinger']
use_stopvalues: False
is_test: False
sample_frame: None
without_testing: True
log_msg: Third Test Import; After Bugfix of Ämter / Hofstaat Combination Failed
----------------


get_model >>> Used config cfg class for model configuration
----------------
Using the local model: models/viecpro_ner_hsv_5-21/

NLP-pipeline:
	ner
	use_existing_annotations
	add_brackets
	rename_functions
	remove_names
	date_prepocissions
	create_chunks
----------------


collection_counter = [(0, 'MRomberg (HSV)'), (3414, 'MKaiser (HSV)'), (6828, 'CStandhartinger (HSV)')]

--------- Start of row | 0 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> (?) [Mayr]
person_process_field_familienname >>> fam1: ?
person_process_field_familienname >>> fam2: <re.Match object; span=(2, 8), match='[Mayr]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Kanzleiverwandte
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Kanzlist'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: ?, Georg Ehrenreich>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 1 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> (?)verl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Registrant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Registrant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Registrant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-Expedition
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-Expedition
process_chunks >>> cD [], cF ['Registrant'], cH Dummy Hofstaat, CA NÖ-Expedition
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: ?verl, Johann>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-Expedition
chunk_process_amt_NEW >>> c_A was: NÖ-Expedition and amt after matching with amt index is: NÖ-Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-Expedition (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Registrant']

--------- Start of row | 2 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> (Argumentin?)
person_process_field_familienname >>> fam1: (Argumentin?)
person_process_field_familienname >>> fam2: <re.Match object; span=(0, 13), match='(Argumentin?)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1699-01-01', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Krankenwarterin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1699-01-01', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Krankenwarterin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = AW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: AW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: AW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1699-01-01', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'AW', 'FUNKTION': ['Krankenwarterin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1699-01-01', 'bis 1704<1704-06-30>'], cF ['Krankenwarterin'], cH AW, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1699-01-01, new: 1699-01-01<1699-01-01>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1699-01-01<1699-01-01>
chunk_process_datum >>> rel, chunk edw: 1699-01-01<1699-01-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: (Argumentin?), Anna Susanna>, 'start_date_written': '1699-01-01<1699-01-01>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = AW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: AW (Kgin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (AW (Kgin.))
chunk_create_relations >>> create realtions called for c_F ['Krankenwarterin']

--------- Start of row | 3 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> [Bisegg]
person_process_field_familienname >>> fam1: [Bisegg]
person_process_field_familienname >>> fam2: <re.Match object; span=(0, 8), match='[Bisegg]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Guardadamas'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Guardadamas'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Guardadamas'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Guardadamas'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: [Bisegg], NN>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Guardadamas']

--------- Start of row | 4 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> [Brunnet]
person_process_field_familienname >>> fam1: [Brunnet]
person_process_field_familienname >>> fam2: <re.Match object; span=(0, 9), match='[Brunnet]'>
person_process_field_titel >>> t_tit = Don
person_process_field_titel >>> t_list = ['Don']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdiener'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: [Brunnet], Petro>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 5 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> [Glewelio]
person_process_field_familienname >>> fam1: [Glewelio]
person_process_field_familienname >>> fam2: <re.Match object; span=(0, 10), match='[Glewelio]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener', 'Garderobist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener', 'Garderobist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdiener', 'Garderobist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdiener', 'Garderobist'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: [Glewelio], Adam>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener', 'Garderobist']

--------- Start of row | 6 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> [Gouisconi]
person_process_field_familienname >>> fam1: [Gouisconi]
person_process_field_familienname >>> fam2: <re.Match object; span=(0, 11), match='[Gouisconi]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- , Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- , Hoffräulein)
process_chunks >>> cD [], cF ['Kammerdienerin'], cH EM, CA (Kammer- , Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: [Gouisconi], Cäcilia>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- , Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- , Hoffräulein) and amt after matching with amt index is: (Kammer- , Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- , Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> [Koch]
person_process_field_familienname >>> fam1: [Koch]
person_process_field_familienname >>> fam2: <re.Match object; span=(0, 6), match='[Koch]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammersekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammersekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammersekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammersekretär'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: [Koch], Georg>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammersekretär']

--------- Start of row | 8 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> [Lengler]
person_process_field_familienname >>> fam1: [Lengler]
person_process_field_familienname >>> fam2: <re.Match object; span=(0, 9), match='[Lengler]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammertürhüter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammertürhüter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammertürhüter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammertürhüter'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: [Lengler], Claudius>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammertürhüter']

--------- Start of row | 9 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> [Possio]
person_process_field_familienname >>> fam1: [Possio]
person_process_field_familienname >>> fam2: <re.Match object; span=(0, 8), match='[Possio]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdiener'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: [Possio], Anton Ludwig >}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 10 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> [Salzbrunner?]
person_process_field_familienname >>> fam1: [Salzbrunner?]
person_process_field_familienname >>> fam2: <re.Match object; span=(0, 14), match='[Salzbrunner?]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- , Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- , Hoffräulein)
process_chunks >>> cD [], cF ['Kammerdienerin'], cH EM, CA (Kammer- , Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: [Salzbrunner?], Maria Käterl >}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- , Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- , Hoffräulein) and amt after matching with amt index is: (Kammer- , Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- , Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 11 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> [Tanner]
person_process_field_familienname >>> fam1: [Tanner]
person_process_field_familienname >>> fam2: <re.Match object; span=(0, 8), match='[Tanner]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammertürhüter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammertürhüter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammertürhüter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammertürhüter'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: [Tanner], Georg>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammertürhüter']

--------- Start of row | 12 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aach (Ach, Arch)
person_process_field_familienname >>> fam1: Aach
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 16), match='(Ach, Arch)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1657-07-16', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer', 'Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1657-07-16', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer', 'Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1657-07-16', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer', 'Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1657-07-16', 'bis 1677<1677-06-30>'], cF ['Kämmerer', 'Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1657-07-16, new: 1657-07-16<1657-07-16>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1657-07-16<1657-07-16>
chunk_process_datum >>> rel, chunk edw: 1657-07-16<1657-07-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aach, Prosper >, 'start_date_written': '1657-07-16<1657-07-16>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer', 'Kämmerer, wirkl.']

--------- Start of row | 13 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abel
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Rottmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Rottmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Rottmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Trabantengarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1663-00-00'], cF ['Rottmeister'], cH LW, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663-00-00<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663-00-00<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abel, Johann>, 'start_date_written': '1663-00-00<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (LW)
chunk_create_relations >>> create realtions called for c_F ['Rottmeister']

--------- Start of row | 14 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abel
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-04-01'], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-04-01'], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-04-01'], 'HOFSTAAT': 'J', 'FUNKTION': ['Hartschier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Hartschierenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1701-04-01'], cF ['Hartschier'], cH J, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-04-01, new: 1701-04-01<1701-04-01>
chunk_process_datum >>> rel, chunk sdw: 1701-04-01<1701-04-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abel, Johann Heinrich>, 'start_date_written': '1701-04-01<1701-04-01>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Hartschier']

--------- Start of row | 15 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abele
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Geh. Rat, Sekretär, 1672/73-00-00, Geh. Konferenzrat, 1672/73-00-00, Sekretär, 1672/73-00-00, 1680-00-00, Referendar, 1674/75-00-00, 1677-00-00, Rat, Hof-, 1675/76-00-00, Rat, ksl., 1675/76-00-00, 1677-00-00, Referendar, Konferenzen, 1675/76-00-00, Rat, ksl., Ö Expedition, Sekretär, Konferenzen, 1677-00-00, Hofrat, 1677-00-00, Hofkammerpräsident, 1681, 1683, Geh. Rat, 1685-11-01 / ab)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :15, Geh. Rat , Sekretär (1672/73-00-00) ; Geh. Konferenzrat (1672/73-00-00) ; Sekretär (1672/73-00-00 bis 1680-00-00) ; Referendar (1674/75-00-00 bis 1677-00-00) ; Rat, Hof- (1675/76-00-00) ; Rat, ksl. (1675/76-00-00 bis 1677-00-00) ; Referendar in allen Konferenzen (1675/76-00-00) ; Rat, ksl. der Ö Expedition; Sekretär in allen Konferenzen (1677-00-00) ; Hofrat (1677-00-00) ; Hofkammerpräsident (1681 bis 1683) , (Parvenue) ;Geh. Rat (1685-11-01 / ab dann 2.000 fl Gehalt, [{'start': 0, 'end': 8, 'token_start': 0, 'token_end': 2, 'label': 'FUNKTION'}, {'start': 11, 'end': 19, 'token_start': 4, 'token_end': 4, 'label': 'FUNKTION'}, {'start': 21, 'end': 34, 'token_start': 6, 'token_end': 12, 'label': 'DATUM'}, {'start': 37, 'end': 54, 'token_start': 15, 'token_end': 17, 'label': 'FUNKTION'}, {'start': 56, 'end': 69, 'token_start': 19, 'token_end': 25, 'label': 'DATUM'}, {'start': 72, 'end': 80, 'token_start': 28, 'token_end': 28, 'label': 'FUNKTION'}, {'start': 82, 'end': 95, 'token_start': 30, 'token_end': 36, 'label': 'DATUM'}, {'start': 100, 'end': 110, 'token_start': 38, 'token_end': 42, 'label': 'DATUM'}, {'start': 113, 'end': 123, 'token_start': 45, 'token_end': 45, 'label': 'FUNKTION'}, {'start': 125, 'end': 138, 'token_start': 47, 'token_end': 53, 'label': 'DATUM'}, {'start': 143, 'end': 153, 'token_start': 55, 'token_end': 59, 'label': 'DATUM'}, {'start': 156, 'end': 165, 'token_start': 62, 'token_end': 64, 'label': 'FUNKTION'}, {'start': 167, 'end': 180, 'token_start': 66, 'token_end': 72, 'label': 'DATUM'}, {'start': 183, 'end': 192, 'token_start': 75, 'token_end': 78, 'label': 'FUNKTION'}, {'start': 194, 'end': 207, 'token_start': 80, 'token_end': 86, 'label': 'DATUM'}, {'start': 212, 'end': 222, 'token_start': 88, 'token_end': 92, 'label': 'DATUM'}, {'start': 225, 'end': 235, 'token_start': 95, 'token_end': 95, 'label': 'FUNKTION'}, {'start': 245, 'end': 256, 'token_start': 98, 'token_end': 98, 'label': 'FUNKTION'}, {'start': 258, 'end': 271, 'token_start': 100, 'token_end': 106, 'label': 'DATUM'}, {'start': 274, 'end': 283, 'token_start': 109, 'token_end': 112, 'label': 'FUNKTION'}, {'start': 288, 'end': 300, 'token_start': 114, 'token_end': 115, 'label': 'AMT'}, {'start': 302, 'end': 310, 'token_start': 117, 'token_end': 117, 'label': 'FUNKTION'}, {'start': 333, 'end': 343, 'token_start': 122, 'token_end': 126, 'label': 'DATUM'}, {'start': 346, 'end': 352, 'token_start': 129, 'token_end': 129, 'label': 'FUNKTION'}, {'start': 354, 'end': 364, 'token_start': 131, 'token_end': 135, 'label': 'DATUM'}, {'start': 367, 'end': 385, 'token_start': 138, 'token_end': 138, 'label': 'FUNKTION'}, {'start': 387, 'end': 391, 'token_start': 140, 'token_end': 140, 'label': 'DATUM'}, {'start': 396, 'end': 400, 'token_start': 142, 'token_end': 142, 'label': 'DATUM'}, {'start': 404, 'end': 422, 'token_start': 146, 'token_end': 148, 'label': 'FUNKTION'}, {'start': 424, 'end': 439, 'token_start': 150, 'token_end': 156, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Geh. Rat, Sekretär, 1672/73-00-00, Geh. Konferenzrat, 1672/73-00-00, Sekretär, 1672/73-00-00, 1680-00-00, Referendar, 1674/75-00-00, 1677-00-00, Rat, Hof-, 1675/76-00-00, Rat, ksl., 1675/76-00-00, 1677-00-00, Referendar, Konferenzen, 1675/76-00-00, Rat, ksl., Ö Expedition, Sekretär, 1677-00-00, Hofrat, 1677-00-00, Hofkammerpräsident, 1681, 1683, Parvenue) ;, . Rat (1685-11-]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Geh. Rat, Sekretär, 1672/73-00-00, Geh. Konferenzrat, 1672/73-00-00, Sekretär, 1672/73-00-00, 1680-00-00, Referendar, 1674/75-00-00, 1677-00-00, Rat, Hof-, 1675/76-00-00, Rat, ksl., 1675/76-00-00, 1677-00-00, Referendar, Konferenzen, 1675/76-00-00, Rat, ksl., Ö Expedition, Sekretär, 1677-00-00, Hofrat, 1677-00-00, Hofkammerpräsident, 1681, 1683, Parvenue) ;, . Rat (1685-11-)
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = Ö Expedition
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(12) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'Sekretär'], 'AMT': None}, {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Konferenzrat'], 'AMT': None}, {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1680<1680-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}, {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Referendar'], 'AMT': None}, {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat'], 'AMT': None}, {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Rat, ksl.'], 'AMT': None}, {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Referendar', 'Konferenzen'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Rat, ksl.'], 'AMT': 'Ö Expedition'}, {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}, {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat'], 'AMT': None}, {'DATUM': ['1681', 'bis 1683<1683-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerpräsident'], 'AMT': None}, {'DATUM': ['. Rat (1685-11-'], 'HOFSTAAT': None, 'FUNKTION': ['Parvenue) ;'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'Sekretär'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Konferenzrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1680<1680-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Referendar'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	5: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Rat, ksl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	6: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Referendar', 'Konferenzen'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	7: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Rat, ksl.'], 'AMT': 'Ö Expedition'}
NLP COMPONENT >>> CreateChunks.py >>> 	8: chunk: {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	9: chunk: {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	10: chunk: {'DATUM': ['1681', 'bis 1683<1683-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerpräsident'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	11: chunk: {'DATUM': ['. Rat (1685-11-'], 'HOFSTAAT': None, 'FUNKTION': ['Parvenue) ;'], 'AMT': None}
process_chunks >>> len_doc_chunks: 12, len Ämter-Spalte: 6
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'Sekretär'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Konferenzrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1680<1680-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Referendar'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Rat, ksl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Referendar', 'Konferenzen'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Rat, ksl.'], 'AMT': 'Ö Expedition'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1681', 'bis 1683<1683-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerpräsident'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['. Rat (1685-11-'], 'HOFSTAAT': 'L', 'FUNKTION': ['Parvenue) ;'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GK; Ö-HKz; GR / Sekretarien; HK; Ö Expedition; 
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>'], cF ['Geh. Rat', 'Sekretär'], cH L, CA GK
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GK
chunk_process_amt_NEW >>> c_A was: GK and amt after matching with amt index is: GK
chunk_process_amt_NEW >>>  Return value of inst2 = GK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'Sekretär']
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>'], cF ['Geh. Konferenzrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Konferenzrat']
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1680<1680-06-30>'], cF ['Sekretär'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1680-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1680-06-30>
helper_hsv_post_process_dates >>> old: bis 1680<1680-06-30>, new: bis 1680<1680-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1680<1680-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], cF ['Referendar'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk edw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Referendar']
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>'], cF ['Hofrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofrat']
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Rat, ksl.'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Rat, ksl.']
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>'], cF ['Referendar', 'Konferenzen'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Referendar', 'Konferenzen']
process_chunks >>> cD [], cF ['Rat, ksl.'], cH L, CA Ö Expedition
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Ö Expedition
chunk_process_amt_NEW >>> c_A was: Ö Expedition and amt after matching with amt index is: Ö Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = Ö Expedition (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Rat, ksl.']
process_chunks >>> cD ['1677-00-00'], cF ['Sekretär'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677-00-00<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677-00-00<1677-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1677-00-00<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']
process_chunks >>> cD ['1677-00-00'], cF ['Hofrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677-00-00<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677-00-00<1677-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1677-00-00<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofrat']
process_chunks >>> cD ['1681', 'bis 1683<1683-06-30>'], cF ['Hofkammerpräsident'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1681, new: 1681<1681>
helper_hsv_post_process_dates >>> inner date: <1683-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1683-06-30>
helper_hsv_post_process_dates >>> old: bis 1683<1683-06-30>, new: bis 1683<1683-06-30>
chunk_process_datum >>> rel, chunk sdw: 1681<1681>
chunk_process_datum >>> rel, chunk edw: 1681<1681>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '1681<1681>', 'end_date_written': 'bis 1683<1683-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerpräsident']
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1681<1681> ' due to error ('Invalid iso date: ', '1681'): 
process_chunks >>> cD ['. Rat (1685-11-'], cF ['Parvenue) ;'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: . Rat (1685-11-, new: . Rat (1685-11-
chunk_process_datum >>> rel, chunk sdw: . Rat (1685-11-
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Christoph>, 'start_date_written': '. Rat (1685-11-'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Parvenue) ;']
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' .rat(1685-11- ' due to error Could not interpret date.: 

--------- Start of row | 16 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abele
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR  /  Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR  
process_chunks >>> cD ['1677-00-00'], cF ['Sekretär'], cH L, CA HKR  
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677-00-00<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677-00-00<1677-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele, Ferdinand>, 'start_date_written': '1677-00-00<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR  
chunk_process_amt_NEW >>> c_A was: HKR   and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 17 | -------------- 
replacer >>> r_fun: replaced ,g with: , g
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abele von , zu Lilienberg
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1657-00-00', '1665-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Beamter'], 'AMT': None}, {'DATUM': ['1681-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerpräsident'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1657-00-00', '1665-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Beamter'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1681-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerpräsident'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1657-00-00', '1665-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär', 'Beamter'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1681-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerpräsident'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK; Ö-HKz
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  Ö-HKz
process_chunks >>> cD ['1657-00-00', '1665-00-00'], cF ['Sekretär', 'Beamter'], cH L, CA HK
helper_hsv_post_process_dates >>> old: 1657-00-00, new: 1657-00-00<1657-06-30>
helper_hsv_post_process_dates >>> old: 1665-00-00, new: 1665-00-00<1665-06-30>
chunk_process_datum >>> rel, chunk sdw: 1657-00-00<1657-06-30>
chunk_process_datum >>> rel, chunk edw: 1657-00-00<1657-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele von , zu Lilienberg, Christoph Ignaz>, 'start_date_written': '1657-00-00<1657-06-30>', 'end_date_written': '1665-00-00<1665-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär', 'Beamter']
process_chunks >>> cD ['1681-00-00'], cF ['Hofkammerpräsident'], cH L, CA  Ö-HKz
helper_hsv_post_process_dates >>> old: 1681-00-00, new: 1681-00-00<1681-06-30>
chunk_process_datum >>> rel, chunk sdw: 1681-00-00<1681-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele von , zu Lilienberg, Christoph Ignaz>, 'start_date_written': '1681-00-00<1681-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  Ö-HKz
chunk_process_amt_NEW >>> c_A was:  Ö-HKz and amt after matching with amt index is: Ö-HKz
chunk_process_amt_NEW >>>  Return value of inst2 = Ö-HKz (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerpräsident']

--------- Start of row | 18 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abend
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Instrumentalist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Instrumentalist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Instrumentalist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofmusikanten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD ['1704-00-00'], cF ['Instrumentalist'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abend, Andreas>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Instrumentalist']

--------- Start of row | 19 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abensberg-Traun
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = VodM.
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Oberkommissar'], 'AMT': 'VodM.'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Oberkommissar'], 'AMT': 'VodM.'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Oberkommissar'], 'AMT': 'VodM.'}
helper_hsv_match_amt_with_funct >>> r_A = NÖ Landschaftskommissariat
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = VodM.
process_chunks >>> cD ['1704-00-00'], cF ['Oberkommissar'], cH Dummy Hofstaat, CA VodM.
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Franz Anton>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: VodM.
chunk_process_amt_NEW >>> c_A was: VodM. and amt after matching with amt index is: VodM.
chunk_process_amt_NEW >>>  Return value of inst2 = VodM. (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Oberkommissar']

--------- Start of row | 20 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abensberg-Traun (Abensperg-Traun, Abensperg , Traun)
person_process_field_familienname >>> fam1: Abensberg-Traun
person_process_field_familienname >>> fam2: <re.Match object; span=(16, 52), match='(Abensperg-Traun, Abensperg , Traun)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Landmarschall, 1658-09-30 / 1698-00-00, Kämmerer, 1669-03-26 / 1701-00-00 / 1704-00-00, OKäA, Geh. Rat, ksl., Landmarschall, Ö, 1698-00-00, Geh. Rat, 1701-00-00 / 1704-00-00, GR, Landmarschall, Generallandoberst, NÖ, 1701-00-00, NÖ-R, Geh. Konferenzrat, 1701-00-00 / 1704-00-00, GK, Generallandoberst, 1701-00-00, NÖ, Generallandoberst, 1704-00-00, Ö-udE, Landmarschall, Generallandoberst, Ö-udE., 1704-00-00, NÖ-LG)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :20, Landmarschall (1658-09-30 / 1698-00-00) \ Empfang des Kaisers vor Wien \ NÖ; Kämmerer (1669-03-26 / 1701-00-00 / 1704-00-00) \ Eid \ OKäA; Geh. Rat, ksl., Landmarschall in Ö (1698-00-00) \ Liste RGV; Geh. Rat (1701-00-00 / 1704-00-00) \ GR; Landmarschall , Generallandoberst NÖ (1701-00-00) \ NÖ-R; Geh. Konferenzrat (1701-00-00 / 1704-00-00) GK; Generallandoberst (1701-00-00) \ NÖ; Generallandoberst (1704-00-00) \ Ö-udE; Landmarschall , Generallandoberst in Ö-udE. (1704-00-00) \ NÖ-LG, [{'start': 0, 'end': 13, 'token_start': 0, 'token_end': 0, 'label': 'FUNKTION'}, {'start': 15, 'end': 38, 'token_start': 2, 'token_end': 12, 'label': 'DATUM'}, {'start': 77, 'end': 85, 'token_start': 23, 'token_end': 23, 'label': 'FUNKTION'}, {'start': 87, 'end': 123, 'token_start': 25, 'token_end': 41, 'label': 'DATUM'}, {'start': 133, 'end': 137, 'token_start': 46, 'token_end': 46, 'label': 'AMT'}, {'start': 139, 'end': 147, 'token_start': 48, 'token_end': 50, 'label': 'FUNKTION'}, {'start': 155, 'end': 168, 'token_start': 55, 'token_end': 55, 'label': 'FUNKTION'}, {'start': 172, 'end': 173, 'token_start': 57, 'token_end': 57, 'label': 'AMT'}, {'start': 175, 'end': 185, 'token_start': 59, 'token_end': 63, 'label': 'DATUM'}, {'start': 200, 'end': 208, 'token_start': 69, 'token_end': 71, 'label': 'FUNKTION'}, {'start': 210, 'end': 233, 'token_start': 73, 'token_end': 83, 'label': 'DATUM'}, {'start': 237, 'end': 239, 'token_start': 86, 'token_end': 86, 'label': 'FUNKTION'}, {'start': 241, 'end': 254, 'token_start': 88, 'token_end': 88, 'label': 'FUNKTION'}, {'start': 257, 'end': 274, 'token_start': 90, 'token_end': 90, 'label': 'FUNKTION'}, {'start': 275, 'end': 277, 'token_start': 91, 'token_end': 91, 'label': 'AMT'}, {'start': 279, 'end': 289, 'token_start': 93, 'token_end': 97, 'label': 'DATUM'}, {'start': 293, 'end': 297, 'token_start': 100, 'token_end': 100, 'label': 'AMT'}, {'start': 299, 'end': 316, 'token_start': 102, 'token_end': 104, 'label': 'FUNKTION'}, {'start': 318, 'end': 341, 'token_start': 106, 'token_end': 116, 'label': 'DATUM'}, {'start': 343, 'end': 345, 'token_start': 118, 'token_end': 118, 'label': 'AMT'}, {'start': 347, 'end': 364, 'token_start': 120, 'token_end': 120, 'label': 'FUNKTION'}, {'start': 366, 'end': 376, 'token_start': 122, 'token_end': 126, 'label': 'DATUM'}, {'start': 380, 'end': 382, 'token_start': 129, 'token_end': 129, 'label': 'AMT'}, {'start': 384, 'end': 401, 'token_start': 131, 'token_end': 131, 'label': 'FUNKTION'}, {'start': 403, 'end': 413, 'token_start': 133, 'token_end': 137, 'label': 'DATUM'}, {'start': 417, 'end': 422, 'token_start': 140, 'token_end': 140, 'label': 'AMT'}, {'start': 424, 'end': 437, 'token_start': 142, 'token_end': 142, 'label': 'FUNKTION'}, {'start': 440, 'end': 457, 'token_start': 144, 'token_end': 144, 'label': 'FUNKTION'}, {'start': 461, 'end': 467, 'token_start': 146, 'token_end': 146, 'label': 'AMT'}, {'start': 469, 'end': 479, 'token_start': 148, 'token_end': 152, 'label': 'DATUM'}, {'start': 483, 'end': 488, 'token_start': 155, 'token_end': 155, 'label': 'AMT'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Landmarschall, 1658-09-30 / 1698-00-00, Kämmerer, 1669-03-26 / 1701-00-00 / 1704-00-00, OKäA, Geh. Rat, Landmarschall, Ö, 1698-00-00, Geh. Rat, 1701-00-00 / 1704-00-00, GR, Landmarschall, Generallandoberst, NÖ, 1701-00-00, NÖ-R, Geh. Konferenzrat, 1701-00-00 / 1704-00-00, GK, Generallandoberst, 1701-00-00, NÖ, Generallandoberst, 1704-00-00, Ö-udE, Landmarschall, Generallandoberst, Ö-udE., 1704-00-00, NÖ-LG]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Landmarschall, 1658-09-30 / 1698-00-00, Kämmerer, 1669-03-26 / 1701-00-00 / 1704-00-00, OKäA, Geh. Rat, Landmarschall, Ö, 1698-00-00, Geh. Rat, 1701-00-00 / 1704-00-00, GR, Landmarschall, Generallandoberst, NÖ, 1701-00-00, NÖ-R, Geh. Konferenzrat, 1701-00-00 / 1704-00-00, GK, Generallandoberst, 1701-00-00, NÖ, Generallandoberst, 1704-00-00, Ö-udE, Landmarschall, Generallandoberst, Ö-udE., 1704-00-00, NÖ-LG)
NLP COMPONENT >>> RenameFunctions.py >>> removing Ö from ents
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = OKäA
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = NÖ
NLP COMPONENT >>> CreateChunks.py >>> In else clause of chunks, chunk = {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'NÖ'}
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = GK
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = NÖ
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = Ö-udE
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = Ö-udE.
NLP COMPONENT >>> CreateChunks.py >>> In else clause of chunks, chunk = {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'Ö-udE.'}
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(11) = [{'DATUM': ['1658-09-30 / 1698-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}, {'DATUM': ['1669-03-26 / 1701-00-00 / 1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': 'OKäA'}, {'DATUM': ['1698-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'Landmarschall'], 'AMT': None}, {'DATUM': ['1701-00-00 / 1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'GR'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'NÖ'}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}, {'DATUM': ['1701-00-00 / 1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Konferenzrat'], 'AMT': 'GK'}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Generallandoberst'], 'AMT': 'NÖ'}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Generallandoberst'], 'AMT': 'Ö-udE'}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'Ö-udE.'}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1658-09-30 / 1698-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1669-03-26 / 1701-00-00 / 1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': 'OKäA'}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1698-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'Landmarschall'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1701-00-00 / 1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'GR'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'NÖ'}
NLP COMPONENT >>> CreateChunks.py >>> 	5: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	6: chunk: {'DATUM': ['1701-00-00 / 1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Konferenzrat'], 'AMT': 'GK'}
NLP COMPONENT >>> CreateChunks.py >>> 	7: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Generallandoberst'], 'AMT': 'NÖ'}
NLP COMPONENT >>> CreateChunks.py >>> 	8: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Generallandoberst'], 'AMT': 'Ö-udE'}
NLP COMPONENT >>> CreateChunks.py >>> 	9: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'Ö-udE.'}
NLP COMPONENT >>> CreateChunks.py >>> 	10: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 11, len Ämter-Spalte: 8
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1658-09-30 / 1698-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-03-26 / 1701-00-00 / 1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': 'OKäA'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1698-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'Landmarschall'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00 / 1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'GR'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'NÖ'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00 / 1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Konferenzrat'], 'AMT': 'GK'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Generallandoberst'], 'AMT': 'NÖ'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Generallandoberst'], 'AMT': 'Ö-udE'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landmarschall', 'Generallandoberst'], 'AMT': 'Ö-udE.'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR; KR; NÖ; NÖ-LG; NÖ-R; OKäA; Ö-udE.;
process_chunks >>> cD ['1658-09-30 / 1698-00-00'], cF ['Landmarschall'], cH L, CA GR
helper_hsv_post_process_dates >>> old: 1658-09-30 / 1698-00-00, new: 1658-09-30 / 1698-00-00
chunk_process_datum >>> rel, chunk sdw: 1658-09-30 / 1698-00-00
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1658-09-30 / 1698-00-00'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1658-09-30/1698-00-00 ' due to error Could not interpret date.: 
process_chunks >>> cD ['1669-03-26 / 1701-00-00 / 1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1669-03-26 / 1701-00-00 / 1704-00-00, new: 1669-03-26 / 1701-00-00 / 1704-00-00
chunk_process_datum >>> rel, chunk sdw: 1669-03-26 / 1701-00-00 / 1704-00-00
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1669-03-26 / 1701-00-00 / 1704-00-00'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1669-03-26/1701-00-00/1704-00-00 ' due to error Could not interpret date.: 
process_chunks >>> cD ['1698-00-00'], cF ['Geh. Rat', 'Landmarschall'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1698-00-00, new: 1698-00-00<1698-06-30>
chunk_process_datum >>> rel, chunk sdw: 1698-00-00<1698-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1698-00-00<1698-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'Landmarschall']
process_chunks >>> cD ['1701-00-00 / 1704-00-00'], cF ['Geh. Rat', 'GR'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00 / 1704-00-00, new: 1701-00-00 / 1704-00-00
chunk_process_datum >>> rel, chunk sdw: 1701-00-00 / 1704-00-00
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701-00-00 / 1704-00-00'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'GR']
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1701-00-00/1704-00-00 ' due to error Could not interpret date.: 
process_chunks >>> cD ['1701-00-00'], cF ['Landmarschall', 'Generallandoberst'], cH L, CA NÖ
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701-00-00<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ
chunk_process_amt_NEW >>> c_A was: NÖ and amt after matching with amt index is: NÖ
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landmarschall', 'Generallandoberst']
process_chunks >>> cD [], cF [], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F []
process_chunks >>> cD ['1701-00-00 / 1704-00-00'], cF ['Geh. Konferenzrat'], cH L, CA GK
helper_hsv_post_process_dates >>> old: 1701-00-00 / 1704-00-00, new: 1701-00-00 / 1704-00-00
chunk_process_datum >>> rel, chunk sdw: 1701-00-00 / 1704-00-00
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701-00-00 / 1704-00-00'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GK
chunk_process_amt_NEW >>> c_A was: GK and amt after matching with amt index is: GK
chunk_process_amt_NEW >>>  Return value of inst2 = GK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Konferenzrat']
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1701-00-00/1704-00-00 ' due to error Could not interpret date.: 
process_chunks >>> cD ['1701-00-00'], cF ['Generallandoberst'], cH L, CA NÖ
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701-00-00<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ
chunk_process_amt_NEW >>> c_A was: NÖ and amt after matching with amt index is: NÖ
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Generallandoberst']
process_chunks >>> cD ['1704-00-00'], cF ['Generallandoberst'], cH L, CA Ö-udE
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Ö-udE
chunk_process_amt_NEW >>> c_A was: Ö-udE and amt after matching with amt index is: Ö-udE
chunk_process_amt_NEW >>>  Return value of inst2 = Ö-udE (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Generallandoberst']
process_chunks >>> cD ['1704-00-00'], cF ['Landmarschall', 'Generallandoberst'], cH L, CA Ö-udE.
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Ö-udE.
chunk_process_amt_NEW >>> c_A was: Ö-udE. and amt after matching with amt index is: Ö-udE.
chunk_process_amt_NEW >>>  Return value of inst2 = Ö-udE. (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landmarschall', 'Generallandoberst']
process_chunks >>> cD [], cF [], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F []

--------- Start of row | 21 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abensperg , Traun
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-10-10'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-10-10'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-10-10'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1666-10-10'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1666-10-10, new: 1666-10-10<1666-10-10>
chunk_process_datum >>> rel, chunk sdw: 1666-10-10<1666-10-10>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensperg , Traun, Ernst Ferdinand>, 'start_date_written': '1666-10-10<1666-10-10>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 22 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abensperg , Traun
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-09-03'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-09-03'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-09-03'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1666-09-03'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1666-09-03, new: 1666-09-03<1666-09-03>
chunk_process_datum >>> rel, chunk sdw: 1666-09-03<1666-09-03>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensperg , Traun, Johann Wilhelm>, 'start_date_written': '1666-09-03<1666-09-03>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 23 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abensperg-Traun
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1657-06-19'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1657-06-19'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1657-06-19'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD ['1657-06-19'], cF ['Geh. Rat'], cH L, CA GR
helper_hsv_post_process_dates >>> old: 1657-06-19, new: 1657-06-19<1657-06-19>
chunk_process_datum >>> rel, chunk sdw: 1657-06-19<1657-06-19>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensperg-Traun, Ernst>, 'start_date_written': '1657-06-19<1657-06-19>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 24 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ableitner (Ableutner)
person_process_field_familienname >>> fam1: Ableitner
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 21), match='(Ableutner)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Kanzlist'], cH L, CA HK 
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ableitner, Ferdinand>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 25 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Abt
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1694-10-01', '1701-03-31'], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1694-10-01', '1701-03-31'], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1694-10-01', '1701-03-31'], 'HOFSTAAT': 'J', 'FUNKTION': ['Hartschier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Hartschierenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1694-10-01', '1701-03-31'], cF ['Hartschier'], cH J, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1694-10-01, new: 1694-10-01<1694-10-01>
helper_hsv_post_process_dates >>> old: 1701-03-31, new: 1701-03-31<1701-03-31>
chunk_process_datum >>> rel, chunk sdw: 1694-10-01<1694-10-01>
chunk_process_datum >>> rel, chunk edw: 1694-10-01<1694-10-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abt, Dionisius>, 'start_date_written': '1694-10-01<1694-10-01>', 'end_date_written': '1701-03-31<1701-03-31>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Hartschier']

--------- Start of row | 26 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Achat (Achaz, Nachod)
person_process_field_familienname >>> fam1: Achat
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 21), match='(Achaz, Nachod)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk edw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Achat, Ferdinand Leopold>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 27 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Achendorffer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'J', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
process_chunks >>> cD ['1704-00-00'], cF [], cH J, CA OMeA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Achendorffer, Jakob>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F []

--------- Start of row | 28 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Achimis/Attems?
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Achimis/Attems?, Ignaz>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 29 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adalbert (Adelberth, Adelwerth, Adlberth, Adolbert, Adolberth)
person_process_field_familienname >>> fam1: Adalbert
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 62), match='(Adelberth, Adelwerth, Adlberth, Adolbert, Adolbe>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Konzipisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD ['1674-00-00', 'bis 1677<1677-06-30>'], cF ['Konzipist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674-00-00<1674-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674-00-00<1674-06-30>
chunk_process_datum >>> rel, chunk edw: 1674-00-00<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adalbert, Johann>, 'start_date_written': '1674-00-00<1674-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Konzipist']

--------- Start of row | 30 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adalbert (Adelberth)
person_process_field_familienname >>> fam1: Adalbert
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 20), match='(Adelberth)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Konzipisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Konzipist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adalbert, Adam>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Konzipist']

--------- Start of row | 31 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adam
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sattelknecht'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sattelknecht'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'J', 'FUNKTION': ['Sattelknecht'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
process_chunks >>> cD ['1704-00-00'], cF ['Sattelknecht'], cH J, CA OStA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adam, Johann>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Sattelknecht']

--------- Start of row | 32 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adamo
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00'], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1678-00-00'], cF ['Kammerdiener'], cH EM, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678-00-00<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678-00-00<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adamo, NN>, 'start_date_written': '1678-00-00<1678-06-30>'}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 33 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adimis (Attems)
person_process_field_familienname >>> fam1: Adimis
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Attems)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1686-11-15', 'bis 1687-10-27<1687-10-27>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1686-11-15', 'bis 1687-10-27<1687-10-27>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1686-11-15', 'bis 1687-10-27<1687-10-27>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1686-11-15', 'bis 1687-10-27<1687-10-27>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1686-11-15, new: 1686-11-15<1686-11-15>
helper_hsv_post_process_dates >>> inner date: <1687-10-27>
helper_hsv_post_process_dates >>> new_i_date: <1687-10-27>
helper_hsv_post_process_dates >>> old: bis 1687-10-27<1687-10-27>, new: bis 1687-10-27<1687-10-27>
chunk_process_datum >>> rel, chunk sdw: 1686-11-15<1686-11-15>
chunk_process_datum >>> rel, chunk edw: 1686-11-15<1686-11-15>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adimis, Franz Andre>, 'start_date_written': '1686-11-15<1686-11-15>', 'end_date_written': 'bis 1687-10-27<1687-10-27>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 34 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adimus (Attems)
person_process_field_familienname >>> fam1: Adimus
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Attems)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1660-09-04'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1660-09-04'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1660-09-04'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1660-09-04'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1660-09-04, new: 1660-09-04<1660-09-04>
chunk_process_datum >>> rel, chunk sdw: 1660-09-04<1660-09-04>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adimus, Hanns Jacob>, 'start_date_written': '1660-09-04<1660-09-04>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 35 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adler
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
process_chunks >>> cD ['1674-00-00'], cF ['Reichshofrat'], cH L, CA RHR 
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674-00-00<1674-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674-00-00<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adler, Franz Friedrich>, 'start_date_written': '1674-00-00<1674-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: RHR
chunk_process_amt_NEW >>>  Return value of inst2 = RHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Reichshofrat']

--------- Start of row | 36 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Adler
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> RenameFunctions.py >>> removing ? from ents
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF [], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adler, Wenzel Wallkhaun?>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F []

--------- Start of row | 37 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aegani
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkaplan'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofkapelle
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD ['1669-00-00'], cF ['Hofkaplan'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669-00-00<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669-00-00<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aegani, NN>, 'start_date_written': '1669-00-00<1669-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkaplan']

--------- Start of row | 38 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aehlen?
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1676-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676-00-00<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676-00-00<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aehlen?, Ferdinand>, 'start_date_written': '1676-00-00<1676-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 39 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Agradin (Agredin)
person_process_field_familienname >>> fam1: Agradin
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='(Agredin)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Raitrat, Buchhalter/Raitrat, Expeditor, 1672/73-00-00, 1677-00-00)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :39, Raitrat / Buchhalter/Raitrat(?) / Expeditor (1672/73-00-00 bis 1677-00-00), [{'start': 0, 'end': 7, 'token_start': 0, 'token_end': 0, 'label': 'FUNKTION'}, {'start': 10, 'end': 28, 'token_start': 2, 'token_end': 4, 'label': 'FUNKTION'}, {'start': 34, 'end': 43, 'token_start': 9, 'token_end': 9, 'label': 'FUNKTION'}, {'start': 45, 'end': 58, 'token_start': 11, 'token_end': 17, 'label': 'DATUM'}, {'start': 63, 'end': 73, 'token_start': 19, 'token_end': 23, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Raitrat, Buchhalter/Raitrat, Expeditor, 1672/73-00-00, 1677-00-00]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Raitrat, Buchhalter/Raitrat, Expeditor, 1672/73-00-00, 1677-00-00)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat', 'Buchhalter/Raitrat', 'Expeditor'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat', 'Buchhalter/Raitrat', 'Expeditor'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitrat', 'Buchhalter/Raitrat', 'Expeditor'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Raitrat', 'Buchhalter/Raitrat', 'Expeditor'], cH L, CA HK-NÖ-BH
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Agradin, Christoph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitrat', 'Buchhalter/Raitrat', 'Expeditor']

--------- Start of row | 40 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ahamer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Leiblakai'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Leiblakai'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Leiblakai'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Lakai, Leib-en
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA 
process_chunks >>> cD ['1663-00-00'], cF ['Leiblakai'], cH LW, CA OStA 
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663-00-00<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663-00-00<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ahamer, David>, 'start_date_written': '1663-00-00<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: OStA 
chunk_process_amt_NEW >>> c_A was: OStA  and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (LW)
chunk_create_relations >>> create realtions called for c_F ['Leiblakai']

--------- Start of row | 41 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ahlen, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Ahlen, von END INPUT, ROW:41
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammermaler'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammermaler'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kammermaler'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1704-00-00'], cF ['Kammermaler'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ahlen, von, Valbertus>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kammermaler']

--------- Start of row | 42 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aibling, von (Aybling, von)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aibling, von (Aybling, von) END INPUT, ROW:42
person_process_field_familienname >>> fam1: Aibling, von
person_process_field_familienname >>> fam2: <re.Match object; span=(13, 27), match='(Aybling, von)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['? 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Registrant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['? 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Registrant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['? 1701<1701-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Registrant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ / Registratur
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ 
process_chunks >>> cD ['? 1701<1701-06-30>'], cF ['Registrant'], cH Dummy Hofstaat, CA NÖ 
helper_hsv_post_process_dates >>> inner date: <1701-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1701-06-30>
helper_hsv_post_process_dates >>> old: ? 1701<1701-06-30>, new: ? 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: ? 1701<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aibling, von, Nikolaus Eberhard>, 'start_date_written': '? 1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ 
chunk_process_amt_NEW >>> c_A was: NÖ  and amt after matching with amt index is: NÖ
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Registrant']

--------- Start of row | 43 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aich, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aich, von END INPUT, ROW:43
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landschreiber'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD ['1678-00-00'], cF ['Landschreiber'], cH L, CA NÖ-LG
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678-00-00<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678-00-00<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aich, von, Peter>, 'start_date_written': '1678-00-00<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landschreiber']

--------- Start of row | 44 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichberger
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfrau'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfrau'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = MMJ
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMJ
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMJ
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'MMJ', 'FUNKTION': ['Kammerfrau'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1704-00-00'], cF ['Kammerfrau'], cH MMJ, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichberger, Eva Christina>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = MMJ
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMJ
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (MMJ)
chunk_create_relations >>> create realtions called for c_F ['Kammerfrau']

--------- Start of row | 45 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichberger (Aychberger)
person_process_field_familienname >>> fam1: Aichberger
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(Aychberger)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1678-00-00', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Untermarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1678-00-00', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Untermarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Untermarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD ['1678-00-00', 'bis 1685-11-01<1685-11-01>'], cF ['Untermarschall'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678-00-00<1678-06-30>
helper_hsv_post_process_dates >>> inner date: <1685-11-01>
helper_hsv_post_process_dates >>> new_i_date: <1685-11-01>
helper_hsv_post_process_dates >>> old: bis 1685-11-01<1685-11-01>, new: bis 1685-11-01<1685-11-01>
chunk_process_datum >>> rel, chunk sdw: 1678-00-00<1678-06-30>
chunk_process_datum >>> rel, chunk edw: 1678-00-00<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichberger, Johann Magnus>, 'start_date_written': '1678-00-00<1678-06-30>', 'end_date_written': 'bis 1685-11-01<1685-11-01>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Untermarschall']

--------- Start of row | 46 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichbichl, von (Aichbichel, Aichbüchel, Aichbüchl, Aichbühl, Aichpichl, Aichpüchel)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aichbichl, von (Aichbichel, Aichbüchel, Aichbüchl, Aichbühl, Aichpichl, Aichpüchel) END INPUT, ROW:46
person_process_field_familienname >>> fam1: Aichbichl, von
person_process_field_familienname >>> fam2: <re.Match object; span=(15, 83), match='(Aichbichel, Aichbüchel, Aichbüchl, Aichbühl, Aic>
person_process_field_titel >>> t_tit = Freiherr 1685-12-10Graf 1705-01-31
person_process_field_titel >>> t_list = ['Freiherr 1685-12-10Graf 1705-01-31']
helper_hsv_post_process_dates >>> old: 1685-12-10, new: 1685-12-10<1685-12-10>
create_title >>> tit_res: Freiherr 1685-12-10Graf 1705-01-31, date after processing: 1685-12-10<1685-12-10>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Beisitzer, Landrecht, 1672/73-00-00, Fürschneider, 1679-08-23, Fürschneider, gewes.(1680-09-25, Mundschenk, Hofkammerrat, 1683-09-29, Hofkammerrat, 1701-00-00, Hofkammerrat, 1704-00-00, Landrechtsbeisitzer, Mundschenk, 1679-08-16, Mundschenk, 1680-09-25, NÖ Landrechtsbeisitzer, 1671-04-06, NÖ Salzamtmann, 1681-00-00, Regierungsrat, 1675-00-00, Regierungsrat, 1669-00-00, Regimentsrat, 1674-00-00, 1677-00-00, Regimentsrat, 1678-00-00, Regimentsrat, 1676-00-00, Truchseß, 1672-00-00, Truchseß)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :46, Beisitzer, Landrecht, Ritterstand (1672/73-00-00) \ 150 fl Gehalt; Fürschneider (1679-08-23) \ Eid; Fürschneider, gewes.(1680-09-25) \ Eid als Mundschenk \ Linz; Hofkammerrat 1683-09-29; Hofkammerrat, Grafen- , Herrenstand (1701-00-00) ; Hofkammerrat, Herrenstand (1704-00-00) ; Landrechtsbeisitzer, Ritterstand \ 150 fl Gehalt; Mundschenk (1679-08-16) ; Mundschenk (1680-09-25) \ Eid \ Linz; NÖ Landrechtsbeisitzer (1671-04-06) ; NÖ Salzamtmann (1681-00-00) ; Regierungsrat (1675-00-00) ; Regierungsrat, Herrenbank (1669-00-00) ; Regimentsrat (1674-00-00 bis 1677-00-00 ) ; Regimentsrat, Ritterbank (1678-00-00) ; Regimentsrat, Ritterstand (1676-00-00) ; Truchseß (1672-00-00) \ Eid; Truchseß, gewes. \ Eid als Fürschneider; , [{'start': 0, 'end': 20, 'token_start': 0, 'token_end': 2, 'label': 'FUNKTION'}, {'start': 35, 'end': 48, 'token_start': 6, 'token_end': 12, 'label': 'DATUM'}, {'start': 67, 'end': 79, 'token_start': 19, 'token_end': 19, 'label': 'FUNKTION'}, {'start': 81, 'end': 91, 'token_start': 21, 'token_end': 25, 'label': 'DATUM'}, {'start': 100, 'end': 112, 'token_start': 30, 'token_end': 30, 'label': 'FUNKTION'}, {'start': 114, 'end': 131, 'token_start': 32, 'token_end': 36, 'label': 'DATUM'}, {'start': 143, 'end': 153, 'token_start': 41, 'token_end': 41, 'label': 'FUNKTION'}, {'start': 162, 'end': 174, 'token_start': 45, 'token_end': 45, 'label': 'FUNKTION'}, {'start': 175, 'end': 185, 'token_start': 46, 'token_end': 50, 'label': 'DATUM'}, {'start': 187, 'end': 199, 'token_start': 52, 'token_end': 52, 'label': 'FUNKTION'}, {'start': 224, 'end': 234, 'token_start': 58, 'token_end': 62, 'label': 'DATUM'}, {'start': 237, 'end': 249, 'token_start': 65, 'token_end': 65, 'label': 'FUNKTION'}, {'start': 264, 'end': 274, 'token_start': 69, 'token_end': 73, 'label': 'DATUM'}, {'start': 277, 'end': 296, 'token_start': 76, 'token_end': 76, 'label': 'FUNKTION'}, {'start': 312, 'end': 315, 'token_start': 80, 'token_end': 80, 'label': 'DATUM'}, {'start': 327, 'end': 337, 'token_start': 84, 'token_end': 84, 'label': 'FUNKTION'}, {'start': 339, 'end': 349, 'token_start': 86, 'token_end': 90, 'label': 'DATUM'}, {'start': 352, 'end': 362, 'token_start': 93, 'token_end': 93, 'label': 'FUNKTION'}, {'start': 364, 'end': 374, 'token_start': 95, 'token_end': 99, 'label': 'DATUM'}, {'start': 390, 'end': 412, 'token_start': 106, 'token_end': 107, 'label': 'FUNKTION'}, {'start': 414, 'end': 424, 'token_start': 109, 'token_end': 113, 'label': 'DATUM'}, {'start': 427, 'end': 441, 'token_start': 116, 'token_end': 117, 'label': 'FUNKTION'}, {'start': 443, 'end': 453, 'token_start': 119, 'token_end': 123, 'label': 'DATUM'}, {'start': 456, 'end': 469, 'token_start': 126, 'token_end': 126, 'label': 'FUNKTION'}, {'start': 471, 'end': 481, 'token_start': 128, 'token_end': 132, 'label': 'DATUM'}, {'start': 484, 'end': 497, 'token_start': 135, 'token_end': 135, 'label': 'FUNKTION'}, {'start': 511, 'end': 521, 'token_start': 139, 'token_end': 143, 'label': 'DATUM'}, {'start': 524, 'end': 536, 'token_start': 146, 'token_end': 146, 'label': 'FUNKTION'}, {'start': 538, 'end': 548, 'token_start': 148, 'token_end': 152, 'label': 'DATUM'}, {'start': 553, 'end': 563, 'token_start': 154, 'token_end': 158, 'label': 'DATUM'}, {'start': 593, 'end': 603, 'token_start': 165, 'token_end': 169, 'label': 'DATUM'}, {'start': 606, 'end': 618, 'token_start': 172, 'token_end': 172, 'label': 'FUNKTION'}, {'start': 633, 'end': 643, 'token_start': 176, 'token_end': 180, 'label': 'DATUM'}, {'start': 646, 'end': 654, 'token_start': 183, 'token_end': 183, 'label': 'FUNKTION'}, {'start': 656, 'end': 666, 'token_start': 185, 'token_end': 189, 'label': 'DATUM'}, {'start': 675, 'end': 683, 'token_start': 194, 'token_end': 194, 'label': 'FUNKTION'}, {'start': 702, 'end': 714, 'token_start': 201, 'token_end': 201, 'label': 'FUNKTION'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Beisitzer, Landrecht, 1672/73-00-00, Fürschneider, 1679-08-23, Fürschneider, gewes.(1680-09-25, Mundschenk, Hofkammerrat, 1683-09-29, Hofkammerrat, 1701-00-00, Hofkammerrat, 1704-00-00, Landrechtsbeisitzer, 150, Mundschenk, 1679-08-16, Mundschenk, 1680-09-25, NÖ Landrechtsbeisitzer, 1671-04-06, NÖ Salzamtmann, 1681-00-00, Regierungsrat, 1675-00-00, Regierungsrat, 1669-00-00, Regimentsrat, 1674-00-00, 1677-00-00, 1678-00-00, Regimentsrat, 1676-00-00, Truchseß, 1672-00-00, Truchseß, Fürschneider]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Beisitzer, Landrecht, 1672/73-00-00, Fürschneider, 1679-08-23, Fürschneider, gewes.(1680-09-25, Mundschenk, Hofkammerrat, 1683-09-29, Hofkammerrat, 1701-00-00, Hofkammerrat, 1704-00-00, Landrechtsbeisitzer, 150, Mundschenk, 1679-08-16, Mundschenk, 1680-09-25, NÖ Landrechtsbeisitzer, 1671-04-06, NÖ Salzamtmann, 1681-00-00, Regierungsrat, 1675-00-00, Regierungsrat, 1669-00-00, Regimentsrat, 1674-00-00, 1677-00-00, 1678-00-00, Regimentsrat, 1676-00-00, Truchseß, 1672-00-00, Truchseß, Fürschneider)
NLP COMPONENT >>> RenameFunctions.py >>> removing 150 from ents
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(18) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Beisitzer, Landrecht'], 'AMT': None}, {'DATUM': ['1679-08-23'], 'HOFSTAAT': None, 'FUNKTION': ['Fürschneider'], 'AMT': None}, {'DATUM': ['gewes.(1680-09-25'], 'HOFSTAAT': None, 'FUNKTION': ['Fürschneider', 'Mundschenk'], 'AMT': None}, {'DATUM': ['1683-09-29'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}, {'DATUM': ['1679-08-16'], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}, {'DATUM': ['1680-09-25'], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}, {'DATUM': ['1671-04-06'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Landrechtsbeisitzer'], 'AMT': None}, {'DATUM': ['1681-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Salzamtmann'], 'AMT': None}, {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}, {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}, {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}, {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1672-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß', 'Fürschneider'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Beisitzer, Landrecht'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1679-08-23'], 'HOFSTAAT': None, 'FUNKTION': ['Fürschneider'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['gewes.(1680-09-25'], 'HOFSTAAT': None, 'FUNKTION': ['Fürschneider', 'Mundschenk'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1683-09-29'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	5: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	6: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	7: chunk: {'DATUM': ['1679-08-16'], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	8: chunk: {'DATUM': ['1680-09-25'], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	9: chunk: {'DATUM': ['1671-04-06'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Landrechtsbeisitzer'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	10: chunk: {'DATUM': ['1681-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Salzamtmann'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	11: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	12: chunk: {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	13: chunk: {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	14: chunk: {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	15: chunk: {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	16: chunk: {'DATUM': ['1672-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	17: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß', 'Fürschneider'], 'AMT': None}
process_chunks >>> len_doc_chunks: 18, len Ämter-Spalte: 5
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Beisitzer, Landrecht'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1679-08-23'], 'HOFSTAAT': 'L', 'FUNKTION': ['Fürschneider'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['gewes.(1680-09-25'], 'HOFSTAAT': 'L', 'FUNKTION': ['Fürschneider', 'Mundschenk'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1683-09-29'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1679-08-16'], 'HOFSTAAT': 'L', 'FUNKTION': ['Mundschenk'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1680-09-25'], 'HOFSTAAT': 'L', 'FUNKTION': ['Mundschenk'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1671-04-06'], 'HOFSTAAT': 'L', 'FUNKTION': ['NÖ Landrechtsbeisitzer'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1681-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['NÖ Salzamtmann'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regierungsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regierungsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß', 'Fürschneider'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Herrenstand; NÖ-RR / Herrenbank; NÖ-LG / Ritterstand; NÖ-LG / Landrechtsbeisitzer, Ritterstand; 
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>'], cF ['Beisitzer, Landrecht'], cH L, CA HK / Herrenstand
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK / Herrenstand
chunk_process_amt_NEW >>> c_A was: HK / Herrenstand and amt after matching with amt index is: HK / Herrenstand
chunk_process_amt_NEW >>>  Return value of inst2 = HK / Herrenstand (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Beisitzer, Landrecht']
process_chunks >>> cD ['1679-08-23'], cF ['Fürschneider'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1679-08-23, new: 1679-08-23<1679-08-23>
chunk_process_datum >>> rel, chunk sdw: 1679-08-23<1679-08-23>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1679-08-23<1679-08-23>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Fürschneider']
process_chunks >>> cD ['gewes.(1680-09-25'], cF ['Fürschneider', 'Mundschenk'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: gewes.(1680-09-25, new: gewes.(1680-09-25
chunk_process_datum >>> rel, chunk sdw: gewes.(1680-09-25
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': 'gewes.(1680-09-25'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Fürschneider', 'Mundschenk']
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' gewes.(1680-09-25 ' due to error Could not interpret date.: 
process_chunks >>> cD ['1683-09-29'], cF ['Hofkammerrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1683-09-29, new: 1683-09-29<1683-09-29>
chunk_process_datum >>> rel, chunk sdw: 1683-09-29<1683-09-29>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1683-09-29<1683-09-29>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']
process_chunks >>> cD ['1701-00-00'], cF ['Hofkammerrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1701-00-00<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']
process_chunks >>> cD ['1704-00-00'], cF ['Hofkammerrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']
process_chunks >>> cD [], cF ['Landrechtsbeisitzer'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landrechtsbeisitzer']
process_chunks >>> cD ['1679-08-16'], cF ['Mundschenk'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1679-08-16, new: 1679-08-16<1679-08-16>
chunk_process_datum >>> rel, chunk sdw: 1679-08-16<1679-08-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1679-08-16<1679-08-16>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Mundschenk']
process_chunks >>> cD ['1680-09-25'], cF ['Mundschenk'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1680-09-25, new: 1680-09-25<1680-09-25>
chunk_process_datum >>> rel, chunk sdw: 1680-09-25<1680-09-25>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1680-09-25<1680-09-25>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Mundschenk']
process_chunks >>> cD ['1671-04-06'], cF ['NÖ Landrechtsbeisitzer'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1671-04-06, new: 1671-04-06<1671-04-06>
chunk_process_datum >>> rel, chunk sdw: 1671-04-06<1671-04-06>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1671-04-06<1671-04-06>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['NÖ Landrechtsbeisitzer']
process_chunks >>> cD ['1681-00-00'], cF ['NÖ Salzamtmann'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1681-00-00, new: 1681-00-00<1681-06-30>
chunk_process_datum >>> rel, chunk sdw: 1681-00-00<1681-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1681-00-00<1681-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['NÖ Salzamtmann']
process_chunks >>> cD ['1675-00-00'], cF ['Regierungsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675-00-00<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675-00-00<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1675-00-00<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regierungsrat']
process_chunks >>> cD ['1669-00-00'], cF ['Regierungsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669-00-00<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669-00-00<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1669-00-00<1669-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regierungsrat']
process_chunks >>> cD ['1674-00-00', 'bis 1677<1677-06-30>'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674-00-00<1674-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674-00-00<1674-06-30>
chunk_process_datum >>> rel, chunk edw: 1674-00-00<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1674-00-00<1674-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']
process_chunks >>> cD ['1678-00-00'], cF [], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678-00-00<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678-00-00<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1678-00-00<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F []
process_chunks >>> cD ['1676-00-00'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676-00-00<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676-00-00<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1676-00-00<1676-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']
process_chunks >>> cD ['1672-00-00'], cF ['Truchseß'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1672-00-00, new: 1672-00-00<1672-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672-00-00<1672-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >, 'start_date_written': '1672-00-00<1672-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Truchseß']
process_chunks >>> cD [], cF ['Truchseß', 'Fürschneider'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichbichl, von, Carl >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Truchseß', 'Fürschneider']

--------- Start of row | 47 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichen (Ahen, von)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aichen (Ahen, von) END INPUT, ROW:47
person_process_field_familienname >>> fam1: Aichen
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 18), match='(Ahen, von)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landschreiber'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landschreiber'], cH L, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landschreiber']

--------- Start of row | 48 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichen, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aichen, von END INPUT, ROW:48
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer, Ritterstand 
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Landrechtsbeisitzer'], cH Dummy Hofstaat, CA NÖ-LG 
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Franz Carl>, 'start_date_written': '1701-00-00<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landrechtsbeisitzer']

--------- Start of row | 49 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichen, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aichen, von END INPUT, ROW:49
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Jusitz-Bancodeputation, 1717-06-17, Klosterrat, 1717-10-28, 1693-11-10, Truchseß, 1691-00-00, Landrechtsbeisitzer, 1701-00-00, Landuntermarschall, VI, 1718-01-14, NÖ Raitherr, 1693-00-00, 1699-00-00, Präses, Raitmarschall, 1703-00-00, 1704-00-00, Raitrat, 1701-00-00, Regimentsrat, 1702-12-16, Regierungsrat, 1704-00-00, 1710-11-29, supernumerärer Biesitzer NÖ Landrechts, 1691-03-26, Truchseß, 1704-00-00, Verordneter, 1705-00-00, Waisenrat)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :49, Jusitz-Bancodeputation "cum consueto salario von Hof" resolviert (1717-06-17) ; Klosterrat (1717-10-28) ; ksl. Rat (1693-11-10) ; ksl. Rat im Ritterstand; ksl. Truchseß (1691-00-00) ; Landrechtsbeisitzer, Ritterstand (1701-00-00) ; Landuntermarschall "aus eigener allergnädigsten bewegens" Ks. Karl VI. ernannt (1718-01-14) ; NÖ Raitherr (1693-00-00 bis 1699-00-00) ; Präses gesamten NÖ Ritterstand; Raitmarschall (1703-00-00 bis 1704-00-00) ; Raitrat (1701-00-00) ; Regimentsrat (1702-12-16) ; Regierungsrat, Ritterstand (1704-00-00) ; Ritterstandsausschuß (1710-11-29) ; supernumerärer Biesitzer NÖ Landrechts (1691-03-26) ; Truchseß (1704-00-00) ; Verordneter Ritterstand (1705-00-00) ; Waisenrat, [{'start': 0, 'end': 22, 'token_start': 0, 'token_end': 0, 'label': 'AMT'}, {'start': 66, 'end': 76, 'token_start': 10, 'token_end': 14, 'label': 'DATUM'}, {'start': 79, 'end': 89, 'token_start': 17, 'token_end': 17, 'label': 'FUNKTION'}, {'start': 91, 'end': 101, 'token_start': 19, 'token_end': 23, 'label': 'DATUM'}, {'start': 104, 'end': 112, 'token_start': 26, 'token_end': 28, 'label': 'FUNKTION'}, {'start': 114, 'end': 124, 'token_start': 30, 'token_end': 34, 'label': 'DATUM'}, {'start': 127, 'end': 135, 'token_start': 37, 'token_end': 39, 'label': 'FUNKTION'}, {'start': 157, 'end': 165, 'token_start': 45, 'token_end': 45, 'label': 'FUNKTION'}, {'start': 167, 'end': 177, 'token_start': 47, 'token_end': 51, 'label': 'DATUM'}, {'start': 180, 'end': 199, 'token_start': 54, 'token_end': 54, 'label': 'FUNKTION'}, {'start': 214, 'end': 224, 'token_start': 58, 'token_end': 62, 'label': 'DATUM'}, {'start': 227, 'end': 245, 'token_start': 65, 'token_end': 65, 'label': 'FUNKTION'}, {'start': 307, 'end': 317, 'token_start': 79, 'token_end': 83, 'label': 'DATUM'}, {'start': 320, 'end': 331, 'token_start': 86, 'token_end': 87, 'label': 'FUNKTION'}, {'start': 333, 'end': 343, 'token_start': 89, 'token_end': 93, 'label': 'DATUM'}, {'start': 348, 'end': 358, 'token_start': 95, 'token_end': 99, 'label': 'DATUM'}, {'start': 361, 'end': 367, 'token_start': 102, 'token_end': 102, 'label': 'FUNKTION'}, {'start': 393, 'end': 406, 'token_start': 107, 'token_end': 107, 'label': 'FUNKTION'}, {'start': 408, 'end': 418, 'token_start': 109, 'token_end': 113, 'label': 'DATUM'}, {'start': 423, 'end': 433, 'token_start': 115, 'token_end': 119, 'label': 'DATUM'}, {'start': 436, 'end': 443, 'token_start': 122, 'token_end': 122, 'label': 'FUNKTION'}, {'start': 445, 'end': 455, 'token_start': 124, 'token_end': 128, 'label': 'DATUM'}, {'start': 458, 'end': 470, 'token_start': 131, 'token_end': 131, 'label': 'FUNKTION'}, {'start': 472, 'end': 482, 'token_start': 133, 'token_end': 137, 'label': 'DATUM'}, {'start': 485, 'end': 498, 'token_start': 140, 'token_end': 140, 'label': 'FUNKTION'}, {'start': 513, 'end': 523, 'token_start': 144, 'token_end': 148, 'label': 'DATUM'}, {'start': 526, 'end': 546, 'token_start': 151, 'token_end': 151, 'label': 'AMT'}, {'start': 548, 'end': 558, 'token_start': 153, 'token_end': 157, 'label': 'DATUM'}, {'start': 561, 'end': 599, 'token_start': 160, 'token_end': 163, 'label': 'FUNKTION'}, {'start': 601, 'end': 611, 'token_start': 165, 'token_end': 169, 'label': 'DATUM'}, {'start': 614, 'end': 622, 'token_start': 172, 'token_end': 172, 'label': 'FUNKTION'}, {'start': 624, 'end': 634, 'token_start': 174, 'token_end': 178, 'label': 'DATUM'}, {'start': 637, 'end': 648, 'token_start': 181, 'token_end': 181, 'label': 'FUNKTION'}, {'start': 662, 'end': 672, 'token_start': 184, 'token_end': 188, 'label': 'DATUM'}, {'start': 675, 'end': 684, 'token_start': 191, 'token_end': 191, 'label': 'AMT'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Jusitz-Bancodeputation, 1717-06-17, Klosterrat, 1717-10-28, ksl. Rat, 1693-11-10, ksl. Rat, Truchseß, 1691-00-00, Landrechtsbeisitzer, 1701-00-00, Landuntermarschall, 1718-01-14, NÖ Raitherr, 1693-00-00, 1699-00-00, Präses, Raitmarschall, 1703-00-00, 1704-00-00, Raitrat, 1701-00-00, Regimentsrat, 1702-12-16, Regierungsrat, 1704-00-00, Ritterstandsausschuß, 1710-11-29, supernumerärer Biesitzer NÖ Landrechts, 1691-03-26, Truchseß, 1704-00-00, Verordneter, 1705-00-00, Waisenrat]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Jusitz-Bancodeputation, 1717-06-17, Klosterrat, 1717-10-28, ksl. Rat, 1693-11-10, ksl. Rat, Truchseß, 1691-00-00, Landrechtsbeisitzer, 1701-00-00, Landuntermarschall, 1718-01-14, NÖ Raitherr, 1693-00-00, 1699-00-00, Präses, Raitmarschall, 1703-00-00, 1704-00-00, Raitrat, 1701-00-00, Regimentsrat, 1702-12-16, Regierungsrat, 1704-00-00, Ritterstandsausschuß, 1710-11-29, supernumerärer Biesitzer NÖ Landrechts, 1691-03-26, Truchseß, 1704-00-00, Verordneter, 1705-00-00, Waisenrat)
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = Jusitz-Bancodeputation
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = Ritterstandsausschuß
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = Waisenrat
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(18) = [{'DATUM': ['1717-06-17'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': 'Jusitz-Bancodeputation'}, {'DATUM': ['1717-10-28'], 'HOFSTAAT': None, 'FUNKTION': ['Klosterrat'], 'AMT': None}, {'DATUM': ['1693-11-10'], 'HOFSTAAT': None, 'FUNKTION': ['ksl. Rat'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['ksl. Rat'], 'AMT': None}, {'DATUM': ['1691-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}, {'DATUM': ['1718-01-14'], 'HOFSTAAT': None, 'FUNKTION': ['Landuntermarschall'], 'AMT': None}, {'DATUM': ['1693-00-00', 'bis 1699<1699-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Raitherr'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Präses'], 'AMT': None}, {'DATUM': ['1703-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitmarschall'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat'], 'AMT': None}, {'DATUM': ['1702-12-16'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}, {'DATUM': ['1710-11-29'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': 'Ritterstandsausschuß'}, {'DATUM': ['1691-03-26'], 'HOFSTAAT': None, 'FUNKTION': ['supernumerärer Biesitzer NÖ Landrechts'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}, {'DATUM': ['1705-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': 'Waisenrat'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1717-06-17'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': 'Jusitz-Bancodeputation'}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1717-10-28'], 'HOFSTAAT': None, 'FUNKTION': ['Klosterrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1693-11-10'], 'HOFSTAAT': None, 'FUNKTION': ['ksl. Rat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['ksl. Rat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1691-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	5: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	6: chunk: {'DATUM': ['1718-01-14'], 'HOFSTAAT': None, 'FUNKTION': ['Landuntermarschall'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	7: chunk: {'DATUM': ['1693-00-00', 'bis 1699<1699-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Raitherr'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	8: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Präses'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	9: chunk: {'DATUM': ['1703-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitmarschall'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	10: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	11: chunk: {'DATUM': ['1702-12-16'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	12: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	13: chunk: {'DATUM': ['1710-11-29'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': 'Ritterstandsausschuß'}
NLP COMPONENT >>> CreateChunks.py >>> 	14: chunk: {'DATUM': ['1691-03-26'], 'HOFSTAAT': None, 'FUNKTION': ['supernumerärer Biesitzer NÖ Landrechts'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	15: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	16: chunk: {'DATUM': ['1705-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	17: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': 'Waisenrat'}
process_chunks >>> len_doc_chunks: 18, len Ämter-Spalte: 5
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1717-06-17'], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': 'Jusitz-Bancodeputation'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1717-10-28'], 'HOFSTAAT': 'L', 'FUNKTION': ['Klosterrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1693-11-10'], 'HOFSTAAT': 'L', 'FUNKTION': ['ksl. Rat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['ksl. Rat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1691-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1718-01-14'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landuntermarschall'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1693-00-00', 'bis 1699<1699-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['NÖ Raitherr'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Präses'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1703-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitmarschall'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1702-12-16'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regierungsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1710-11-29'], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': 'Ritterstandsausschuß'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1691-03-26'], 'HOFSTAAT': 'L', 'FUNKTION': ['supernumerärer Biesitzer NÖ Landrechts'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1705-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': 'Waisenrat'}
helper_hsv_match_amt_with_funct >>> r_A = NÖ / Raitkollegium; NÖ-LG / Landrechtsbeisitzer, NÖ-LG? / Raitherren; Ritterstand; NÖ-RKz / Ritterstand; OMeA / Truchsesse
process_chunks >>> cD ['1717-06-17'], cF [], cH L, CA Jusitz-Bancodeputation
helper_hsv_post_process_dates >>> old: 1717-06-17, new: 1717-06-17<1717-06-17>
chunk_process_datum >>> rel, chunk sdw: 1717-06-17<1717-06-17>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1717-06-17<1717-06-17>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Jusitz-Bancodeputation
chunk_process_amt_NEW >>> c_A was: Jusitz-Bancodeputation and amt after matching with amt index is: Jusitz-Bancodeputation
chunk_process_amt_NEW >>>  Return value of inst2 = Jusitz-Bancodeputation (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F []
process_chunks >>> cD ['1717-10-28'], cF ['Klosterrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1717-10-28, new: 1717-10-28<1717-10-28>
chunk_process_datum >>> rel, chunk sdw: 1717-10-28<1717-10-28>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1717-10-28<1717-10-28>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Klosterrat']
process_chunks >>> cD ['1693-11-10'], cF ['ksl. Rat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1693-11-10, new: 1693-11-10<1693-11-10>
chunk_process_datum >>> rel, chunk sdw: 1693-11-10<1693-11-10>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1693-11-10<1693-11-10>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['ksl. Rat']
process_chunks >>> cD [], cF ['ksl. Rat'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['ksl. Rat']
process_chunks >>> cD ['1691-00-00'], cF ['Truchseß'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1691-00-00, new: 1691-00-00<1691-06-30>
chunk_process_datum >>> rel, chunk sdw: 1691-00-00<1691-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1691-00-00<1691-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Truchseß']
process_chunks >>> cD ['1701-00-00'], cF ['Landrechtsbeisitzer'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1701-00-00<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landrechtsbeisitzer']
process_chunks >>> cD ['1718-01-14'], cF ['Landuntermarschall'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1718-01-14, new: 1718-01-14<1718-01-14>
chunk_process_datum >>> rel, chunk sdw: 1718-01-14<1718-01-14>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1718-01-14<1718-01-14>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landuntermarschall']
process_chunks >>> cD ['1693-00-00', 'bis 1699<1699-06-30>'], cF ['NÖ Raitherr'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1693-00-00, new: 1693-00-00<1693-06-30>
helper_hsv_post_process_dates >>> inner date: <1699-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1699-06-30>
helper_hsv_post_process_dates >>> old: bis 1699<1699-06-30>, new: bis 1699<1699-06-30>
chunk_process_datum >>> rel, chunk sdw: 1693-00-00<1693-06-30>
chunk_process_datum >>> rel, chunk edw: 1693-00-00<1693-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1693-00-00<1693-06-30>', 'end_date_written': 'bis 1699<1699-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['NÖ Raitherr']
process_chunks >>> cD [], cF ['Präses'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Präses']
process_chunks >>> cD ['1703-00-00', 'bis 1704<1704-06-30>'], cF ['Raitmarschall'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1703-00-00, new: 1703-00-00<1703-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1703-00-00<1703-06-30>
chunk_process_datum >>> rel, chunk edw: 1703-00-00<1703-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1703-00-00<1703-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitmarschall']
process_chunks >>> cD ['1701-00-00'], cF ['Raitrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1701-00-00<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitrat']
process_chunks >>> cD ['1702-12-16'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1702-12-16, new: 1702-12-16<1702-12-16>
chunk_process_datum >>> rel, chunk sdw: 1702-12-16<1702-12-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1702-12-16<1702-12-16>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']
process_chunks >>> cD ['1704-00-00'], cF ['Regierungsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regierungsrat']
process_chunks >>> cD ['1710-11-29'], cF [], cH L, CA Ritterstandsausschuß
helper_hsv_post_process_dates >>> old: 1710-11-29, new: 1710-11-29<1710-11-29>
chunk_process_datum >>> rel, chunk sdw: 1710-11-29<1710-11-29>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1710-11-29<1710-11-29>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Ritterstandsausschuß
chunk_process_amt_NEW >>> c_A was: Ritterstandsausschuß and amt after matching with amt index is: Ritterstandsausschuß
chunk_process_amt_NEW >>>  Return value of inst2 = Ritterstandsausschuß (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F []
process_chunks >>> cD ['1691-03-26'], cF ['supernumerärer Biesitzer NÖ Landrechts'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1691-03-26, new: 1691-03-26<1691-03-26>
chunk_process_datum >>> rel, chunk sdw: 1691-03-26<1691-03-26>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1691-03-26<1691-03-26>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['supernumerärer Biesitzer NÖ Landrechts']
process_chunks >>> cD ['1704-00-00'], cF ['Truchseß'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Truchseß']
process_chunks >>> cD ['1705-00-00'], cF ['Verordneter'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1705-00-00, new: 1705-00-00<1705-06-30>
chunk_process_datum >>> rel, chunk sdw: 1705-00-00<1705-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>, 'start_date_written': '1705-00-00<1705-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Verordneter']
process_chunks >>> cD [], cF [], cH L, CA Waisenrat
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Johann Joachim>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Waisenrat
chunk_process_amt_NEW >>> c_A was: Waisenrat and amt after matching with amt index is: Waisenrat
chunk_process_amt_NEW >>>  Return value of inst2 = Waisenrat (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F []

--------- Start of row | 50 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichen, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aichen, von END INPUT, ROW:50
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = jurid. Doktorenkollegiums
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(7) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}, {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}, {'DATUM': ['1656-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Wiener'], 'AMT': 'jurid. Doktorenkollegiums'}, {'DATUM': ['1661-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Landschreiber'], 'AMT': None}, {'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1647-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Landschreiber'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1656-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Wiener'], 'AMT': 'jurid. Doktorenkollegiums'}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1661-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Landschreiber'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	5: chunk: {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	6: chunk: {'DATUM': ['1647-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 7, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landschreiber'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Landschreiber'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1656-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Wiener'], 'AMT': 'jurid. Doktorenkollegiums'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1661-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['NÖ Landschreiber'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1647-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG; NÖ-RR / Ritterbank
process_chunks >>> cD [], cF ['Landschreiber'], cH L, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landschreiber']
process_chunks >>> cD ['1674-00-00', 'bis 1677<1677-06-30>'], cF ['Landschreiber'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674-00-00<1674-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674-00-00<1674-06-30>
chunk_process_datum >>> rel, chunk edw: 1674-00-00<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1674-00-00<1674-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landschreiber']
process_chunks >>> cD ['1656-00-00'], cF ['Wiener'], cH L, CA jurid. Doktorenkollegiums
helper_hsv_post_process_dates >>> old: 1656-00-00, new: 1656-00-00<1656-06-30>
chunk_process_datum >>> rel, chunk sdw: 1656-00-00<1656-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1656-00-00<1656-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: jurid. Doktorenkollegiums
chunk_process_amt_NEW >>> c_A was: jurid. Doktorenkollegiums and amt after matching with amt index is: jurid. Doktorenkollegiums
chunk_process_amt_NEW >>>  Return value of inst2 = jurid. Doktorenkollegiums (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Wiener']
process_chunks >>> cD ['1661-00-00'], cF ['NÖ Landschreiber'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1661-00-00, new: 1661-00-00<1661-06-30>
chunk_process_datum >>> rel, chunk sdw: 1661-00-00<1661-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1661-00-00<1661-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['NÖ Landschreiber']
process_chunks >>> cD ['1666-00-00'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1666-00-00, new: 1666-00-00<1666-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666-00-00<1666-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1666-00-00<1666-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']
process_chunks >>> cD ['1678-00-00'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678-00-00<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678-00-00<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1678-00-00<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']
process_chunks >>> cD ['1647-00-00'], cF ['Sekretär'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1647-00-00, new: 1647-00-00<1647-06-30>
chunk_process_datum >>> rel, chunk sdw: 1647-00-00<1647-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichen, von, Peter>, 'start_date_written': '1647-00-00<1647-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 51 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aichpüchl, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Aichpüchl, von END INPUT, ROW:51
person_process_field_titel >>> t_tit = 1625-00-00 Adelsstand
person_process_field_titel >>> t_list = ['1625-00-00 Adelsstand']
helper_hsv_post_process_dates >>> old: 1625-00-00, new: 1625-00-00<1625-06-30>
create_title >>> tit_res: 1625-00-00 Adelsstand, date after processing: 1625-00-00<1625-06-30>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(4) = [{'DATUM': ['1649-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Rektor'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Dekan'], 'AMT': None}, {'DATUM': ['1654-00-00', 'bis 1657<1657-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1649-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Rektor'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Dekan'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1654-00-00', 'bis 1657<1657-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 4, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1649-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Rektor'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Dekan'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1654-00-00', 'bis 1657<1657-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Kammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1649-00-00'], cF ['Rektor'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1649-00-00, new: 1649-00-00<1649-06-30>
chunk_process_datum >>> rel, chunk sdw: 1649-00-00<1649-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichpüchl, von, Johann Karl>, 'start_date_written': '1649-00-00<1649-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Rektor']
process_chunks >>> cD [], cF ['Dekan'], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichpüchl, von, Johann Karl>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Dekan']
process_chunks >>> cD ['1654-00-00', 'bis 1657<1657-06-30>'], cF ['Regimentsrat'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1654-00-00, new: 1654-00-00<1654-06-30>
helper_hsv_post_process_dates >>> inner date: <1657-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1657-06-30>
helper_hsv_post_process_dates >>> old: bis 1657<1657-06-30>, new: bis 1657<1657-06-30>
chunk_process_datum >>> rel, chunk sdw: 1654-00-00<1654-06-30>
chunk_process_datum >>> rel, chunk edw: 1654-00-00<1654-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichpüchl, von, Johann Karl>, 'start_date_written': '1654-00-00<1654-06-30>', 'end_date_written': 'bis 1657<1657-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']
process_chunks >>> cD [], cF ['Kammerrat'], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aichpüchl, von, Johann Karl>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Kammerrat']

--------- Start of row | 52 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD ['1675-00-00'], cF ['Kanzlist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675-00-00<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675-00-00<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Franz Friedrich>, 'start_date_written': '1675-00-00<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 53 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Kanzlist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Hanns Freidrich>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 54 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD ['1678-00-00'], cF ['Kanzlist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678-00-00<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678-00-00<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Johann>, 'start_date_written': '1678-00-00<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 55 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = S.n.)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': 'S.n.)'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': 'S.n.)'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': 'S.n.)'}
helper_hsv_match_amt_with_funct >>> r_A = HK-HBH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = S.n.)
process_chunks >>> cD ['1704-00-00'], cF ['Raitoffizier'], cH L, CA S.n.)
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Johann Adam>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: S.n.)
chunk_process_amt_NEW >>> c_A was: S.n.) and amt after matching with amt index is: S.n.)
chunk_process_amt_NEW >>>  Return value of inst2 = S.n.) (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 56 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1711-04-01'], 'HOFSTAAT': None, 'FUNKTION': ['Oberjäger'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1711-04-01'], 'HOFSTAAT': None, 'FUNKTION': ['Oberjäger'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1711-04-01'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Oberjäger'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = ÖodE.
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = ÖodE.
process_chunks >>> cD ['1711-04-01'], cF ['Oberjäger'], cH Dummy Hofstaat, CA ÖodE.
helper_hsv_post_process_dates >>> old: 1711-04-01, new: 1711-04-01<1711-04-01>
chunk_process_datum >>> rel, chunk sdw: 1711-04-01<1711-04-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Johann Adam>, 'start_date_written': '1711-04-01<1711-04-01>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: ÖodE.
chunk_process_amt_NEW >>> c_A was: ÖodE. and amt after matching with amt index is: ÖodE.
chunk_process_amt_NEW >>>  Return value of inst2 = ÖodE. (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Oberjäger']

--------- Start of row | 57 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>', 'bis 1677<1677-06-30>'], cF ['Kanzlist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk edw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Johann Friedrich>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 58 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Heizer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Heizer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Heizer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHK-LE
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHK-LE
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1685-11-01<1685-11-01>'], cF ['Heizer'], cH L, CA RHK-LE
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1685-11-01>
helper_hsv_post_process_dates >>> new_i_date: <1685-11-01>
helper_hsv_post_process_dates >>> old: bis 1685-11-01<1685-11-01>, new: bis 1685-11-01<1685-11-01>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Sebastian>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1685-11-01<1685-11-01>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHK-LE
chunk_process_amt_NEW >>> c_A was: RHK-LE and amt after matching with amt index is: RHK-LE
chunk_process_amt_NEW >>>  Return value of inst2 = RHK-LE (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Heizer']

--------- Start of row | 59 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aigner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reitknecht'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reitknecht'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Reitknecht'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Reitknechte
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA 
process_chunks >>> cD ['1663-00-00'], cF ['Reitknecht'], cH LW, CA OStA 
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663-00-00<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663-00-00<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aigner, Valentin>, 'start_date_written': '1663-00-00<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: OStA 
chunk_process_amt_NEW >>> c_A was: OStA  and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (LW)
chunk_create_relations >>> create realtions called for c_F ['Reitknecht']

--------- Start of row | 60 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ailers, von (Eilers, von)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Ailers, von (Eilers, von) END INPUT, ROW:60
person_process_field_familienname >>> fam1: Ailers, von
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 25), match='(Eilers, von)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = jur. Fakultät
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(4) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat', 'Referendar', 'Sekretär, geh.'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Professor'], 'AMT': 'jur. Fakultät'}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Referendar'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär, geh.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat', 'Referendar', 'Sekretär, geh.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Professor'], 'AMT': 'jur. Fakultät'}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Referendar'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär, geh.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 4, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = ksl.
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Hofrat', 'Referendar', 'Sekretär, geh.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Professor'], 'AMT': 'jur. Fakultät'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Referendar'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Sekretär, geh.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-HKz
process_chunks >>> cD [], cF ['Hofrat', 'Referendar', 'Sekretär, geh.'], cH ksl., CA NÖ-HKz
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ailers, von, Johann>}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-HKz
chunk_process_amt_NEW >>> c_A was: NÖ-HKz and amt after matching with amt index is: NÖ-HKz
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-HKz (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofrat', 'Referendar', 'Sekretär, geh.']
process_chunks >>> cD [], cF ['Professor'], cH ksl., CA jur. Fakultät
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ailers, von, Johann>}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: jur. Fakultät
chunk_process_amt_NEW >>> c_A was: jur. Fakultät and amt after matching with amt index is: jur. Fakultät
chunk_process_amt_NEW >>>  Return value of inst2 = jur. Fakultät (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Professor']
process_chunks >>> cD [], cF ['Referendar'], cH ksl., CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ailers, von, Johann>}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Referendar']
process_chunks >>> cD ['1701-00-00'], cF ['Sekretär, geh.'], cH ksl., CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ailers, von, Johann>, 'start_date_written': '1701-00-00<1701-06-30>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär, geh.']

--------- Start of row | 61 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ailers, von (Eilers, von)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Ailers, von (Eilers, von) END INPUT, ROW:61
person_process_field_familienname >>> fam1: Ailers, von
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 25), match='(Eilers, von)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ
process_chunks >>> cD ['1701-00-00'], cF ['Sekretär'], cH Dummy Hofstaat, CA NÖ
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ailers, von, Konrad>, 'start_date_written': '1701-00-00<1701-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ
chunk_process_amt_NEW >>> c_A was: NÖ and amt after matching with amt index is: NÖ
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 62 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albani
person_process_field_titel >>> t_tit = Reichsgraf
person_process_field_titel >>> t_list = ['Reichsgraf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['ab 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['ab 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['ab 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Edelknabe'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
process_chunks >>> cD ['ab 1704<1704-06-30>'], cF ['Edelknabe'], cH L, CA OStA
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: ab 1704<1704-06-30>, new: ab 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: ab 1704<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albani, Johannes Hieronimus>, 'start_date_written': 'ab 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Edelknabe']

--------- Start of row | 63 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alber
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Instrumentalist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Instrumentalist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Instrumentalist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofmusikanten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD ['1704-00-00'], cF ['Instrumentalist'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alber, Paul>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Instrumentalist']

--------- Start of row | 64 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alberth
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Konzipisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD ['1675-00-00'], cF ['Konzipist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675-00-00<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675-00-00<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alberth, Johann>, 'start_date_written': '1675-00-00<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Konzipist']

--------- Start of row | 65 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alberti
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1698-00-00', 'bis 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent', 'Agent'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1698-00-00', 'bis 1701<1701-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent', 'Agent'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1698-00-00', 'bis 1701<1701-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofratsagent', 'Agent'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHK-LE / Agenten; RHR / Agenten
process_chunks >>> cD ['1698-00-00', 'bis 1701<1701-06-30>'], cF ['Reichshofratsagent', 'Agent'], cH L, CA RHK-LE / Agenten
helper_hsv_post_process_dates >>> old: 1698-00-00, new: 1698-00-00<1698-06-30>
helper_hsv_post_process_dates >>> inner date: <1701-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1701-06-30>
helper_hsv_post_process_dates >>> old: bis 1701<1701-06-30>, new: bis 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1698-00-00<1698-06-30>
chunk_process_datum >>> rel, chunk edw: 1698-00-00<1698-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alberti, Georg Tobias>, 'start_date_written': '1698-00-00<1698-06-30>', 'end_date_written': 'bis 1701<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHK-LE / Agenten
chunk_process_amt_NEW >>> c_A was: RHK-LE / Agenten and amt after matching with amt index is: RHK-LE / Agenten
chunk_process_amt_NEW >>>  Return value of inst2 = RHK-LE / Agenten (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Reichshofratsagent', 'Agent']

--------- Start of row | 66 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alberti
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sommelier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sommelier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'EM', 'FUNKTION': ['Sommelier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
process_chunks >>> cD ['1704-00-00'], cF ['Sommelier'], cH EM, CA OMeA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alberti, Niklas>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Sommelier']

--------- Start of row | 67 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albertin
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Kanzlist'], cH L, CA HK 
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albertin, Max>, 'start_date_written': '1701-00-00<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 68 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Kanzlist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, Caspar >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 69 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674-00-00', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674-00-00', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674-00-00', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD ['1674-00-00', 'bis 1678<1678-06-30>'], cF ['Kanzlist'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674-00-00<1674-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674-00-00<1674-06-30>
chunk_process_datum >>> rel, chunk edw: 1674-00-00<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, Jacob >, 'start_date_written': '1674-00-00<1674-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 70 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofglasrmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofglasrmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Hofglasrmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = Hofbauamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = Hofbauamt
process_chunks >>> cD ['1701-00-00'], cF ['Hofglasrmeister'], cH Dummy Hofstaat, CA Hofbauamt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, Johann>, 'start_date_written': '1701-00-00<1701-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Hofbauamt
chunk_process_amt_NEW >>> c_A was: Hofbauamt and amt after matching with amt index is: Hofbauamt
chunk_process_amt_NEW >>>  Return value of inst2 = Hofbauamt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Hofglasrmeister']

--------- Start of row | 71 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Wirtschaftssekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Wirtschaftssekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Wirtschaftssekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], cF ['Wirtschaftssekretär'], cH L, CA NÖ-LG 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, Johann>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Wirtschaftssekretär']

--------- Start of row | 72 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Syndikus', 'Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Syndikus', 'Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Syndikus', 'Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Syndikus', 'Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, Johann>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Syndikus', 'Verordneter']

--------- Start of row | 73 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht (Albrechts) von Lauterburg
person_process_field_familienname >>> fam1: Albrecht
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 20), match='(Albrechts)'>
person_process_field_titel >>> t_tit = von Lauterburg
person_process_field_titel >>> t_list = ['von Lauterburg']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Reichshofratsagent, 1675-00-00, 1677-00-00, Agent, Reichshofrats-, 1677-00-00, 1678-00-00)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :73, Reichshofratsagent (1675-00-00 bis 1677-00-00) , Agent, Reichshofrats-, Reihenfolge nach Juramentsablegung (1677-00-00 bis 1678-00-00), [{'start': 0, 'end': 18, 'token_start': 0, 'token_end': 0, 'label': 'FUNKTION'}, {'start': 20, 'end': 30, 'token_start': 2, 'token_end': 6, 'label': 'DATUM'}, {'start': 35, 'end': 45, 'token_start': 8, 'token_end': 12, 'label': 'DATUM'}, {'start': 48, 'end': 69, 'token_start': 15, 'token_end': 17, 'label': 'FUNKTION'}, {'start': 107, 'end': 117, 'token_start': 23, 'token_end': 27, 'label': 'DATUM'}, {'start': 122, 'end': 132, 'token_start': 29, 'token_end': 33, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Reichshofratsagent, 1675-00-00, 1677-00-00, Agent, Reichshofrats-, 1677-00-00, 1678-00-00]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Reichshofratsagent, 1675-00-00, 1677-00-00, Agent, Reichshofrats-, 1677-00-00, 1678-00-00)
NLP COMPONENT >>> CreateChunks.py >>> In else clause of chunks, chunk = {'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>', 'ab 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent', 'Reichshofratsagent'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>', 'ab 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent', 'Reichshofratsagent'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>', 'ab 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent', 'Reichshofratsagent'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>', 'ab 1677<1677-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Reichshofratsagent', 'Reichshofratsagent'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Agenten
process_chunks >>> cD ['1675-00-00', 'bis 1677<1677-06-30>', 'ab 1677<1677-06-30>'], cF ['Reichshofratsagent', 'Reichshofratsagent'], cH Dummy Hofstaat, CA RHR / Agenten
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, Johann Jacob >}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: RHR / Agenten
chunk_process_amt_NEW >>> c_A was: RHR / Agenten and amt after matching with amt index is: RHR / Agenten
chunk_process_amt_NEW >>>  Return value of inst2 = RHR / Agenten (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Reichshofratsagent', 'Reichshofratsagent']
process_chunks >>> cD [], cF [], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, Johann Jacob >}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F []

--------- Start of row | 74 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Albrecht, von END INPUT, ROW:74
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = OÖ Expedition
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(3) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofsekretär'], 'AMT': 'OÖ Expedition'}, {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofsekretär'], 'AMT': 'OÖ Expedition'}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 3, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofsekretär'], 'AMT': 'OÖ Expedition'}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Ritter- , Gelehrtenstand; HK / OÖ Expedition
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Hofkammerrat'], cH L, CA HK / Ritter- , Gelehrtenstand
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Franz Gottlieb>, 'start_date_written': '1701-00-00<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK / Ritter- , Gelehrtenstand
chunk_process_amt_NEW >>> c_A was: HK / Ritter- , Gelehrtenstand and amt after matching with amt index is: HK / Ritter- , Gelehrtenstand
chunk_process_amt_NEW >>>  Return value of inst2 = HK / Ritter- , Gelehrtenstand (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']
process_chunks >>> cD [], cF ['Hofsekretär'], cH L, CA OÖ Expedition
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Franz Gottlieb>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OÖ Expedition
chunk_process_amt_NEW >>> c_A was: OÖ Expedition and amt after matching with amt index is: OÖ Expedition
chunk_process_amt_NEW >>>  Return value of inst2 = OÖ Expedition (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofsekretär']
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF [], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Franz Gottlieb>, 'start_date_written': '1701-00-00<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F []

--------- Start of row | 75 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Albrecht, von END INPUT, ROW:75
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1693-00-00', 'bis 1697<1697-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat', 'Regimentsrat', 'Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1693-00-00', 'bis 1697<1697-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat', 'Regimentsrat', 'Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1693-00-00', 'bis 1697<1697-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regierungsrat', 'Regimentsrat', 'Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RKz / Ritterstand; NÖ-RR / Ritterstand
process_chunks >>> cD ['1693-00-00', 'bis 1697<1697-06-30>'], cF ['Regierungsrat', 'Regimentsrat', 'Regimentsrat'], cH L, CA NÖ-RKz / Ritterstand
helper_hsv_post_process_dates >>> old: 1693-00-00, new: 1693-00-00<1693-06-30>
helper_hsv_post_process_dates >>> inner date: <1697-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1697-06-30>
helper_hsv_post_process_dates >>> old: bis 1697<1697-06-30>, new: bis 1697<1697-06-30>
chunk_process_datum >>> rel, chunk sdw: 1693-00-00<1693-06-30>
chunk_process_datum >>> rel, chunk edw: 1693-00-00<1693-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Joseph Matthias>, 'start_date_written': '1693-00-00<1693-06-30>', 'end_date_written': 'bis 1697<1697-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RKz / Ritterstand
chunk_process_amt_NEW >>> c_A was: NÖ-RKz / Ritterstand and amt after matching with amt index is: NÖ-RKz / Ritterstand
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RKz / Ritterstand (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regierungsrat', 'Regimentsrat', 'Regimentsrat']

--------- Start of row | 76 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Albrecht, von END INPUT, ROW:76
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Referendar'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Referendar'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär', 'Referendar'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR 
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Sekretär', 'Referendar'], cH L, CA GR 
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Johann Ferdinand>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR 
chunk_process_amt_NEW >>> c_A was: GR  and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär', 'Referendar']

--------- Start of row | 77 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrecht, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Albrecht, von END INPUT, ROW:77
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(3) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}, {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}, {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammersekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammersekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 3, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammersekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Sekretarien
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Sekretär'], cH L, CA HK / Sekretarien
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Johann Ferdinand>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK / Sekretarien
chunk_process_amt_NEW >>> c_A was: HK / Sekretarien and amt after matching with amt index is: HK / Sekretarien
chunk_process_amt_NEW >>>  Return value of inst2 = HK / Sekretarien (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Hofkammerrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Johann Ferdinand>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']
process_chunks >>> cD ['1678-00-00'], cF ['Hofkammersekretär'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678-00-00<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678-00-00<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrecht, von, Johann Ferdinand>, 'start_date_written': '1678-00-00<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammersekretär']

--------- Start of row | 78 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrechtsburg, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Albrechtsburg, von END INPUT, ROW:78
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> In else clause of chunks, chunk = {'DATUM': ['1702-00-00', 'bis 1731-03-03<1731-03-03>', '1710-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat', 'NÖ Landschafts-bereinnehmer', 'Raitherr'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = NÖ Stände
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1702-00-00', 'bis 1731-03-03<1731-03-03>', '1710-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat', 'NÖ Landschafts-bereinnehmer', 'Raitherr'], 'AMT': None}, {'DATUM': ['1723-00-00', 'bis 1729<1729-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': 'NÖ Stände'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1702-00-00', 'bis 1731-03-03<1731-03-03>', '1710-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat', 'NÖ Landschafts-bereinnehmer', 'Raitherr'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1723-00-00', 'bis 1729<1729-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': 'NÖ Stände'}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1702-00-00', 'bis 1731-03-03<1731-03-03>', '1710-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regimentsrat', 'NÖ Landschafts-bereinnehmer', 'Raitherr'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1723-00-00', 'bis 1729<1729-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': 'NÖ Stände'}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1702-00-00', 'bis 1731-03-03<1731-03-03>', '1710-00-00'], cF ['Regimentsrat', 'NÖ Landschafts-bereinnehmer', 'Raitherr'], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrechtsburg, von, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat', 'NÖ Landschafts-bereinnehmer', 'Raitherr']
process_chunks >>> cD ['1723-00-00', 'bis 1729<1729-06-30>'], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ Stände
helper_hsv_post_process_dates >>> old: 1723-00-00, new: 1723-00-00<1723-06-30>
helper_hsv_post_process_dates >>> inner date: <1729-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1729-06-30>
helper_hsv_post_process_dates >>> old: bis 1729<1729-06-30>, new: bis 1729<1729-06-30>
chunk_process_datum >>> rel, chunk sdw: 1723-00-00<1723-06-30>
chunk_process_datum >>> rel, chunk edw: 1723-00-00<1723-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrechtsburg, von, Franz Ignaz>, 'start_date_written': '1723-00-00<1723-06-30>', 'end_date_written': 'bis 1729<1729-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ Stände
chunk_process_amt_NEW >>> c_A was: NÖ Stände and amt after matching with amt index is: NÖ Stände
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Stände (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 79 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Albrechtsburg, von (Albrecht von Albrechtsburg)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Albrechtsburg, von (Albrecht von Albrechtsburg) END INPUT, ROW:79
person_process_field_familienname >>> fam1: Albrechtsburg, von
person_process_field_familienname >>> fam2: <re.Match object; span=(19, 47), match='(Albrecht von Albrechtsburg)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = Geh. Sekretär
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat', 'Referendar'], 'AMT': 'Geh. Sekretär'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofrat', 'Referendar'], 'AMT': 'Geh. Sekretär'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofrat', 'Referendar'], 'AMT': 'Geh. Sekretär'}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-GHKz; NÖ-HKz
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Hofrat', 'Referendar'], cH L, CA Geh. Sekretär
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Albrechtsburg, von, Johann Ignaz >, 'start_date_written': '1701-00-00<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Geh. Sekretär
chunk_process_amt_NEW >>> c_A was: Geh. Sekretär and amt after matching with amt index is: Geh. Sekretär
chunk_process_amt_NEW >>>  Return value of inst2 = Geh. Sekretär (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofrat', 'Referendar']

--------- Start of row | 80 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alexander (Alessandro)
person_process_field_familienname >>> fam1: Alexander
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 22), match='(Alessandro)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammerdiener
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], cF ['Kammerdiener'], cH EG, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alexander, NN>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 81 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alexander (Alessandro)
person_process_field_familienname >>> fam1: Alexander
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 22), match='(Alessandro)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammersekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammersekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammersekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Sekretarien / Trabantenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1677<1677-06-30>'], cF ['Kammersekretär'], cH EG, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alexander, NN>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Kammersekretär']

--------- Start of row | 82 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Allerndorff
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1676-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676-00-00<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676-00-00<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Allerndorff, Emerich Friedrich>, 'start_date_written': '1676-00-00<1676-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 83 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alqui, d'
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = MMT
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-00-00'], 'HOFSTAAT': 'MMT', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammerdienerinnen)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammerdienerinnen)
process_chunks >>> cD ['1666-00-00'], cF ['Kammerdienerin'], cH MMT, CA (Kammerdienerinnen)
helper_hsv_post_process_dates >>> old: 1666-00-00, new: 1666-00-00<1666-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666-00-00<1666-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alqui, d', Antonia>, 'start_date_written': '1666-00-00<1666-06-30>'}
chunk_get_nm_hst >>> c_H = MMT
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMT (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammerdienerinnen)
chunk_process_amt_NEW >>> c_A was: (Kammerdienerinnen) and amt after matching with amt index is: (Kammerdienerinnen)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammerdienerinnen) (MMT (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 84 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alraun
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1694-10-01'], 'HOFSTAAT': None, 'FUNKTION': ['Trabant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1694-10-01'], 'HOFSTAAT': None, 'FUNKTION': ['Trabant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1694-10-01'], 'HOFSTAAT': 'J', 'FUNKTION': ['Trabant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Trabantenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1694-10-01'], cF ['Trabant'], cH J, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1694-10-01, new: 1694-10-01<1694-10-01>
chunk_process_datum >>> rel, chunk sdw: 1694-10-01<1694-10-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alraun, Urban>, 'start_date_written': '1694-10-01<1694-10-01>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Trabant']

--------- Start of row | 85 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH J, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Gundaker>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 86 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-12-14', 'bis 1677-01-21<1677-01-21>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-12-14', 'bis 1677-01-21<1677-01-21>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-12-14', 'bis 1677-01-21<1677-01-21>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1676-12-14', 'bis 1677-01-21<1677-01-21>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1676-12-14, new: 1676-12-14<1676-12-14>
helper_hsv_post_process_dates >>> inner date: <1677-01-21>
helper_hsv_post_process_dates >>> new_i_date: <1677-01-21>
helper_hsv_post_process_dates >>> old: bis 1677-01-21<1677-01-21>, new: bis 1677-01-21<1677-01-21>
chunk_process_datum >>> rel, chunk sdw: 1676-12-14<1676-12-14>
chunk_process_datum >>> rel, chunk edw: 1676-12-14<1676-12-14>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Max Rudolph>, 'start_date_written': '1676-12-14<1676-12-14>', 'end_date_written': 'bis 1677-01-21<1677-01-21>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 87 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1665-09-09', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1665-09-09', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1665-09-09', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1665-09-09', 'bis 1677<1677-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1665-09-09, new: 1665-09-09<1665-09-09>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1665-09-09<1665-09-09>
chunk_process_datum >>> rel, chunk edw: 1665-09-09<1665-09-09>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Victor >, 'start_date_written': '1665-09-09<1665-09-09>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 88 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Kämmerer, wirkl., 1656-11-22, 1680-00-00, Oberstküchenmeister, Hofküchenmeister, 1659, 1685-11-01, Geh. Rat, wirkl., 1701-00-00, 1704-00-00)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :88, Kämmerer, wirkl. (1656-11-22 bis 1680-00-00; 480 fl Gehalt) ; Oberstküchenmeister (Hofküchenmeister, prefetto di cusina) , (1659 bis 1685-11-01; 600 fl./ 1.000 fl Gehalt) ; Geh. Rat, wirkl. (1701-00-00 bis 1704-00-00), [{'start': 0, 'end': 16, 'token_start': 0, 'token_end': 3, 'label': 'FUNKTION'}, {'start': 18, 'end': 28, 'token_start': 5, 'token_end': 9, 'label': 'DATUM'}, {'start': 33, 'end': 43, 'token_start': 11, 'token_end': 15, 'label': 'DATUM'}, {'start': 61, 'end': 80, 'token_start': 22, 'token_end': 22, 'label': 'FUNKTION'}, {'start': 82, 'end': 98, 'token_start': 24, 'token_end': 24, 'label': 'FUNKTION'}, {'start': 122, 'end': 126, 'token_start': 32, 'token_end': 32, 'label': 'DATUM'}, {'start': 131, 'end': 141, 'token_start': 34, 'token_end': 38, 'label': 'DATUM'}, {'start': 170, 'end': 186, 'token_start': 49, 'token_end': 54, 'label': 'FUNKTION'}, {'start': 188, 'end': 198, 'token_start': 56, 'token_end': 60, 'label': 'DATUM'}, {'start': 203, 'end': 213, 'token_start': 62, 'token_end': 66, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Kämmerer, wirkl., 1656-11-22, 1680-00-00, Oberstküchenmeister, Hofküchenmeister, 1659, 1685-11-01, Geh. Rat, wirkl., 1701-00-00, 1704-00-00]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Kämmerer, wirkl., 1656-11-22, 1680-00-00, Oberstküchenmeister, Hofküchenmeister, 1659, 1685-11-01, Geh. Rat, wirkl., 1701-00-00, 1704-00-00)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(5) = [{'DATUM': ['1656-11-22', 'bis 1680<1680-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstküchenmeister'], 'AMT': None}, {'DATUM': ['1659', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofküchenmeister'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}, {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1656-11-22', 'bis 1680<1680-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstküchenmeister'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1659', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofküchenmeister'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 5, len Ämter-Spalte: 3
helper_hsv_match_hofstaate >>> r_H = ksl.; L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1656-11-22', 'bis 1680<1680-06-30>'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Oberstküchenmeister'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1659', 'bis 1685-11-01<1685-11-01>'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Hofküchenmeister'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'ksl.', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR; OMeA; OKäA
process_chunks >>> cD ['1656-11-22', 'bis 1680<1680-06-30>'], cF ['Kämmerer, wirkl.'], cH ksl., CA GR
helper_hsv_post_process_dates >>> old: 1656-11-22, new: 1656-11-22<1656-11-22>
helper_hsv_post_process_dates >>> inner date: <1680-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1680-06-30>
helper_hsv_post_process_dates >>> old: bis 1680<1680-06-30>, new: bis 1680<1680-06-30>
chunk_process_datum >>> rel, chunk sdw: 1656-11-22<1656-11-22>
chunk_process_datum >>> rel, chunk edw: 1656-11-22<1656-11-22>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Christoph >, 'start_date_written': '1656-11-22<1656-11-22>', 'end_date_written': 'bis 1680<1680-06-30>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']
process_chunks >>> cD [], cF ['Oberstküchenmeister'], cH ksl., CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Christoph >}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstküchenmeister']
process_chunks >>> cD ['1659', 'bis 1685-11-01<1685-11-01>'], cF ['Hofküchenmeister'], cH ksl., CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1659, new: 1659<1659>
helper_hsv_post_process_dates >>> inner date: <1685-11-01>
helper_hsv_post_process_dates >>> new_i_date: <1685-11-01>
helper_hsv_post_process_dates >>> old: bis 1685-11-01<1685-11-01>, new: bis 1685-11-01<1685-11-01>
chunk_process_datum >>> rel, chunk sdw: 1659<1659>
chunk_process_datum >>> rel, chunk edw: 1659<1659>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Christoph >, 'start_date_written': '1659<1659>', 'end_date_written': 'bis 1685-11-01<1685-11-01>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofküchenmeister']
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1659<1659> ' due to error ('Invalid iso date: ', '1659'): 
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.'], cH ksl., CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Christoph >}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat, wirkl.']
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF [], cH ksl., CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Christoph >, 'start_date_written': '1701-00-00<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F []

--------- Start of row | 89 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1693-00-00/1693-11-13<1693-00-00 - 1693-11-13>', 'bis 1704-00-009<1704-00-009>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1693-00-00/1693-11-13<1693-00-00 - 1693-11-13>', 'bis 1704-00-009<1704-00-009>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1693-00-00/1693-11-13<1693-00-00 - 1693-11-13>', 'bis 1704-00-009<1704-00-009>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1693-00-00/1693-11-13<1693-00-00 - 1693-11-13>', 'bis 1704-00-009<1704-00-009>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1693-00-00 - 1693-11-13>
helper_hsv_post_process_dates >>> new_i_date: <1693-06-30 - 1693-11-13>
helper_hsv_post_process_dates >>> old: 1693-00-00/1693-11-13<1693-00-00 - 1693-11-13>, new: 1693-00-00/1693-11-13<1693-06-30 - 1693-11-13>
helper_hsv_post_process_dates >>> inner date: <1704-00-009>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-309>
helper_hsv_post_process_dates >>> old: bis 1704-00-009<1704-00-009>, new: bis 1704-00-009<1704-06-309>
chunk_process_datum >>> rel, chunk sdw: 1693-00-00/1693-11-13<1693-06-30 - 1693-11-13>
chunk_process_datum >>> rel, chunk edw: 1693-00-00/1693-11-13<1693-06-30 - 1693-11-13>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Hubert Sigmund>, 'start_date_written': '1693-00-00/1693-11-13<1693-06-30 - 1693-11-13>', 'end_date_written': 'bis 1704-00-009<1704-06-309>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' bis 1704-00-009<1704-06-309> ' due to error ('Invalid iso date: ', '1704-06-309'): 

--------- Start of row | 90 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthof-', 'Landjägermeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthof-', 'Landjägermeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Obersthof-', 'Landjägermeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OJäA / Oberhof- , Landjägermeisteramt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OJäA 
process_chunks >>> cD [], cF ['Obersthof-', 'Landjägermeister'], cH L, CA OJäA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Johann Christoph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OJäA 
chunk_process_amt_NEW >>> c_A was: OJäA  and amt after matching with amt index is: OJäA
chunk_process_amt_NEW >>>  Return value of inst2 = OJäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Obersthof-', 'Landjägermeister']

--------- Start of row | 91 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1687-06-09 - 1687-07-19>
helper_hsv_post_process_dates >>> new_i_date: <1687-06-09 - 1687-07-19>
helper_hsv_post_process_dates >>> old: 1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>, new: 1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>
chunk_process_datum >>> rel, chunk edw: 1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Johann >, 'start_date_written': '1687-06-09/1687-07-19<1687-06-09 - 1687-07-19>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 92 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1688-06-03 - 1688-06-12>
helper_hsv_post_process_dates >>> new_i_date: <1688-06-03 - 1688-06-12>
helper_hsv_post_process_dates >>> old: 1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>, new: 1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>
chunk_process_datum >>> rel, chunk edw: 1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Maria Max Franz Carl>, 'start_date_written': '1688-06-03/1688-06-12<1688-06-03 - 1688-06-12>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 93 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Edelknabe, Truchseß, 1661-01-16)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :93, Edelknabe, gewes.; Truchseß (1661-01-16), [{'token_start': 0, 'token_end': 0, 'start': 0, 'end': 9, 'text': 'Edelknabe', 'label': 'FUNKTION', 'source': '/nerdpool/models/viecpro_ner_hzab_12-20', 'input_hash': -473687537}, {'token_start': 5, 'token_end': 5, 'start': 19, 'end': 27, 'text': 'Truchseß', 'label': 'FUNKTION', 'source': '/nerdpool/models/viecpro_ner_hzab_12-20', 'input_hash': -473687537}, {'token_start': 7, 'token_end': 11, 'start': 29, 'end': 39, 'text': '1661-01-16', 'label': 'DATUM', 'source': '/nerdpool/models/viecpro_ner_hzab_12-20', 'input_hash': -473687537}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Edelknabe, Truchseß, 1661-01-16]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Edelknabe, Truchseß, 1661-01-16)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}, {'DATUM': ['1661-01-16'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1661-01-16'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Edelknabe'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1661-01-16'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
process_chunks >>> cD [], cF ['Edelknabe'], cH L, CA OStA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Maximilian Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Edelknabe']
process_chunks >>> cD ['1661-01-16'], cF ['Truchseß'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1661-01-16, new: 1661-01-16<1661-01-16>
chunk_process_datum >>> rel, chunk sdw: 1661-01-16<1661-01-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Maximilian Johann>, 'start_date_written': '1661-01-16<1661-01-16>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Truchseß']

--------- Start of row | 94 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1684-00-00/1684-03-14<1684-00-00 - 1684-03-14>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1684-00-00/1684-03-14<1684-00-00 - 1684-03-14>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1684-00-00/1684-03-14<1684-00-00 - 1684-03-14>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1684-00-00/1684-03-14<1684-00-00 - 1684-03-14>', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1684-00-00 - 1684-03-14>
helper_hsv_post_process_dates >>> new_i_date: <1684-06-30 - 1684-03-14>
helper_hsv_post_process_dates >>> old: 1684-00-00/1684-03-14<1684-00-00 - 1684-03-14>, new: 1684-00-00/1684-03-14<1684-06-30 - 1684-03-14>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1684-00-00/1684-03-14<1684-06-30 - 1684-03-14>
chunk_process_datum >>> rel, chunk edw: 1684-00-00/1684-03-14<1684-06-30 - 1684-03-14>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Michael Adolph>, 'start_date_written': '1684-00-00/1684-03-14<1684-06-30 - 1684-03-14>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 95 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-06-01', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-06-01', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-06-01', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1675-06-01', 'bis 1677<1677-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1675-06-01, new: 1675-06-01<1675-06-01>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675-06-01<1675-06-01>
chunk_process_datum >>> rel, chunk edw: 1675-06-01<1675-06-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Michael Franz Ferdinand >, 'start_date_written': '1675-06-01<1675-06-01>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 96 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1658-03-19', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1658-03-19', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1658-03-19', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA; HK / Grafen- , Herrenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  HK 
process_chunks >>> cD ['1658-03-19', 'bis 1704<1704-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1658-03-19, new: 1658-03-19<1658-03-19>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1658-03-19<1658-03-19>
chunk_process_datum >>> rel, chunk edw: 1658-03-19<1658-03-19>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Michael Wenzel>, 'start_date_written': '1658-03-19<1658-03-19>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA  HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Michael Wenzel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  HK 
chunk_process_amt_NEW >>> c_A was:  HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 97 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan (Althaimb)
person_process_field_familienname >>> fam1: Althan
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 17), match='(Althaimb)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1656-08-14', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1656-08-14', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1656-08-14', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1656-08-14', 'bis 1677<1677-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1656-08-14, new: 1656-08-14<1656-08-14>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1656-08-14<1656-08-14>
chunk_process_datum >>> rel, chunk edw: 1656-08-14<1656-08-14>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Wilhelm Wenzel>, 'start_date_written': '1656-08-14<1656-08-14>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 98 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan (Althann)
person_process_field_familienname >>> fam1: Althan
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 16), match='(Althann)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00', 'bis 1687<1687-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Oberstjägermeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00', 'bis 1687<1687-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Oberstjägermeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00', 'bis 1687<1687-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstjägermeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OJäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OJäA
process_chunks >>> cD ['1669-00-00', 'bis 1687<1687-06-30>'], cF ['Oberstjägermeister'], cH L, CA OJäA
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669-00-00<1669-06-30>
helper_hsv_post_process_dates >>> inner date: <1687-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1687-06-30>
helper_hsv_post_process_dates >>> old: bis 1687<1687-06-30>, new: bis 1687<1687-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669-00-00<1669-06-30>
chunk_process_datum >>> rel, chunk edw: 1669-00-00<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, Christoph >, 'start_date_written': '1669-00-00<1669-06-30>', 'end_date_written': 'bis 1687<1687-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OJäA
chunk_process_amt_NEW >>> c_A was: OJäA and amt after matching with amt index is: OJäA
chunk_process_amt_NEW >>>  Return value of inst2 = OJäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstjägermeister']

--------- Start of row | 99 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan, oo Lobkowitz
person_process_field_titel >>> t_tit = Gräfin; Fürstin
person_process_field_titel >>> t_list = ['Gräfin', 'Fürstin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1699-01-01', 'bis 1702-11-30<1702-11-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein', 'Heirat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1699-01-01', 'bis 1702-11-30<1702-11-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein', 'Heirat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = AW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: AW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: AW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1699-01-01', 'bis 1702-11-30<1702-11-30>'], 'HOFSTAAT': 'AW', 'FUNKTION': ['Kammerfräulein', 'Heirat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1699-01-01', 'bis 1702-11-30<1702-11-30>'], cF ['Kammerfräulein', 'Heirat'], cH AW, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1699-01-01, new: 1699-01-01<1699-01-01>
helper_hsv_post_process_dates >>> inner date: <1702-11-30>
helper_hsv_post_process_dates >>> new_i_date: <1702-11-30>
helper_hsv_post_process_dates >>> old: bis 1702-11-30<1702-11-30>, new: bis 1702-11-30<1702-11-30>
chunk_process_datum >>> rel, chunk sdw: 1699-01-01<1699-01-01>
chunk_process_datum >>> rel, chunk edw: 1699-01-01<1699-01-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: NEEDS REVIEW, Maria Philippina>, 'start_date_written': '1699-01-01<1699-01-01>', 'end_date_written': 'bis 1702-11-30<1702-11-30>'}
chunk_get_nm_hst >>> c_H = AW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: AW (Kgin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (AW (Kgin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein', 'Heirat']

--------- Start of row | 100 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Althan, von END INPUT, ROW:100
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, von, Franz Dieter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 101 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Althan, von END INPUT, ROW:101
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, von, Wenzel >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 102 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Althan, von (Althamb, Altheim)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Althan, von (Althamb, Altheim) END INPUT, ROW:102
person_process_field_familienname >>> fam1: Althan, von
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 30), match='(Althamb, Altheim)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1665-05-14', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1665-05-14', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1665-05-14', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1665-05-14', 'bis 1678<1678-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1665-05-14, new: 1665-05-14<1665-05-14>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1665-05-14<1665-05-14>
chunk_process_datum >>> rel, chunk edw: 1665-05-14<1665-05-14>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Althan, von, Michael Hanns >, 'start_date_written': '1665-05-14<1665-05-14>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 103 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Altheim
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1675-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675-00-00<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675-00-00<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Altheim, Christoph Johann>, 'start_date_written': '1675-00-00<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 104 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Altheim
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Oberstküchenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Oberstküchenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstküchenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
process_chunks >>> cD ['1675-00-00'], cF ['Oberstküchenmeister'], cH L, CA OMeA
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675-00-00<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675-00-00<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Altheim, Johann Christoph>, 'start_date_written': '1675-00-00<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstküchenmeister']

--------- Start of row | 105 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Altheim
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1675-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675-00-00<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675-00-00<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Altheim, Michael Wenzel>, 'start_date_written': '1675-00-00<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 106 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Alting [Oettingen?]
person_process_field_familienname >>> fam1: Alting
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 19), match='[Oettingen?]'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', '1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', '1675-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>', '1675-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>', '1675-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675-00-00<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk edw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alting, Franz Anton>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>', 'end_date_written': '1675-00-00<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 107 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Altschaffer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Diener', 'Patrum'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Diener', 'Patrum'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Diener', 'Patrum'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1663-00-00'], cF ['Diener', 'Patrum'], cH LW, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663-00-00<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663-00-00<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Altschaffer, Georg>, 'start_date_written': '1663-00-00<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (LW)
chunk_create_relations >>> create realtions called for c_F ['Diener', 'Patrum']

--------- Start of row | 108 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aluernia Saluza (Saluzzo)
person_process_field_familienname >>> fam1: Aluernia Saluza
person_process_field_familienname >>> fam2: <re.Match object; span=(16, 25), match='(Saluzzo)'>
person_process_field_titel >>> t_tit = Marques
person_process_field_titel >>> t_list = ['Marques']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-10-24'], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-10-24'], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-10-24'], 'HOFSTAAT': 'L', 'FUNKTION': ['Mundschenk'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
process_chunks >>> cD ['1676-10-24'], cF ['Mundschenk'], cH L, CA OMeA
helper_hsv_post_process_dates >>> old: 1676-10-24, new: 1676-10-24<1676-10-24>
chunk_process_datum >>> rel, chunk sdw: 1676-10-24<1676-10-24>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aluernia Saluza, Franz Anton >, 'start_date_written': '1676-10-24<1676-10-24>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Mundschenk']

--------- Start of row | 109 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aluni (Alunij)
person_process_field_familienname >>> fam1: Aluni
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 14), match='(Alunij)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Registrant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Registrant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Registrant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Registranten; HK-NÖ Expedition / Alte Registratur
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Registrant'], cH L, CA HK / Registranten
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aluni, Johann Leopold>, 'start_date_written': '1701-00-00<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK / Registranten
chunk_process_amt_NEW >>> c_A was: HK / Registranten and amt after matching with amt index is: HK / Registranten
chunk_process_amt_NEW >>>  Return value of inst2 = HK / Registranten (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Registrant']

--------- Start of row | 110 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Amann (Aman, Amanth, Amman, Ammann, Ammon, Amon)
person_process_field_familienname >>> fam1: Amann
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 48), match='(Aman, Amanth, Amman, Ammann, Ammon, Amon)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkontrollor'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkontrollor'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkontrollor'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Offiziere ,a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD [], cF ['Hofkontrollor'], cH L, CA OMeA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Amann, Johann Caspar >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkontrollor']

--------- Start of row | 111 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ambringen, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Ambringen, von END INPUT, ROW:111
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammerherren
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1663-00-00'], cF ['Kämmerer'], cH LW, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663-00-00<1663-06-30>
chunk_process_datum >>> rel, chunk sdw: 1663-00-00<1663-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ambringen, von, Hanns Caspar>, 'start_date_written': '1663-00-00<1663-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (LW)
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 112 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Amman (Amen, Ammon,  Amon, Aninn)
person_process_field_familienname >>> fam1: Amman
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 33), match='(Amen, Ammon,  Amon, Aninn)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Einspänniger'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Einspänniger'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Einspänniger'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ(?) / Einspännige; NÖ-R / Kanzlisten
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1704<1704-06-30>'], cF ['Einspänniger'], cH L, CA NÖ(?) / Einspännige
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Amman, Martin>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ(?) / Einspännige
chunk_process_amt_NEW >>> c_A was: NÖ(?) / Einspännige and amt after matching with amt index is: NÖ(?) / Einspännige
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ(?) / Einspännige (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Einspänniger']

--------- Start of row | 113 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ammon
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Agent'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Agenten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
process_chunks >>> cD ['1704-00-00'], cF ['Agent'], cH L, CA HKR 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ammon, Franz Xaver Philipp>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Agent']

--------- Start of row | 114 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Amphoso
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1684'], 'HOFSTAAT': None, 'FUNKTION': ['Ballmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1684'], 'HOFSTAAT': None, 'FUNKTION': ['Ballmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = ksl.
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ksl.
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ksl.
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1684'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Ballmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1684'], cF ['Ballmeister'], cH ksl., CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1684, new: 1684<1684>
chunk_process_datum >>> rel, chunk sdw: 1684<1684>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Amphoso, Hans Jacob>, 'start_date_written': '1684<1684>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Ballmeister']
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1684<1684> ' due to error ('Invalid iso date: ', '1684'): 

--------- Start of row | 115 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anbringen, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Anbringen, von END INPUT, ROW:115
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1662-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1662-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1662-00-00'], 'HOFSTAAT': 'LW', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1662-00-00'], cF ['Kämmerer'], cH LW, CA OKäA
helper_hsv_post_process_dates >>> old: 1662-00-00, new: 1662-00-00<1662-06-30>
chunk_process_datum >>> rel, chunk sdw: 1662-00-00<1662-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anbringen, von, Hans Caspar>, 'start_date_written': '1662-00-00<1662-06-30>'}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (LW)
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 116 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Andenegg
person_process_field_titel >>> t_tit = JUD
person_process_field_titel >>> t_list = ['JUD']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Advokat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Advokat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Advokat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Advokaten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
process_chunks >>> cD ['1704-00-00'], cF ['Advokat'], cH L, CA HKR 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andenegg, Franz>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Advokat']

--------- Start of row | 117 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anderln (Andler)
person_process_field_familienname >>> fam1: Anderln
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 16), match='(Andler)'>
person_process_field_titel >>> t_tit = Edler; Freiherr
person_process_field_titel >>> t_list = ['Edler', 'Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (kurbair. Regierungsrat, Regimentsrat, 1698-03-01, Reichshofrat, 1710-00-00, Regimentsrat, 1701-00-00, Regierungsrat, 1704-00-00)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :117, kurbair. Regierungsrat in Straubin; Regimentsrat (1698-03-01) ; dekretierter ksl. Reichshofrat (1710-00-00) ; Regimentsrat, Ritterstand (1701-00-00) ; Regierungsrat, Ritterstand (1704-00-00), [{'start': 0, 'end': 22, 'token_start': 0, 'token_end': 2, 'label': 'FUNKTION'}, {'start': 36, 'end': 48, 'token_start': 6, 'token_end': 6, 'label': 'FUNKTION'}, {'start': 50, 'end': 60, 'token_start': 8, 'token_end': 12, 'label': 'DATUM'}, {'start': 81, 'end': 93, 'token_start': 18, 'token_end': 18, 'label': 'FUNKTION'}, {'start': 95, 'end': 105, 'token_start': 20, 'token_end': 24, 'label': 'DATUM'}, {'start': 108, 'end': 120, 'token_start': 27, 'token_end': 27, 'label': 'FUNKTION'}, {'start': 135, 'end': 145, 'token_start': 31, 'token_end': 35, 'label': 'DATUM'}, {'start': 148, 'end': 161, 'token_start': 38, 'token_end': 38, 'label': 'FUNKTION'}, {'start': 176, 'end': 186, 'token_start': 42, 'token_end': 46, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [kurbair. Regierungsrat, Regimentsrat, 1698-03-01, Reichshofrat, 1710-00-00, Regimentsrat, 1701-00-00, Regierungsrat, 1704-00-00]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (kurbair. Regierungsrat, Regimentsrat, 1698-03-01, Reichshofrat, 1710-00-00, Regimentsrat, 1701-00-00, Regierungsrat, 1704-00-00)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(5) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['kurbair. Regierungsrat'], 'AMT': None}, {'DATUM': ['1698-03-01'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1710-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['kurbair. Regierungsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1698-03-01'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1710-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 5, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['kurbair. Regierungsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1698-03-01'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1710-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regierungsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RKz / Ritterstand; NÖ-RR / Ritterstand
process_chunks >>> cD [], cF ['kurbair. Regierungsrat'], cH L, CA NÖ-RKz / Ritterstand
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anderln, Franz Vollmar >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RKz / Ritterstand
chunk_process_amt_NEW >>> c_A was: NÖ-RKz / Ritterstand and amt after matching with amt index is: NÖ-RKz / Ritterstand
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RKz / Ritterstand (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['kurbair. Regierungsrat']
process_chunks >>> cD ['1698-03-01'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1698-03-01, new: 1698-03-01<1698-03-01>
chunk_process_datum >>> rel, chunk sdw: 1698-03-01<1698-03-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anderln, Franz Vollmar >, 'start_date_written': '1698-03-01<1698-03-01>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']
process_chunks >>> cD ['1710-00-00'], cF ['Reichshofrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1710-00-00, new: 1710-00-00<1710-06-30>
chunk_process_datum >>> rel, chunk sdw: 1710-00-00<1710-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anderln, Franz Vollmar >, 'start_date_written': '1710-00-00<1710-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Reichshofrat']
process_chunks >>> cD ['1701-00-00'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anderln, Franz Vollmar >, 'start_date_written': '1701-00-00<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']
process_chunks >>> cD ['1704-00-00'], cF ['Regierungsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anderln, Franz Vollmar >, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regierungsrat']

--------- Start of row | 118 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Andler (Andlern, Antler)
person_process_field_familienname >>> fam1: Andler
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 24), match='(Andlern, Antler)'>
person_process_field_titel >>> t_tit = Edler, Freiherr
person_process_field_titel >>> t_list = ['Edler, Freiherr']
person_process_field_titel >>> Komma in tit: Edler, Freiherr
person_process_field_titel >>> CREATING SPLIT TITLE Edler from Edler, Freiherr
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Edler, Freiherr
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(4) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}, {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}, {'DATUM': ['1697-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1697-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 4, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Registrator'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1697-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHK-LE; NÖ-RR / Ritterstand
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA RHK-LE
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andler, Johann Philipp>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHK-LE
chunk_process_amt_NEW >>> c_A was: RHK-LE and amt after matching with amt index is: RHK-LE
chunk_process_amt_NEW >>>  Return value of inst2 = RHK-LE (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']
process_chunks >>> cD ['1678-00-00'], cF ['Registrator'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1678-00-00, new: 1678-00-00<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678-00-00<1678-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andler, Johann Philipp>, 'start_date_written': '1678-00-00<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Registrator']
process_chunks >>> cD ['1697-00-00'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1697-00-00, new: 1697-00-00<1697-06-30>
chunk_process_datum >>> rel, chunk sdw: 1697-00-00<1697-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andler, Johann Philipp>, 'start_date_written': '1697-00-00<1697-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']
process_chunks >>> cD ['1701-00-00'], cF ['Regimentsrat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andler, Johann Philipp>, 'start_date_written': '1701-00-00<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 119 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Andler, von (Andleren, Andlern, Antley, von)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Andler, von (Andleren, Andlern, Antley, von) END INPUT, ROW:119
person_process_field_familienname >>> fam1: Andler, von
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 44), match='(Andleren, Andlern, Antley, von)'>
person_process_field_titel >>> t_tit = Freiherr , Edler
person_process_field_titel >>> t_list = ['Freiherr , Edler']
person_process_field_titel >>> Komma in tit: Freiherr , Edler
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Freiherr , Edler
person_process_field_titel >>> CREATING SPLIT TITLE Edler from Freiherr , Edler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00', 'bis 1701<1701-06-30>', 'ab 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00', 'bis 1701<1701-06-30>', 'ab 1685-11-01<1685-11-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00', 'bis 1701<1701-06-30>', 'ab 1685-11-01<1685-11-01>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Gelehrtenbank; RHR / Ritter- , Gelehrtenstand
process_chunks >>> cD ['1669-00-00', 'bis 1701<1701-06-30>', 'ab 1685-11-01<1685-11-01>'], cF ['Reichshofrat'], cH L, CA RHR / Gelehrtenbank
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andler, von, Franz Friedrich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR / Gelehrtenbank
chunk_process_amt_NEW >>> c_A was: RHR / Gelehrtenbank and amt after matching with amt index is: RHR / Gelehrtenbank
chunk_process_amt_NEW >>>  Return value of inst2 = RHR / Gelehrtenbank (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Reichshofrat']

--------- Start of row | 120 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Andleuer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
process_chunks >>> cD ['1677-00-00'], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677-00-00<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677-00-00<1677-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andleuer, Franz Christoph>, 'start_date_written': '1677-00-00<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 121 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ,G with: , G
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Andrimont (Antrimont, Antrindt, Vrtrimont)
person_process_field_familienname >>> fam1: Andrimont
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 42), match='(Antrimont, Antrindt, Vrtrimont)'>
person_process_field_titel >>> t_tit = Baron, Freiherr
person_process_field_titel >>> t_list = ['Baron, Freiherr']
person_process_field_titel >>> Komma in tit: Baron, Freiherr
person_process_field_titel >>> CREATING SPLIT TITLE Baron from Baron, Freiherr
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Baron, Freiherr
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678-00-000<1678-00-000>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678-00-000<1678-00-000>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678-00-000<1678-00-000>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678-00-000<1678-00-000>'], cF ['Hofkriegsrat'], cH L, CA HKR
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-00-000>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-300>
helper_hsv_post_process_dates >>> old: bis 1678-00-000<1678-00-000>, new: bis 1678-00-000<1678-06-300>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andrimont, Johann>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678-00-000<1678-06-300>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andrimont, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 122 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Andtlern
person_process_field_titel >>> t_tit = Freiherr, Edler
person_process_field_titel >>> t_list = ['Freiherr, Edler']
person_process_field_titel >>> Komma in tit: Freiherr, Edler
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Freiherr, Edler
person_process_field_titel >>> CREATING SPLIT TITLE Edler from Freiherr, Edler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Ritter- , Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>'], cF ['Reichshofrat'], cH L, CA RHR 
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Andtlern, Franz Friedrich>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: RHR
chunk_process_amt_NEW >>>  Return value of inst2 = RHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Reichshofrat']

--------- Start of row | 123 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anfong (Anfang)
person_process_field_familienname >>> fam1: Anfong
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Anfang)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Türhüter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Türhüter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Türhüter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], cF ['Türhüter'], cH L, CA HKR 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anfong, Niclas >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Türhüter']

--------- Start of row | 124 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anfoso
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabenballonmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabenballonmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Edelknabenballonmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
process_chunks >>> cD ['1704-00-00'], cF ['Edelknabenballonmeister'], cH L, CA OStA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anfoso, Johann Andre>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Edelknabenballonmeister']

--------- Start of row | 125 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Angenmayr
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Tenor'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Tenor'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Tenor'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofmusikanten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD ['1704-00-00'], cF ['Tenor'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Angenmayr, Johannes>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Tenor']

--------- Start of row | 126 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Angerstein
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['? 1669<1669-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['? 1669<1669-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['? 1669<1669-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OÖ-HKz
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OÖ-HKz
process_chunks >>> cD ['? 1669<1669-06-30>'], cF ['Kanzlist'], cH L, CA OÖ-HKz
helper_hsv_post_process_dates >>> inner date: <1669-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1669-06-30>
helper_hsv_post_process_dates >>> old: ? 1669<1669-06-30>, new: ? 1669<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: ? 1669<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Angerstein, Zacharias>, 'start_date_written': '? 1669<1669-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OÖ-HKz
chunk_process_amt_NEW >>> c_A was: OÖ-HKz and amt after matching with amt index is: OÖ-HKz
chunk_process_amt_NEW >>>  Return value of inst2 = OÖ-HKz (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 127 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Angirsola
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- , Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Angirsola, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 128 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Angst
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Konzipisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>'], cF ['Konzipist'], cH L, CA HK 
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Angst, Ferdinand>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Konzipist']

--------- Start of row | 129 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anguisola (Anguissola)
person_process_field_familienname >>> fam1: Anguisola
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 22), match='(Anguissola)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Edelknabeninstruktor in militär., Ingenieurskunst, Ingenieur, 1700-04-01, 1704-00-00, Oberstleutnant)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :129, Edelknabeninstruktor in militär., Ingenieurskunst; Ingenieur (1700-04-01 \ 1704-00-00) ; Oberstleutnant, [{'start': 0, 'end': 49, 'token_start': 0, 'token_end': 5, 'label': 'FUNKTION'}, {'start': 51, 'end': 60, 'token_start': 7, 'token_end': 7, 'label': 'FUNKTION'}, {'start': 62, 'end': 72, 'token_start': 9, 'token_end': 13, 'label': 'DATUM'}, {'start': 75, 'end': 85, 'token_start': 15, 'token_end': 19, 'label': 'DATUM'}, {'start': 88, 'end': 102, 'token_start': 22, 'token_end': 22, 'label': 'FUNKTION'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Edelknabeninstruktor in militär., Ingenieurskunst, Ingenieur, 1700-04-01, 1704-00-00, Oberstleutnant]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Edelknabeninstruktor in militär., Ingenieurskunst, Ingenieur, 1700-04-01, 1704-00-00, Oberstleutnant)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(3) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabeninstruktor in militär., Ingenieurskunst'], 'AMT': None}, {'DATUM': ['1700-04-01', '1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Ingenieur'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstleutnant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabeninstruktor in militär., Ingenieurskunst'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1700-04-01', '1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Ingenieur'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstleutnant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 3, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L; J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Edelknabeninstruktor in militär., Ingenieurskunst'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1700-04-01', '1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Ingenieur'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstleutnant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Bibliothecarius; OStA
process_chunks >>> cD [], cF ['Edelknabeninstruktor in militär., Ingenieurskunst'], cH L, CA OMeA / Bibliothecarius
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anguisola, Alexander >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA / Bibliothecarius
chunk_process_amt_NEW >>> c_A was: OMeA / Bibliothecarius and amt after matching with amt index is: OMeA / Bibliothecarius
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA / Bibliothecarius (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Edelknabeninstruktor in militär., Ingenieurskunst']
process_chunks >>> cD ['1700-04-01', '1704-00-00'], cF ['Ingenieur'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1700-04-01, new: 1700-04-01<1700-04-01>
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1700-04-01<1700-04-01>
chunk_process_datum >>> rel, chunk edw: 1700-04-01<1700-04-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anguisola, Alexander >, 'start_date_written': '1700-04-01<1700-04-01>', 'end_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Ingenieur']
process_chunks >>> cD [], cF ['Oberstleutnant'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anguisola, Alexander >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstleutnant']

--------- Start of row | 130 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anguisola (Anquisola(?), Aquisola)
person_process_field_familienname >>> fam1: Anguisola
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 32), match='(Anquisola?, Aquisola)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- , Hoffräulein / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hoffräulein', 'Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anguisola, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Hoffräulein', 'Kammerfräulein']

--------- Start of row | 131 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Angula Velasco, d'
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = MMT
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-00-00'], 'HOFSTAAT': 'MMT', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Mannspersonen)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Mannspersonen)
process_chunks >>> cD ['1666-00-00'], cF ['Sekretär'], cH MMT, CA (Mannspersonen)
helper_hsv_post_process_dates >>> old: 1666-00-00, new: 1666-00-00<1666-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666-00-00<1666-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Angula Velasco, d', Isidoro>, 'start_date_written': '1666-00-00<1666-06-30>'}
chunk_get_nm_hst >>> c_H = MMT
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMT (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Mannspersonen)
chunk_process_amt_NEW >>> c_A was: (Mannspersonen) and amt after matching with amt index is: (Mannspersonen)
chunk_process_amt_NEW >>>  Return value of inst2 = (Mannspersonen) (MMT (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 132 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Angulo, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Angulo, de END INPUT, ROW:132
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['? 1666<1666-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['? 1666<1666-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = MMT
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['? 1666<1666-06-30>'], 'HOFSTAAT': 'MMT', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammerbedienstete (Las de la Camara))
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammerbedienstete (Las de la Camara))
process_chunks >>> cD ['? 1666<1666-06-30>'], cF ['Kammerdienerin'], cH MMT, CA (Kammerbedienstete (Las de la Camara))
helper_hsv_post_process_dates >>> inner date: <1666-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1666-06-30>
helper_hsv_post_process_dates >>> old: ? 1666<1666-06-30>, new: ? 1666<1666-06-30>
chunk_process_datum >>> rel, chunk sdw: ? 1666<1666-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Angulo, de, Gerongma>, 'start_date_written': '? 1666<1666-06-30>'}
chunk_get_nm_hst >>> c_H = MMT
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMT (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammerbedienstete (Las de la Camara))
chunk_process_amt_NEW >>> c_A was: (Kammerbedienstete (Las de la Camara)) and amt after matching with amt index is: (Kammerbedienstete (Las de la Camara))
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammerbedienstete (Las de la Camara)) (MMT (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 133 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anhalt
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anhalt, Christian>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 134 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anquisola
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- , Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anquisola, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 135 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ansalon
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = ME
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ME
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ME
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'ME', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1704-00-00'], cF ['Kammerdienerin'], cH ME, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ansalon, Maria Catharina>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = ME
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: ME (L1)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (ME (L1))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 136 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ansalone
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Bassist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Bassist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Bassist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofmusikanten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD ['1704-00-00'], cF ['Bassist'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ansalone, Ferdinand Maria>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Bassist']

--------- Start of row | 137 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anschau/Auschau?
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Amtsoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Amtsoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Amtsoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Hoffuttermeister
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA 
process_chunks >>> cD ['1704-00-00'], cF ['Amtsoffizier'], cH L, CA OStA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anschau/Auschau?, Johann Simon>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA 
chunk_process_amt_NEW >>> c_A was: OStA  and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Amtsoffizier']

--------- Start of row | 138 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Antion
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1676-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1676-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
process_chunks >>> cD ['1676-00-00'], cF ['Reichshofrat'], cH L, CA RHR 
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676-00-00<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676-00-00<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Antion, Franz Friedrich>, 'start_date_written': '1676-00-00<1676-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: RHR
chunk_process_amt_NEW >>>  Return value of inst2 = RHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Reichshofrat']

--------- Start of row | 139 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Anurso, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Anurso, de END INPUT, ROW:139
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Agent'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Agenten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
process_chunks >>> cD ['1704-00-00'], cF ['Agent'], cH L, CA HKR 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Anurso, de, Augustin Jakob>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Agent']

--------- Start of row | 140 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Apel
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD ['1669-00-00'], cF ['Sekretär'], cH L, CA NÖ-R 
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669-00-00<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669-00-00<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Apel, Franz>, 'start_date_written': '1669-00-00<1669-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 141 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Apelshoffer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1695-11-01'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabentanzmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1695-11-01'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabentanzmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1695-11-01'], 'HOFSTAAT': 'J', 'FUNKTION': ['Edelknabentanzmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
process_chunks >>> cD ['1695-11-01'], cF ['Edelknabentanzmeister'], cH J, CA OStA
helper_hsv_post_process_dates >>> old: 1695-11-01, new: 1695-11-01<1695-11-01>
chunk_process_datum >>> rel, chunk sdw: 1695-11-01<1695-11-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Apelshoffer, Claudius Johann>, 'start_date_written': '1695-11-01<1695-11-01>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Edelknabentanzmeister']

--------- Start of row | 142 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Aperl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00'], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1669-00-00'], cF ['Kammerdiener'], cH EM, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669-00-00<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669-00-00<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Aperl, Johann>, 'start_date_written': '1669-00-00<1669-06-30>'}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 143 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Appelshoffer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Tanzmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Tanzmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'J', 'FUNKTION': ['Tanzmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
process_chunks >>> cD ['1704-00-00'], cF ['Tanzmeister'], cH J, CA OStA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Appelshoffer, Claudius>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Tanzmeister']

--------- Start of row | 144 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Apremunth
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Apremunth, Ferdinand Gabert >, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 145 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arberg/Arnsberg?
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1704-00-00'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arberg/Arnsberg?, Peter Ernst>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 146 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arbeser (Arbesser)
person_process_field_familienname >>> fam1: Arbeser
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 18), match='(Arbesser)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD ['1675/76-00-00<1675-06-30 - 76-00-00>', 'bis 1677<1677-06-30>'], cF ['Raitoffizier'], cH Dummy Hofstaat, CA NÖ-LG
helper_hsv_post_process_dates >>> inner date: <1675-06-30 - 76-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> old: 1675/76-00-00<1675-06-30 - 76-00-00>, new: 1675/76-00-00<1675-06-30 - 76-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>> rel, chunk edw: 1675/76-00-00<1675-06-30 - 76-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arbeser, Johann Ferdinand>, 'start_date_written': '1675/76-00-00<1675-06-30 - 76-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 147 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arbesser (Arbeisser)
person_process_field_familienname >>> fam1: Arbesser
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 20), match='(Arbeisser)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Rentmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Rentmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Rentmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG? / Rentamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG? 
process_chunks >>> cD ['1701-00-00', 'bis 1704<1704-06-30>'], cF ['Rentmeister'], cH Dummy Hofstaat, CA NÖ-LG? 
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk edw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arbesser, Ambrosius Maximilian >, 'start_date_written': '1701-00-00<1701-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG? 
chunk_process_amt_NEW >>> c_A was: NÖ-LG?  and amt after matching with amt index is: NÖ-LG?
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG? (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Rentmeister']

--------- Start of row | 148 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arbonacz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Akzessist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Akzessist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Akzessist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = UHKz / Accessisen
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = UHKz 
process_chunks >>> cD ['1704-00-00'], cF ['Akzessist'], cH L, CA UHKz 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arbonacz, Johann >, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: UHKz 
chunk_process_amt_NEW >>> c_A was: UHKz  and amt after matching with amt index is: UHKz
chunk_process_amt_NEW >>>  Return value of inst2 = UHKz (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Akzessist']

--------- Start of row | 149 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arch (Arco)
person_process_field_familienname >>> fam1: Arch
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 11), match='(Arco)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1681-12-09', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1681-12-09', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1681-12-09', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1681-12-09', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1681-12-09, new: 1681-12-09<1681-12-09>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1681-12-09<1681-12-09>
chunk_process_datum >>> rel, chunk edw: 1681-12-09<1681-12-09>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arch, Philipp>, 'start_date_written': '1681-12-09<1681-12-09>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 150 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arch (Arco)
person_process_field_familienname >>> fam1: Arch
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 11), match='(Arco)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['FM, ksl.', 'Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['FM, ksl.', 'Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['FM, ksl.', 'Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR; OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OKäA
process_chunks >>> cD ['1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>'], cF ['Kämmerer'], cH L, CA GR
helper_hsv_post_process_dates >>> inner date: <1689-03-14 - 1689-10-03>
helper_hsv_post_process_dates >>> new_i_date: <1689-03-14 - 1689-10-03>
helper_hsv_post_process_dates >>> old: 1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>, new: 1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>
chunk_process_datum >>> rel, chunk sdw: 1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arch, Vinciguera >, 'start_date_written': '1689-03-14/1689-10-03<1689-03-14 - 1689-10-03>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']
process_chunks >>> cD ['1704-00-00'], cF ['FM, ksl.', 'Geh. Rat'], cH L, CA  OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arch, Vinciguera >, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OKäA
chunk_process_amt_NEW >>> c_A was:  OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['FM, ksl.', 'Geh. Rat']

--------- Start of row | 151 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Archer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1702-02-01', 'bis 1704-10-01<1704-10-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammertrabant', 'Silberdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1702-02-01', 'bis 1704-10-01<1704-10-01>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammertrabant', 'Silberdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = AW; JH; MJB
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1702-02-01', 'bis 1704-10-01<1704-10-01>'], 'HOFSTAAT': 'AW', 'FUNKTION': ['Kammertrabant', 'Silberdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
process_chunks >>> cD ['1702-02-01', 'bis 1704-10-01<1704-10-01>'], cF ['Kammertrabant', 'Silberdiener'], cH AW, CA OMeA
helper_hsv_post_process_dates >>> old: 1702-02-01, new: 1702-02-01<1702-02-01>
helper_hsv_post_process_dates >>> inner date: <1704-10-01>
helper_hsv_post_process_dates >>> new_i_date: <1704-10-01>
helper_hsv_post_process_dates >>> old: bis 1704-10-01<1704-10-01>, new: bis 1704-10-01<1704-10-01>
chunk_process_datum >>> rel, chunk sdw: 1702-02-01<1702-02-01>
chunk_process_datum >>> rel, chunk edw: 1702-02-01<1702-02-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Archer, Christoph Heinrich>, 'start_date_written': '1702-02-01<1702-02-01>', 'end_date_written': 'bis 1704-10-01<1704-10-01>'}
chunk_get_nm_hst >>> c_H = AW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: AW (Kgin.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (AW (Kgin.))
chunk_create_relations >>> create realtions called for c_F ['Kammertrabant', 'Silberdiener']

--------- Start of row | 152 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Archinto
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-12-24', 'bis 1680-04-15<1680-04-15>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-12-24', 'bis 1680-04-15<1680-04-15>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-12-24', 'bis 1680-04-15<1680-04-15>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1677-12-24', 'bis 1680-04-15<1680-04-15>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1677-12-24, new: 1677-12-24<1677-12-24>
helper_hsv_post_process_dates >>> inner date: <1680-04-15>
helper_hsv_post_process_dates >>> new_i_date: <1680-04-15>
helper_hsv_post_process_dates >>> old: bis 1680-04-15<1680-04-15>, new: bis 1680-04-15<1680-04-15>
chunk_process_datum >>> rel, chunk sdw: 1677-12-24<1677-12-24>
chunk_process_datum >>> rel, chunk edw: 1677-12-24<1677-12-24>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Archinto, Ludovico>, 'start_date_written': '1677-12-24<1677-12-24>', 'end_date_written': 'bis 1680-04-15<1680-04-15>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 153 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arco
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}, {'DATUM': ['1673-02-23'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1673-02-23'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Edelknabe'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1673-02-23'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
process_chunks >>> cD [], cF ['Edelknabe'], cH L, CA OStA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arco, Scipio Anton>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Edelknabe']
process_chunks >>> cD ['1673-02-23'], cF ['Truchseß'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1673-02-23, new: 1673-02-23<1673-02-23>
chunk_process_datum >>> rel, chunk sdw: 1673-02-23<1673-02-23>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arco, Scipio Anton>, 'start_date_written': '1673-02-23<1673-02-23>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Truchseß']

--------- Start of row | 154 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ardaris (Ardois, Ardeiß, Ardris, Artedi, Artois, Erdödy)
person_process_field_familienname >>> fam1: Ardaris
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 56), match='(Ardois, Ardeiß, Ardris, Artedi, Artois, Erdödy)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1666-10-10', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1666-10-10', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1666-10-10', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1666-10-10', 'bis 1678<1678-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1666-10-10, new: 1666-10-10<1666-10-10>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666-10-10<1666-10-10>
chunk_process_datum >>> rel, chunk edw: 1666-10-10<1666-10-10>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ardaris, Adam>, 'start_date_written': '1666-10-10<1666-10-10>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 155 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ardödi (Arteti, Erdödy)
person_process_field_familienname >>> fam1: Ardödi
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 23), match='(Arteti, Erdödy)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1661-12-07', 'bis 1670-03-22<1670-03-22>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1661-12-07', 'bis 1670-03-22<1670-03-22>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1661-12-07', 'bis 1670-03-22<1670-03-22>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1661-12-07', 'bis 1670-03-22<1670-03-22>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1661-12-07, new: 1661-12-07<1661-12-07>
helper_hsv_post_process_dates >>> inner date: <1670-03-22>
helper_hsv_post_process_dates >>> new_i_date: <1670-03-22>
helper_hsv_post_process_dates >>> old: bis 1670-03-22<1670-03-22>, new: bis 1670-03-22<1670-03-22>
chunk_process_datum >>> rel, chunk sdw: 1661-12-07<1661-12-07>
chunk_process_datum >>> rel, chunk edw: 1661-12-07<1661-12-07>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ardödi, Georg>, 'start_date_written': '1661-12-07<1661-12-07>', 'end_date_written': 'bis 1670-03-22<1670-03-22>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 156 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ardoedi (Arteti, Erdödy)
person_process_field_familienname >>> fam1: Ardoedi
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 24), match='(Arteti, Erdödy)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1663-12-01', 'bis 1674/75<1674-06-30 - 75>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1663-12-01', 'bis 1674/75<1674-06-30 - 75>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1663-12-01', 'bis 1674/75<1674-06-30 - 75>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1663-12-01', 'bis 1674/75<1674-06-30 - 75>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1663-12-01, new: 1663-12-01<1663-12-01>
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75>
helper_hsv_post_process_dates >>> old: bis 1674/75<1674-06-30 - 75>, new: bis 1674/75<1674-06-30 - 75>
chunk_process_datum >>> rel, chunk sdw: 1663-12-01<1663-12-01>
chunk_process_datum >>> rel, chunk edw: 1663-12-01<1663-12-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ardoedi, Alexander>, 'start_date_written': '1663-12-01<1663-12-01>', 'end_date_written': 'bis 1674/75<1674-06-30 - 75>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 157 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ardoldi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ardoldi, Christoph>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 158 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Ardoldi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1674/75-00-00<1674-06-30 - 75-00-00>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1674/75-00-00<1674-06-30 - 75-00-00>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ardoldi, Niclas>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 159 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Argenta, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Argenta, de END INPUT, ROW:159
person_process_field_titel >>> t_tit = Conte
person_process_field_titel >>> t_list = ['Conte']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1689-00-00/1689-11-23<1689-00-00 - 1689-11-23>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1689-00-00/1689-11-23<1689-00-00 - 1689-11-23>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1689-00-00/1689-11-23<1689-00-00 - 1689-11-23>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1689-00-00/1689-11-23<1689-00-00 - 1689-11-23>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1689-00-00 - 1689-11-23>
helper_hsv_post_process_dates >>> new_i_date: <1689-06-30 - 1689-11-23>
helper_hsv_post_process_dates >>> old: 1689-00-00/1689-11-23<1689-00-00 - 1689-11-23>, new: 1689-00-00/1689-11-23<1689-06-30 - 1689-11-23>
chunk_process_datum >>> rel, chunk sdw: 1689-00-00/1689-11-23<1689-06-30 - 1689-11-23>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Argenta, de, Carolo>, 'start_date_written': '1689-00-00/1689-11-23<1689-06-30 - 1689-11-23>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 160 | -------------- 
replacer >>> r_fun: replaced ,O with: , O
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Arnold
person_process_field_titel >>> t_tit = Reichsritter, Edler
person_process_field_titel >>> t_list = ['Reichsritter, Edler']
person_process_field_titel >>> Komma in tit: Reichsritter, Edler
person_process_field_titel >>> CREATING SPLIT TITLE Reichsritter from Reichsritter, Edler
person_process_field_titel >>> CREATING SPLIT TITLE Edler from Reichsritter, Edler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> RenameFunctions.py >>> removing OWM from ents
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß', 'Kommandant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß', 'Kommandant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß', 'Kommandant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Truchsesse
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD ['1704-00-00'], cF ['Truchseß', 'Kommandant'], cH L, CA OMeA 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Arnold, Johann Georg>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
