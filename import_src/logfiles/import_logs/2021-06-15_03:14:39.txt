----------------
Import MetaInfo:

username: GPirgie
django_settings: django_settings.viecpro_remote
collection: Sample HSV Import 14-6-21 – Amt/Hofstaat bugfix; CStandhartinger
spacy_model: using local model
existing_annotations: data/viecpro_HSV_0.jsonl
path_df: data/3_HSV-angepasst-IMPORT.xlsx
path_hofstaat: data/Kürzel-Hofstaate-EX-ACC-2021-06-02.xlsx
path_aemter: data/Kürzel-Ämter-ACC-EX-2021-02-08.xlsx
path_abbreviations: data/EXCEL-ACCESS_Kürzel-Titel-Orden-2021-01-28.xlsx
logger_level: 20
collection_team: ['MRomberg', 'MKaiser', 'CStandhartinger']
use_stopvalues: False
is_test: False
sample_frame: None
without_testing: True
log_msg: Third Test Import; test ämter/hofstaat; test title-bugfix
----------------


get_model >>> Used config cfg class for model configuration
----------------
Using the local model: models/viecpro_ner_hsv_5-21/

NLP-pipeline:
	ner
	use_existing_annotations
	add_brackets
	rename_functions
	remove_names
	date_prepocissions
	create_chunks
----------------


collection_counter = [(0, 'MRomberg (HSV)'), (3414, 'MKaiser (HSV)'), (6828, 'CStandhartinger (HSV)')]

--------- Start of row | 6828 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kellerschreiber', 'Hoflichtkämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kellerschreiber', 'Hoflichtkämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Kellerschreiber', 'Hoflichtkämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
process_chunks >>> cD [], cF ['Kellerschreiber', 'Hoflichtkämmerer'], cH J, CA OMeA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Bartholomäus>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Kellerschreiber', 'Hoflichtkämmerer']

--------- Start of row | 6829 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6830 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6831 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ(?) / Gelehrtenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ(?) 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ(?) 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ(?) 
chunk_process_amt_NEW >>> c_A was: NÖ(?)  and amt after matching with amt index is: NÖ(?)
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ(?) (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6832 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6833 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6834 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz (Heitz)
person_process_field_familienname >>> fam1: Seiz
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Heitz)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat', 'Regierungsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat', 'Regierungsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat', 'Regierungsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat', 'Regierungsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat', 'Regierungsrat']

--------- Start of row | 6835 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz (Saiz)
person_process_field_familienname >>> fam1: Seiz
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 11), match='(Saiz)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6836 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz (Seithes)
person_process_field_familienname >>> fam1: Seiz
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 14), match='(Seithes)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6837 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz (Seiths)
person_process_field_familienname >>> fam1: Seiz
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 13), match='(Seiths)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6838 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz (Seits)
person_process_field_familienname >>> fam1: Seiz
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Seits)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6839 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz (Seitz)
person_process_field_familienname >>> fam1: Seiz
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Seitz)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6840 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz (Seitz)
person_process_field_familienname >>> fam1: Seiz
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Seitz)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6841 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz (Seitz)
person_process_field_familienname >>> fam1: Seiz
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Seitz)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6842 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz (Seitz)
person_process_field_familienname >>> fam1: Seiz
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Seitz)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6843 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz (Seutz)
person_process_field_familienname >>> fam1: Seiz
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Seutz)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = kgl. Lichtkammer
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Aufsicht', 'Kellerschreiber'], 'AMT': 'kgl. Lichtkammer'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Aufsicht', 'Kellerschreiber'], 'AMT': 'kgl. Lichtkammer'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Aufsicht', 'Kellerschreiber'], 'AMT': 'kgl. Lichtkammer'}
helper_hsv_match_amt_with_funct >>> r_A = OMeA [Hofkontrolloramt?]
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = kgl. Lichtkammer
process_chunks >>> cD [], cF ['Aufsicht', 'Kellerschreiber'], cH J, CA kgl. Lichtkammer
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Bartholomäus>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: kgl. Lichtkammer
chunk_process_amt_NEW >>> c_A was: kgl. Lichtkammer and amt after matching with amt index is: kgl. Lichtkammer
chunk_process_amt_NEW >>>  Return value of inst2 = kgl. Lichtkammer (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Aufsicht', 'Kellerschreiber']

--------- Start of row | 6844 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz (Seutz)
person_process_field_familienname >>> fam1: Seiz
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Seutz)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = kgl. Lichtkammer
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kellerschreiber', 'Aufsicht'], 'AMT': 'kgl. Lichtkammer'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kellerschreiber', 'Aufsicht'], 'AMT': 'kgl. Lichtkammer'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Kellerschreiber', 'Aufsicht'], 'AMT': 'kgl. Lichtkammer'}
helper_hsv_match_amt_with_funct >>> r_A = OMeA [Hofkontrolloramt?]
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = kgl. Lichtkammer
process_chunks >>> cD [], cF ['Kellerschreiber', 'Aufsicht'], cH J, CA kgl. Lichtkammer
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Bartholomäus>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: kgl. Lichtkammer
chunk_process_amt_NEW >>> c_A was: kgl. Lichtkammer and amt after matching with amt index is: kgl. Lichtkammer
chunk_process_amt_NEW >>>  Return value of inst2 = kgl. Lichtkammer (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Kellerschreiber', 'Aufsicht']

--------- Start of row | 6845 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz [Seiths]
person_process_field_familienname >>> fam1: Seiz
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 13), match='[Seiths]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6846 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz [Seiths]
person_process_field_familienname >>> fam1: Seiz
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 13), match='[Seiths]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6847 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seiz [Seiths]
person_process_field_familienname >>> fam1: Seiz
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 13), match='[Seiths]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regierungsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regierungsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seiz, Johann Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regierungsrat']

--------- Start of row | 6848 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regierungsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RKz / Herrenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RKz 
process_chunks >>> cD [], cF ['Regierungsrat'], cH L, CA NÖ-RKz 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RKz 
chunk_process_amt_NEW >>> c_A was: NÖ-RKz  and amt after matching with amt index is: NÖ-RKz
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RKz (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regierungsrat']

--------- Start of row | 6849 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['bis 1705-03-11<1705-03-11>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['bis 1705-03-11<1705-03-11>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['bis 1705-03-11<1705-03-11>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['bis 1705-03-11<1705-03-11>'], cF ['Regimentsrat'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1705-03-11>
helper_hsv_post_process_dates >>> new_i_date: <1705-03-11>
helper_hsv_post_process_dates >>> old: bis 1705-03-11<1705-03-11>, new: bis 1705-03-11<1705-03-11>
chunk_process_datum >>> rel, chunk edw: bis 1705-03-11<1705-03-11>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Franz>, 'end_date_written': 'bis 1705-03-11<1705-03-11>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6850 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6851 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6852 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6853 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6854 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6855 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6856 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6857 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6858 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6859 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkamerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkamerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkamerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkamerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkamerrat']

--------- Start of row | 6860 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6861 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6862 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6863 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6864 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6865 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6866 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
person_process_field_titel >>> t_list = ['Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04']
person_process_field_titel >>> Komma in tit: Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663-00-00<1663-06-30>
create_title >>> tit_res: Rittereichsritter 1663-00-00, date after processing: 1663-00-00<1663-06-30>
person_process_field_titel >>> CREATING SPLIT TITLE Reichsritter 1663-00-00 from Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
helper_hsv_post_process_dates >>> old: 1673-03-04, new: 1673-03-04<1673-03-04>
create_title >>> tit_res: Rittereichs-u.erbländ. Freiherrenstand 1673-03-04, date after processing: 1673-03-04<1673-03-04>
person_process_field_titel >>> CREATING SPLIT TITLE Reichs-u.erbländ. Freiherrenstand 1673-03-04 from Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Kammerprokurator'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Kammerprokurator'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['NÖ Kammerprokurator'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['NÖ Kammerprokurator'], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['NÖ Kammerprokurator']

--------- Start of row | 6867 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
person_process_field_titel >>> t_list = ['Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04']
person_process_field_titel >>> Komma in tit: Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663-00-00<1663-06-30>
create_title >>> tit_res: Rittereichsritter 1663-00-00, date after processing: 1663-00-00<1663-06-30>
person_process_field_titel >>> CREATING SPLIT TITLE Reichsritter 1663-00-00 from Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
helper_hsv_post_process_dates >>> old: 1673-03-04, new: 1673-03-04<1673-03-04>
create_title >>> tit_res: Rittereichs-u.erbländ. Freiherrenstand 1673-03-04, date after processing: 1673-03-04<1673-03-04>
person_process_field_titel >>> CREATING SPLIT TITLE Reichs-u.erbländ. Freiherrenstand 1673-03-04 from Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1658-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1658-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1658-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1658-00-00'], cF ['Hofkammerrat'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1658-00-00, new: 1658-00-00<1658-06-30>
chunk_process_datum >>> rel, chunk sdw: 1658-00-00<1658-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>, 'start_date_written': '1658-00-00<1658-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6868 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
person_process_field_titel >>> t_list = ['Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04']
person_process_field_titel >>> Komma in tit: Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663-00-00<1663-06-30>
create_title >>> tit_res: Rittereichsritter 1663-00-00, date after processing: 1663-00-00<1663-06-30>
person_process_field_titel >>> CREATING SPLIT TITLE Reichsritter 1663-00-00 from Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
helper_hsv_post_process_dates >>> old: 1673-03-04, new: 1673-03-04<1673-03-04>
create_title >>> tit_res: Rittereichs-u.erbländ. Freiherrenstand 1673-03-04, date after processing: 1673-03-04<1673-03-04>
person_process_field_titel >>> CREATING SPLIT TITLE Reichs-u.erbländ. Freiherrenstand 1673-03-04 from Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Abgesandter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Abgesandter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Abgesandter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Abgesandter'], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Abgesandter']

--------- Start of row | 6869 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb
person_process_field_titel >>> t_tit = Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
person_process_field_titel >>> t_list = ['Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04']
person_process_field_titel >>> Komma in tit: Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
helper_hsv_post_process_dates >>> old: 1663-00-00, new: 1663-00-00<1663-06-30>
create_title >>> tit_res: Rittereichsritter 1663-00-00, date after processing: 1663-00-00<1663-06-30>
person_process_field_titel >>> CREATING SPLIT TITLE Reichsritter 1663-00-00 from Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
helper_hsv_post_process_dates >>> old: 1673-03-04, new: 1673-03-04<1673-03-04>
create_title >>> tit_res: Rittereichs-u.erbländ. Freiherrenstand 1673-03-04, date after processing: 1673-03-04<1673-03-04>
person_process_field_titel >>> CREATING SPLIT TITLE Reichs-u.erbländ. Freiherrenstand 1673-03-04 from Freiherr, Reichsritter 1663-00-00, Reichs-u.erbländ. Freiherrenstand 1673-03-04
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1664-00-00', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1664-00-00', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1664-00-00', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1664-00-00', 'bis 1678<1678-06-30>'], cF ['Regimentsrat'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1664-00-00, new: 1664-00-00<1664-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1664-00-00<1664-06-30>
chunk_process_datum >>> rel, chunk edw: 1664-00-00<1664-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Gabriel>, 'start_date_written': '1664-00-00<1664-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6870 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb (Seelb)
person_process_field_familienname >>> fam1: Selb
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Seelb)'>
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Herrenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH Dummy Hofstaat, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, Johann Franz>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 6871 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Selb, von END INPUT, ROW:6871
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, von, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6872 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selb, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Selb, von END INPUT, ROW:6872
person_process_field_titel >>> t_tit = [Freiherr]
person_process_field_titel >>> t_list = ['[Freiherr]']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selb, von, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6873 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selcke
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Agent'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Agent'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Agenten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
process_chunks >>> cD [], cF ['Agent'], cH L, CA BHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selcke, Michael>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: BHR
chunk_process_amt_NEW >>>  Return value of inst2 = BHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Agent']

--------- Start of row | 6874 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selder, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Selder, von END INPUT, ROW:6874
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selder, von, Adam>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6875 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selleburg, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Selleburg, von END INPUT, ROW:6875
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selleburg, von, Franz Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6876 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sellier
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoftänzer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoftänzer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hoftänzer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
process_chunks >>> cD [], cF ['Hoftänzer'], cH L, CA OMeA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sellier, NN>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hoftänzer']

--------- Start of row | 6877 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Selliers
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = ME
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ME
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ME
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ME', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
process_chunks >>> cD [], cF ['Kammerdiener'], cH ME, CA OMeA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Selliers, Rupert Niklas>}
chunk_get_nm_hst >>> c_H = ME
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: ME (L1)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (ME (L1))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 6878 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Semse
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Semse, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 6879 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Senipoffsky
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Senipoffsky, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 6880 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seragli
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'LW', 'FUNKTION': ['Hofkaplan'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kaplan, Hof-
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hofkaplan'], cH LW, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seragli, Domenico>}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (LW)
chunk_create_relations >>> create realtions called for c_F ['Hofkaplan']

--------- Start of row | 6881 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Truchseß'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Hanns Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Truchseß']

--------- Start of row | 6882 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
process_chunks >>> cD [], cF ['Truchseß'], cH L, CA OMeA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Hanns Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Truchseß']

--------- Start of row | 6883 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Edelknabe'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
process_chunks >>> cD [], cF ['Edelknabe'], cH L, CA OStA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Hanns Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Edelknabe']

--------- Start of row | 6884 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = ksl.
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ksl.
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ksl.
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.'], cH ksl., CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Johann Adam>}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat, wirkl.']

--------- Start of row | 6885 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Johann Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6886 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Johann Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6887 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Johann Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6888 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Johann Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6889 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Johann Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6890 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Johann Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6891 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Johann Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6892 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Johann Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6893 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Johann Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6894 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Johann Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6895 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 6896 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Sigmund Friedrich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6897 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, Wilhelm Erasmus>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6898 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Serau, von END INPUT, ROW:6898
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, von, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 6899 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Serau, von END INPUT, ROW:6899
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Hoffräulein', 'Kammerfräulein'], cH EG, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, von, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hoffräulein', 'Kammerfräulein']

--------- Start of row | 6900 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Serau, von END INPUT, ROW:6900
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, von, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 6901 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Serau, von END INPUT, ROW:6901
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hoffräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Hoffräulein'], cH EG, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, von, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hoffräulein']

--------- Start of row | 6902 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau, von (Saurau, von?)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Serau, von (Saurau, von?) END INPUT, ROW:6902
person_process_field_familienname >>> fam1: Serau, von
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 25), match='(Saurau, von?)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, von, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 6903 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau, von (Saurau, von?)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Serau, von (Saurau, von?) END INPUT, ROW:6903
person_process_field_familienname >>> fam1: Serau, von
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 25), match='(Saurau, von?)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, von, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 6904 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau, von (Saurau, von?)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Serau, von (Saurau, von?) END INPUT, ROW:6904
person_process_field_familienname >>> fam1: Serau, von
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 25), match='(Saurau, von?)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau, von, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 6905 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serau/Saurau(?)
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serau/Saurau?, Georg Christian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6906 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seraw, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Seraw, von END INPUT, ROW:6906
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seraw, von, Carl Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6907 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seraw, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Seraw, von END INPUT, ROW:6907
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seraw, von, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 6908 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serba
person_process_field_titel >>> t_tit = Baron
person_process_field_titel >>> t_list = ['Baron']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Edelknabe'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA
process_chunks >>> cD [], cF ['Edelknabe'], cH J, CA OStA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serba, Franz>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA
chunk_process_amt_NEW >>> c_A was: OStA and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Edelknabe']

--------- Start of row | 6909 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serbelanj
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serbelanj, Friedrich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6910 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serein, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6911 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serein, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6912 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serein, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6913 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serein, Johann Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6914 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serein, Johann Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6915 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serein, Johann Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6916 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serein, Johann Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6917 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serein
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serein, Johann Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6918 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serein
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serein, Johann Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6919 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serein
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serein, Johann Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6920 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serein, Johann Karl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6921 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serein/Serényi?
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serein/Serényi?, Johann Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6922 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serein/Serényi?
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serein/Serényi?, Johann Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6923 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sereni
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sereni, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6924 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sereni
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sereni, Johann Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6925 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sereni
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sereni, Johann Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6926 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sereni, oo Schaffgotsch
person_process_field_titel >>> t_tit = Gräfin; Gräfin
person_process_field_titel >>> t_list = ['Gräfin', 'Gräfin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = AW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: AW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: AW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'AW', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH AW, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: NEEDS REVIEW, Maria Franziska>}
chunk_get_nm_hst >>> c_H = AW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: AW (Kgin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (AW (Kgin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 6927 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sereni, oo Schaffgotsch
person_process_field_titel >>> t_tit = Gräfin; Gräfin
person_process_field_titel >>> t_list = ['Gräfin', 'Gräfin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein', 'Heirat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein', 'Heirat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = AW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: AW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: AW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'AW', 'FUNKTION': ['Kammerfräulein', 'Heirat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein', 'Heirat'], cH AW, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: NEEDS REVIEW, Maria Franziska>}
chunk_get_nm_hst >>> c_H = AW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: AW (Kgin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (AW (Kgin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein', 'Heirat']

--------- Start of row | 6928 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sereni; Serény
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sereni; Serény, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6929 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sereni; Serény
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sereni; Serény, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6930 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sereni; Serény
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sereni; Serény, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6931 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serenj
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serenj, Anton>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6932 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serenj
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH J, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serenj, Franz>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6933 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sereny
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kämmerer'], cH J, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sereny, NN>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6934 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serény (Schereni)
person_process_field_familienname >>> fam1: Serény
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 17), match='(Schereni)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serény, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 6935 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serény (Sereni)
person_process_field_familienname >>> fam1: Serény
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Sereni)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serény, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6936 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serény (Sereni)
person_process_field_familienname >>> fam1: Serény
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Sereni)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serény, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6937 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serény (Sereni)
person_process_field_familienname >>> fam1: Serény
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Sereni)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serény, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6938 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serény (Sereni)
person_process_field_familienname >>> fam1: Serény
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Sereni)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serény, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6939 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serény (Sereni)
person_process_field_familienname >>> fam1: Serény
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Sereni)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serény, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6940 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serény (Sereni)
person_process_field_familienname >>> fam1: Serény
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Sereni)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serény, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 6941 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serényi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serényi, Anton>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6942 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serényi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH J, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serényi, Carl>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6943 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serényi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH J, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serényi, Franz>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6944 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serin
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serin, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6945 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serin
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serin, Johann Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6946 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serin
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serin, Johann Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6947 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serin
person_process_field_titel >>> t_tit = von
person_process_field_titel >>> t_list = ['von']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> RenameFunctions.py >>> removing Ban from ents
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF [], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serin, Niclas>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F []

--------- Start of row | 6948 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serin
person_process_field_titel >>> t_tit = von
person_process_field_titel >>> t_list = ['von']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serin, Niclas>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 6949 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serin (Serein)
person_process_field_familienname >>> fam1: Serin
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 14), match='(Serein)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serin, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6950 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serini
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serini, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6951 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seripi
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkaplan'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkaplan'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA  /  Hofkapelle
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA  
process_chunks >>> cD [], cF ['Hofkaplan'], cH L, CA OMeA  
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seripi, NN>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA  
chunk_process_amt_NEW >>> c_A was: OMeA   and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkaplan']

--------- Start of row | 6952 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serni
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serni, Philipp>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6953 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Serseckh
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Vorreiter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Vorreiter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'LW', 'FUNKTION': ['Vorreiter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Vorreiter
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA 
process_chunks >>> cD [], cF ['Vorreiter'], cH LW, CA OStA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Serseckh, Andree>}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: OStA 
chunk_process_amt_NEW >>> c_A was: OStA  and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (LW)
chunk_create_relations >>> create realtions called for c_F ['Vorreiter']

--------- Start of row | 6954 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Servatius
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regierungsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Ritterbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regierungsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Servatius, Max>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regierungsrat']

--------- Start of row | 6955 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seßler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Trompeter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Trompeter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Trompeter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Hoffuttermeister
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA 
process_chunks >>> cD [], cF ['Trompeter'], cH L, CA OStA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seßler, Ernst>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA 
chunk_process_amt_NEW >>> c_A was: OStA  and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Trompeter']

--------- Start of row | 6956 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschi, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6957 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschi, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6958 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschi, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6959 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschi, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6960 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschi (Seltzschy)
person_process_field_familienname >>> fam1: Setschi
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 19), match='(Seltzschy)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschi, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6961 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschy
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Mundschenk'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Mundschenk'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschy, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Mundschenk']

--------- Start of row | 6962 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschy
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschy, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6963 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschy
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Mundschenk'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Mundschenk'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschy, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Mundschenk']

--------- Start of row | 6964 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschy, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6965 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschy, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 6966 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschy
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Truchseß'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschy, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Truchseß']

--------- Start of row | 6967 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschy, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6968 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschy, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6969 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschy, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6970 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschy, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6971 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschy, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6972 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschy, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 6973 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschy, NN>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6974 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschy [Setschi]
person_process_field_familienname >>> fam1: Setschy
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='[Setschi]'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschy, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6975 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Setschy [Setschi]
person_process_field_familienname >>> fam1: Setschy
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='[Setschi]'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Setschy, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6976 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seutz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kellerschreiber'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kellerschreiber'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Kellerschreiber'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofkontrollorsamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD [], cF ['Kellerschreiber'], cH J, CA OMeA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seutz, Bartholomäus>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Kellerschreiber']

--------- Start of row | 6977 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seutz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obsichthaber', 'Lichtkammer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obsichthaber', 'Lichtkammer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Obsichthaber', 'Lichtkammer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofkontrollorsamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD [], cF ['Obsichthaber', 'Lichtkammer'], cH J, CA OMeA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seutz, Bartholomäus>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Obsichthaber', 'Lichtkammer']

--------- Start of row | 6978 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seybaldt
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Leiblakai'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Leiblakai'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Leiblakai'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Leiblakai'], cH J, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seybaldt, Joseph>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Leiblakai']

--------- Start of row | 6979 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seybiz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'LW', 'FUNKTION': ['Raitdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HBH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HBH
process_chunks >>> cD [], cF ['Raitdiener'], cH LW, CA HBH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seybiz, Christoph>}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: HBH
chunk_process_amt_NEW >>> c_A was: HBH and amt after matching with amt index is: HBH
chunk_process_amt_NEW >>>  Return value of inst2 = HBH (LW)
chunk_create_relations >>> create realtions called for c_F ['Raitdiener']

--------- Start of row | 6980 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seyeriz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffizier
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seyeriz, Christoph Lucas>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 6981 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seyfried
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-GHKz
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-GHKz
process_chunks >>> cD [], cF ['Konzipist'], cH L, CA NÖ-GHKz
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seyfried, Melchior>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-GHKz
chunk_process_amt_NEW >>> c_A was: NÖ-GHKz and amt after matching with amt index is: NÖ-GHKz
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-GHKz (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Konzipist']

--------- Start of row | 6982 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seywitz; Muggenthal
person_process_field_titel >>> t_tit = NN; Edler
person_process_field_titel >>> t_list = ['NN', 'Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Raitrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raiträte
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitrat'], cH Dummy Hofstaat, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seywitz; Muggenthal, Christoph Lukas>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Raitrat']

--------- Start of row | 6983 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Seywiz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Seywiz, Christoph Lukas>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 6984 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sezi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sezi, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6985 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sezi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sezi, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6986 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sezi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sezi, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6987 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sezi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sezi, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6988 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sezi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sezi, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6989 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sezi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sezi, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6990 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sezi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sezi, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6991 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sezi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sezi, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6992 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sezi (Setzi)
person_process_field_familienname >>> fam1: Sezi
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Setzi)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sezi, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6993 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sezi (Setzi)
person_process_field_familienname >>> fam1: Sezi
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Setzi)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sezi, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6994 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sezi (Setzy)
person_process_field_familienname >>> fam1: Sezi
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='(Setzy)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sezi, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6995 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sezi (Sezy)
person_process_field_familienname >>> fam1: Sezi
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 11), match='(Sezy)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sezi, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6996 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sezy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sezy, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6997 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sforza
person_process_field_titel >>> t_tit = Don
person_process_field_titel >>> t_list = ['Don']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sforza, Federico>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6998 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sforza
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sforza, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 6999 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sheltschak
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sheltschak, Abraham>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7000 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sibenbürger
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammerdienerin
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdienerin'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sibenbürger, Catharina>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7001 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Siber
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlist
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Siber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7002 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Siber
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Schubschreiber'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Schubschreiber'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Schubschreiber'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ(?)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ(?)
process_chunks >>> cD [], cF ['Schubschreiber'], cH L, CA NÖ(?)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Siber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ(?)
chunk_process_amt_NEW >>> c_A was: NÖ(?) and amt after matching with amt index is: NÖ(?)
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ(?) (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Schubschreiber']

--------- Start of row | 7003 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sickingen
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Mundschenk'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Mundschenk'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sickingen, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Mundschenk']

--------- Start of row | 7004 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sickingen
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH J, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sickingen, Philipp Damian>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7005 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sickofsky
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sattelknecht'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sattelknecht'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sattelknecht'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Hoffuttermeister
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA 
process_chunks >>> cD [], cF ['Sattelknecht'], cH L, CA OStA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sickofsky, Johann Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA 
chunk_process_amt_NEW >>> c_A was: OStA  and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sattelknecht']

--------- Start of row | 7006 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Siebenschön (Nimbsche)
person_process_field_familienname >>> fam1: Siebenschön
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 22), match='(Nimbsche)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Siebenschön, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7007 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Siebenschön (Simbsche)
person_process_field_familienname >>> fam1: Siebenschön
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 22), match='(Simbsche)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Siebenschön, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7008 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Siebenschön (Simbsche)
person_process_field_familienname >>> fam1: Siebenschön
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 22), match='(Simbsche)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Siebenschön, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7009 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Siebenschön (Simbsche)
person_process_field_familienname >>> fam1: Siebenschön
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 22), match='(Simbsche)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Siebenschön, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7010 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Siebenschön (Simbsche)
person_process_field_familienname >>> fam1: Siebenschön
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 22), match='(Simbsche)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Siebenschön, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7011 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Siebenschön (Simbsche)
person_process_field_familienname >>> fam1: Siebenschön
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 22), match='(Simbsche)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Siebenschön, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7012 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Siebenschön (Simbschen)
person_process_field_familienname >>> fam1: Siebenschön
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 23), match='(Simbschen)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Siebenschön, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7013 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Siebenschön (Simbschen)
person_process_field_familienname >>> fam1: Siebenschön
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 23), match='(Simbschen)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist', 'Taxamtsgegenhandler'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist', 'Taxamtsgegenhandler'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist', 'Taxamtsgegenhandler'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Kanzlist', 'Taxamtsgegenhandler'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Siebenschön, Matthias Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist', 'Taxamtsgegenhandler']

--------- Start of row | 7014 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Siebenschön (Simbschen)
person_process_field_familienname >>> fam1: Siebenschön
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 23), match='(Simbschen)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-HBH-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-HBH-NÖ-BH
process_chunks >>> cD [], cF ['Raitrat'], cH L, CA HK-HBH-NÖ-BH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Siebenschön, Matthias Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-HBH-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-HBH-NÖ-BH and amt after matching with amt index is: HK-HBH-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-HBH-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitrat']

--------- Start of row | 7015 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Siebenschön (Simbschen)
person_process_field_familienname >>> fam1: Siebenschön
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 23), match='(Simbschen)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-HBH-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-HBH-NÖ-BH
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-HBH-NÖ-BH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Siebenschön, Matthias Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-HBH-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-HBH-NÖ-BH and amt after matching with amt index is: HK-HBH-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-HBH-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7016 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7017 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7018 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7019 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA NÖ-R
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R
chunk_process_amt_NEW >>> c_A was: NÖ-R and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7020 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7021 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber (Siber)
person_process_field_familienname >>> fam1: Sieber
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 14), match='(Siber)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7022 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber (Siber)
person_process_field_familienname >>> fam1: Sieber
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 14), match='(Siber)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7023 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber (Siber)
person_process_field_familienname >>> fam1: Sieber
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 14), match='(Siber)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7024 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber (Siber)
person_process_field_familienname >>> fam1: Sieber
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 14), match='(Siber)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7025 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber (Siber)
person_process_field_familienname >>> fam1: Sieber
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 14), match='(Siber)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7026 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber (Siber)
person_process_field_familienname >>> fam1: Sieber
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 14), match='(Siber)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7027 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber (Siber)
person_process_field_familienname >>> fam1: Sieber
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 14), match='(Siber)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Schubschreiber'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Schubschreiber'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Schubschreiber'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Schubschreiber'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Schubschreiber']

--------- Start of row | 7028 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber (Sieber/Syber?)
person_process_field_familienname >>> fam1: Sieber
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 22), match='(Sieber/Syber?)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7029 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber (Syber)
person_process_field_familienname >>> fam1: Sieber
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 14), match='(Syber)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7030 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber (Syber)
person_process_field_familienname >>> fam1: Sieber
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 14), match='(Syber)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7031 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber (Syber)
person_process_field_familienname >>> fam1: Sieber
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 14), match='(Syber)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Subschreiber'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Subschreiber'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Subschreiber'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R
process_chunks >>> cD [], cF ['Subschreiber'], cH L, CA NÖ-R
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R
chunk_process_amt_NEW >>> c_A was: NÖ-R and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Subschreiber']

--------- Start of row | 7032 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sieber (Syber)
person_process_field_familienname >>> fam1: Sieber
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 14), match='(Syber)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Schubschreiber'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Schubschreiber'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Schubschreiber'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R  /  Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R  
process_chunks >>> cD [], cF ['Schubschreiber'], cH L, CA NÖ-R  
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sieber, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R  
chunk_process_amt_NEW >>> c_A was: NÖ-R   and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Schubschreiber']

--------- Start of row | 7033 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Signorini
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kammerdiener'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Signorini, Johann Joachim>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 7034 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sikota
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Hartschier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Hartschierenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hartschier'], cH J, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sikota, Wenzl>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Hartschier']

--------- Start of row | 7035 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Silberschneider
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Hartschier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Hartschierenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hartschier'], cH J, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Silberschneider, Matthias>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Hartschier']

--------- Start of row | 7036 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Silberschneider
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Hartschier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Hartschierenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hartschier'], cH J, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Silberschneider, Matthias>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Hartschier']

--------- Start of row | 7037 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sillnipoffsky [Scuipoffsky]
person_process_field_familienname >>> fam1: Sillnipoffsky
person_process_field_familienname >>> fam2: <re.Match object; span=(14, 27), match='[Scuipoffsky]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sillnipoffsky, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7038 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Silvia
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdiener'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Silvia, Johann>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 7039 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Silvia
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdiener'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Silvia, Johann>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 7040 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Silvia
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdiener'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Silvia, Johann>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 7041 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Silvia
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdiener'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Silvia, Johann>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 7042 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Silvia
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdiener'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Silvia, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 7043 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Silvia (Siliua)
person_process_field_familienname >>> fam1: Silvia
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Siliua)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdiener'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Silvia, Johann>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 7044 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Silvia (Syldia)
person_process_field_familienname >>> fam1: Silvia
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Syldia)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdiener'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Silvia, Johann>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 7045 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Silvia [Bresciani]
person_process_field_familienname >>> fam1: Silvia
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 18), match='[Bresciani]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener', 'Kammerherr'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener', 'Kammerherr'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdiener', 'Kammerherr'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdiener', 'Kammerherr'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Silvia, Johann>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener', 'Kammerherr']

--------- Start of row | 7046 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Silvio
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdiener'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Silvio, Johann>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 7047 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simbsche
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simbsche, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7048 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simbsche
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simbsche, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7049 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simbsche
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simbsche, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7050 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simbsche
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simbsche, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7051 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simbsche
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlei
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simbsche, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7052 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simbschen
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Raitrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raiträte
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitrat'], cH Dummy Hofstaat, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simbschen, Matthäus Fortunat>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Raitrat']

--------- Start of row | 7053 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simbschen
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitoffizier'], cH Dummy Hofstaat, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simbschen, Matthäus Fortunat>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7054 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simbschen
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Registrator', 'Taxamtsgegenhandler'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Registrator', 'Taxamtsgegenhandler'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Registrator', 'Taxamtsgegenhandler'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Registratur
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Registrator', 'Taxamtsgegenhandler'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simbschen, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Registrator', 'Taxamtsgegenhandler']

--------- Start of row | 7055 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simbscho [Schimpff?]
person_process_field_familienname >>> fam1: Simbscho
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 20), match='[Schimpff?]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simbscho, Mathias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7056 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simbse
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simbse, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7057 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simon
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberkammerfourier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberkammerfourier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberkammerfourier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Oberkammerfourier'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simon, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberkammerfourier']

--------- Start of row | 7058 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simon
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Unterkammerfourier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Unterkammerfourier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = F3(?)
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: F3(?)
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: F3(?)
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'F3(?)', 'FUNKTION': ['Unterkammerfourier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Unterkammerfourier'], cH F3(?), CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simon, Johann Wilhelm>}
chunk_get_nm_hst >>> c_H = F3(?)
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: F3
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (F3)
chunk_create_relations >>> create realtions called for c_F ['Unterkammerfourier']

--------- Start of row | 7059 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simon
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Saaltürhüter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Saaltürhüter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Saaltürhüter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
process_chunks >>> cD [], cF ['Saaltürhüter'], cH L, CA OMeA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simon, Wenzel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Saaltürhüter']

--------- Start of row | 7060 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simon
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberkammerfourier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberkammerfourier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberkammerfourier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Oberkammerfourier'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simon, NN>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberkammerfourier']

--------- Start of row | 7061 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simoni
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Hartschier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Hartschierenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hartschier'], cH J, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simoni, Anton>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Hartschier']

--------- Start of row | 7062 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simoni
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Hartschier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Hartschierenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hartschier'], cH J, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simoni, Anton>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Hartschier']

--------- Start of row | 7063 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Simsche (Semische)
person_process_field_familienname >>> fam1: Simsche
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 18), match='(Semische)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Simsche, Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7064 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sincigl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sincigl, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7065 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sincigl, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Sincigl, von END INPUT, ROW:7065
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sincigl, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7066 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sincigl(in)
person_process_field_familienname >>> fam1: Sincigl(in)
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 11), match='(in)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Hoffräulein', 'Kammerfräulein'], cH CF, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sincigl(in), NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Hoffräulein', 'Kammerfräulein']

--------- Start of row | 7067 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sincigl(in) (Hinciglien)
person_process_field_familienname >>> fam1: Sincigl(in)
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 11), match='(in)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Hoffräulein', 'Kammerfräulein'], cH CF, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sincigl(in), NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Hoffräulein', 'Kammerfräulein']

--------- Start of row | 7068 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinciglin
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammerfräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinciglin, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7069 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sing
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberkammerfourier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberkammerfourier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberkammerfourier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Oberkammerfourier'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sing, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberkammerfourier']

--------- Start of row | 7070 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Singer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Hartschier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Hartschierenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hartschier'], cH J, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Singer, Ferdinand>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Hartschier']

--------- Start of row | 7071 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Singer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hartschier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Hartschier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Hartschierenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hartschier'], cH J, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Singer, Ferdinand>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Hartschier']

--------- Start of row | 7072 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sini
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hauptmann'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hauptmann'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hauptmann'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = Wien, Favorita
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = Wien, Favorita
process_chunks >>> cD [], cF ['Hauptmann'], cH L, CA Wien, Favorita
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sini, Hieronimus Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Wien, Favorita
chunk_process_amt_NEW >>> c_A was: Wien, Favorita and amt after matching with amt index is: Wien, Favorita
chunk_process_amt_NEW >>>  Return value of inst2 = Wien, Favorita (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hauptmann']

--------- Start of row | 7073 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinig, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Sinig, von END INPUT, ROW:7073
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Truchseß'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinig, von, Georg Constantin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Truchseß']

--------- Start of row | 7074 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinnich
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1692-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['supernumerärer Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1692-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['supernumerärer Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1692-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['supernumerärer Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1692-00-00'], cF ['supernumerärer Regimentsrat'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1692-00-00, new: 1692-00-00<1692-06-30>
chunk_process_datum >>> rel, chunk sdw: 1692-00-00<1692-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinnich, Georg constantin>, 'start_date_written': '1692-00-00<1692-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['supernumerärer Regimentsrat']

--------- Start of row | 7075 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinnich
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = NÖ Stände
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obereinnehmer'], 'AMT': 'NÖ Stände'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obereinnehmer'], 'AMT': 'NÖ Stände'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Obereinnehmer'], 'AMT': 'NÖ Stände'}
helper_hsv_match_amt_with_funct >>> r_A = nan
process_chunks >>> cD [], cF ['Obereinnehmer'], cH Dummy Hofstaat, CA NÖ Stände
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinnich, Georg constantin>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ Stände
chunk_process_amt_NEW >>> c_A was: NÖ Stände and amt after matching with amt index is: NÖ Stände
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Stände (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Obereinnehmer']

--------- Start of row | 7076 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinnich, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Sinnich, von END INPUT, ROW:7076
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinnich, von, Georg Konstantin>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ 
chunk_process_amt_NEW >>> c_A was: NÖ  and amt after matching with amt index is: NÖ
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7077 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinnich, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Sinnich, von END INPUT, ROW:7077
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Mundschenk'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
process_chunks >>> cD [], cF ['Mundschenk'], cH L, CA OMeA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinnich, von, Georg Konstantin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Mundschenk']

--------- Start of row | 7078 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinnich, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Sinnich, von END INPUT, ROW:7078
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG? / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG? 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ-LG? 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinnich, von, Georg Konstantin>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG? 
chunk_process_amt_NEW >>> c_A was: NÖ-LG?  and amt after matching with amt index is: NÖ-LG?
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG? (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7079 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinzendorf
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1679-06-09/1679-06-11<1679-06-09 - 1679-06-11>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1679-06-09/1679-06-11<1679-06-09 - 1679-06-11>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1679-06-09/1679-06-11<1679-06-09 - 1679-06-11>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1679-06-09/1679-06-11<1679-06-09 - 1679-06-11>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> inner date: <1679-06-09 - 1679-06-11>
helper_hsv_post_process_dates >>> new_i_date: <1679-06-09 - 1679-06-11>
helper_hsv_post_process_dates >>> old: 1679-06-09/1679-06-11<1679-06-09 - 1679-06-11>, new: 1679-06-09/1679-06-11<1679-06-09 - 1679-06-11>
chunk_process_datum >>> rel, chunk sdw: 1679-06-09/1679-06-11<1679-06-09 - 1679-06-11>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Adolph Michael>, 'start_date_written': '1679-06-09/1679-06-11<1679-06-09 - 1679-06-11>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7080 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinzendorf
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1665-05-20', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}, {'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat', 'Regierungsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1665-05-20', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat', 'Regierungsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L; J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h:  J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1665-05-20', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1675-00-00', 'bis 1677<1677-06-30>'], 'HOFSTAAT': 'J', 'FUNKTION': ['Regimentsrat', 'Regierungsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA; NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  NÖ-RR
process_chunks >>> cD ['1665-05-20', 'bis 1704<1704-06-30>'], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1665-05-20, new: 1665-05-20<1665-05-20>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1665-05-20<1665-05-20>
chunk_process_datum >>> rel, chunk edw: 1665-05-20<1665-05-20>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, August >, 'start_date_written': '1665-05-20<1665-05-20>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']
process_chunks >>> cD ['1675-00-00', 'bis 1677<1677-06-30>'], cF ['Regimentsrat', 'Regierungsrat'], cH J, CA  NÖ-RR
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675-00-00<1675-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675-00-00<1675-06-30>
chunk_process_datum >>> rel, chunk edw: 1675-00-00<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, August >, 'start_date_written': '1675-00-00<1675-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true:  NÖ-RR
chunk_process_amt_NEW >>> c_A was:  NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat', 'Regierungsrat']

--------- Start of row | 7081 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinzendorf
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(3) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer wirkl.'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}, {'DATUM': ['1669-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer wirkl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1669-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 3, len Ämter-Spalte: 3
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer wirkl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR; OKäA; RHR / Herrenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  RHR 
process_chunks >>> cD [], cF ['Kämmerer wirkl.'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Carl Ludwig >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer wirkl.']
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.'], cH L, CA  OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Carl Ludwig >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OKäA
chunk_process_amt_NEW >>> c_A was:  OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat, wirkl.']
process_chunks >>> cD ['1669-00-00', 'bis 1704<1704-06-30>'], cF ['Reichshofrat'], cH L, CA  RHR 
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669-00-00<1669-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669-00-00<1669-06-30>
chunk_process_datum >>> rel, chunk edw: 1669-00-00<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Carl Ludwig >, 'start_date_written': '1669-00-00<1669-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  RHR 
chunk_process_amt_NEW >>> c_A was:  RHR  and amt after matching with amt index is: RHR
chunk_process_amt_NEW >>>  Return value of inst2 = RHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Reichshofrat']

--------- Start of row | 7082 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinzendorf
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Kavalier, 1670-02-00, Kämmerer, 1672/73-00-00, 1676-00-00)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :7082, Kavalier (1670-02-00) ; Kämmerer (101 \ 105 \ 108 \ 150.) , (1672/73-00-00 bis 1676-00-00), [{'start': 0, 'end': 8, 'token_start': 0, 'token_end': 0, 'label': 'FUNKTION'}, {'start': 10, 'end': 20, 'token_start': 2, 'token_end': 6, 'label': 'DATUM'}, {'start': 23, 'end': 31, 'token_start': 9, 'token_end': 9, 'label': 'FUNKTION'}, {'start': 59, 'end': 72, 'token_start': 21, 'token_end': 27, 'label': 'DATUM'}, {'start': 77, 'end': 87, 'token_start': 29, 'token_end': 33, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Kavalier, 1670-02-00, Kämmerer, 1672/73-00-00, 1676-00-00]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Kavalier, 1670-02-00, Kämmerer, 1672/73-00-00, 1676-00-00)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1670-02-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kavalier'], 'AMT': None}, {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1676<1676-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1670-02-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kavalier'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1676<1676-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = EG; L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h:  L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1670-02-00'], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kavalier'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1676<1676-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kavalier); OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kavalier)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OKäA
process_chunks >>> cD ['1670-02-00'], cF ['Kavalier'], cH EG, CA (Kavalier)
helper_hsv_post_process_dates >>> old: 1670-02-00, new: 1670-02-00<1670-02-00>
chunk_process_datum >>> rel, chunk sdw: 1670-02-00<1670-02-00>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Ferdinand>, 'start_date_written': '1670-02-00<1670-02-00>'}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kavalier)
chunk_process_amt_NEW >>> c_A was: (Kavalier) and amt after matching with amt index is: (Kavalier)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kavalier) (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Kavalier']
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1670-02-00<1670-02-00> ' due to error ('Invalid iso date: ', '1670-02-00'): 
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1676<1676-06-30>'], cF ['Kämmerer'], cH L, CA  OKäA
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1676-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1676-06-30>
helper_hsv_post_process_dates >>> old: bis 1676<1676-06-30>, new: bis 1676<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Ferdinand>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1676<1676-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OKäA
chunk_process_amt_NEW >>> c_A was:  OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7083 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinzendorf
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Hofkammerpräsident, 1657, 1679, Beisitzer, Landrecht, 1672/73-00-00, 1675-00-00, Geh. Rat, wirkl., 1672/73-00-00, 1678-00-00)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :7083, Hofkammerpräsident (1657 bis 1679, abgesetzt) ; Beisitzer, Landrecht, Herrenstand (3.) , (1672/73-00-00 bis 1675-00-00) ; Geh. Rat, wirkl. (6 \ 7 \ 8 \ 9 .) , (1672/73-00-00 bis 1678-00-00), [{'start': 0, 'end': 18, 'token_start': 0, 'token_end': 0, 'label': 'FUNKTION'}, {'start': 20, 'end': 24, 'token_start': 2, 'token_end': 2, 'label': 'DATUM'}, {'start': 29, 'end': 33, 'token_start': 4, 'token_end': 4, 'label': 'DATUM'}, {'start': 47, 'end': 67, 'token_start': 9, 'token_end': 11, 'label': 'FUNKTION'}, {'start': 88, 'end': 101, 'token_start': 19, 'token_end': 25, 'label': 'DATUM'}, {'start': 106, 'end': 116, 'token_start': 27, 'token_end': 31, 'label': 'DATUM'}, {'start': 119, 'end': 135, 'token_start': 34, 'token_end': 39, 'label': 'FUNKTION'}, {'start': 156, 'end': 169, 'token_start': 52, 'token_end': 58, 'label': 'DATUM'}, {'start': 174, 'end': 184, 'token_start': 60, 'token_end': 64, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Hofkammerpräsident, 1657, 1679, Beisitzer, Landrecht, 1672/73-00-00, 1675-00-00, Geh. Rat, wirkl., 1672/73-00-00, 1678-00-00]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Hofkammerpräsident, 1657, 1679, Beisitzer, Landrecht, 1672/73-00-00, 1675-00-00, Geh. Rat, wirkl., 1672/73-00-00, 1678-00-00)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(3) = [{'DATUM': ['1657', 'bis 1679<1679-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerpräsident'], 'AMT': None}, {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1675<1675-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Beisitzer, Landrecht'], 'AMT': None}, {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1657', 'bis 1679<1679-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerpräsident'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1675<1675-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Beisitzer, Landrecht'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 3, len Ämter-Spalte: 3
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1657', 'bis 1679<1679-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerpräsident'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1675<1675-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Beisitzer, Landrecht'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR; HK; NÖ-LG / Landrechtsbeisitzer, Herrenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  NÖ-LG 
process_chunks >>> cD ['1657', 'bis 1679<1679-06-30>'], cF ['Hofkammerpräsident'], cH L, CA GR
helper_hsv_post_process_dates >>> old: 1657, new: 1657<1657>
helper_hsv_post_process_dates >>> inner date: <1679-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1679-06-30>
helper_hsv_post_process_dates >>> old: bis 1679<1679-06-30>, new: bis 1679<1679-06-30>
chunk_process_datum >>> rel, chunk sdw: 1657<1657>
chunk_process_datum >>> rel, chunk edw: 1657<1657>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Georg Ludwig>, 'start_date_written': '1657<1657>', 'end_date_written': 'bis 1679<1679-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerpräsident']
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1657<1657> ' due to error ('Invalid iso date: ', '1657'): 
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1675<1675-06-30>'], cF ['Beisitzer, Landrecht'], cH L, CA  HK
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1675-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-30>
helper_hsv_post_process_dates >>> old: bis 1675<1675-06-30>, new: bis 1675<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Georg Ludwig>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1675<1675-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  HK
chunk_process_amt_NEW >>> c_A was:  HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Beisitzer, Landrecht']
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis 1678<1678-06-30>'], cF ['Geh. Rat, wirkl.'], cH L, CA  NÖ-LG 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Georg Ludwig>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  NÖ-LG 
chunk_process_amt_NEW >>> c_A was:  NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat, wirkl.']

--------- Start of row | 7084 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced )) with: ) )
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinzendorf
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(3) = [{'DATUM': ['1657-06-18', 'bis 1665<1665-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkanzler'], 'AMT': None}, {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}, {'DATUM': ['1685-05-30/('], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1657-06-18', 'bis 1665<1665-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Hofkanzler'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1685-05-30/('], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': None}
process_chunks >>> len_doc_chunks: 3, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1657-06-18', 'bis 1665<1665-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkanzler'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1685-05-30/('], 'HOFSTAAT': 'L', 'FUNKTION': [], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = Ö-HKz; OKäA
process_chunks >>> cD ['1657-06-18', 'bis 1665<1665-06-30>'], cF ['Hofkanzler'], cH L, CA Ö-HKz
helper_hsv_post_process_dates >>> old: 1657-06-18, new: 1657-06-18<1657-06-18>
helper_hsv_post_process_dates >>> inner date: <1665-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1665-06-30>
helper_hsv_post_process_dates >>> old: bis 1665<1665-06-30>, new: bis 1665<1665-06-30>
chunk_process_datum >>> rel, chunk sdw: 1657-06-18<1657-06-18>
chunk_process_datum >>> rel, chunk edw: 1657-06-18<1657-06-18>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Johann Joachim >, 'start_date_written': '1657-06-18<1657-06-18>', 'end_date_written': 'bis 1665<1665-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Ö-HKz
chunk_process_amt_NEW >>> c_A was: Ö-HKz and amt after matching with amt index is: Ö-HKz
chunk_process_amt_NEW >>>  Return value of inst2 = Ö-HKz (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkanzler']
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Johann Joachim >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']
process_chunks >>> cD ['1685-05-30/('], cF [], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1685-05-30/(, new: 1685-05-30/(
chunk_process_datum >>> rel, chunk sdw: 1685-05-30/(
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Johann Joachim >, 'start_date_written': '1685-05-30/('}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F []

--------- Start of row | 7085 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinzendorf
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Oberstjägermeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Oberstjägermeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstjägermeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA; OJäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OJäA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Johann Weickhard Michael Wenzel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']
process_chunks >>> cD ['1701-00-00'], cF ['Oberstjägermeister'], cH L, CA  OJäA
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Johann Weickhard Michael Wenzel>, 'start_date_written': '1701-00-00<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OJäA
chunk_process_amt_NEW >>> c_A was:  OJäA and amt after matching with amt index is: OJäA
chunk_process_amt_NEW >>>  Return value of inst2 = OJäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstjägermeister']

--------- Start of row | 7086 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinzendorf
person_process_field_titel >>> t_tit = Gräfin
person_process_field_titel >>> t_list = ['Gräfin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1699-01-01', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1699-01-01', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = AW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: AW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: AW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1699-01-01', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'AW', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1699-01-01', 'bis 1704<1704-06-30>'], cF ['Kammerfräulein'], cH AW, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1699-01-01, new: 1699-01-01<1699-01-01>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1699-01-01<1699-01-01>
chunk_process_datum >>> rel, chunk edw: 1699-01-01<1699-01-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Maria Maximiliana >, 'start_date_written': '1699-01-01<1699-01-01>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = AW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: AW (Kgin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (AW (Kgin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7087 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinzendorf
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Kämmerer, 1686-11-15/(, 1704-00-00, Abgesandter, ao, 1699, Obersthofkanzler, K, Envoye, 1701-00-00, Abgesandter, 1704-00-00, Geh. Rat, 1704-00-00)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :7087, Kämmerer (34 \ 45 \ 281 \ 851 \ 1060.) , (1686-11-15/(?) bis 1704-00-00) ; Abgesandter, ao. in Paris (1699) u. späterer Obersthofkanzler K; Envoye in Frankreich (1701-00-00) ; Abgesandter, ksl., am untern Rhein (1704-00-00) ; Geh. Rat (118.) , (1704-00-00), [{'start': 0, 'end': 8, 'token_start': 0, 'token_end': 0, 'label': 'FUNKTION'}, {'start': 41, 'end': 51, 'token_start': 14, 'token_end': 18, 'label': 'DATUM'}, {'start': 60, 'end': 70, 'token_start': 24, 'token_end': 28, 'label': 'DATUM'}, {'start': 73, 'end': 88, 'token_start': 31, 'token_end': 33, 'label': 'FUNKTION'}, {'start': 100, 'end': 104, 'token_start': 38, 'token_end': 38, 'label': 'DATUM'}, {'start': 118, 'end': 134, 'token_start': 42, 'token_end': 42, 'label': 'FUNKTION'}, {'start': 135, 'end': 136, 'token_start': 43, 'token_end': 43, 'label': 'HOFSTAAT'}, {'start': 138, 'end': 144, 'token_start': 45, 'token_end': 45, 'label': 'FUNKTION'}, {'start': 160, 'end': 170, 'token_start': 49, 'token_end': 53, 'label': 'DATUM'}, {'start': 173, 'end': 184, 'token_start': 56, 'token_end': 56, 'label': 'FUNKTION'}, {'start': 209, 'end': 219, 'token_start': 65, 'token_end': 69, 'label': 'DATUM'}, {'start': 222, 'end': 230, 'token_start': 72, 'token_end': 74, 'label': 'FUNKTION'}, {'start': 240, 'end': 250, 'token_start': 80, 'token_end': 84, 'label': 'DATUM'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Kämmerer, 1686-11-15, 1704-00-00, Abgesandter, ao, 1699, Obersthofkanzler, K, Envoye, 1701-00-00, Abgesandter, 1704-00-00, Geh. Rat, 1704-00-00]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Kämmerer, 1686-11-15, 1704-00-00, Abgesandter, ao, 1699, Obersthofkanzler, K, Envoye, 1701-00-00, Abgesandter, 1704-00-00, Geh. Rat, 1704-00-00)
NLP COMPONENT >>> CreateChunks.py >>> Chunk HOFSTAAT = K
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(5) = [{'DATUM': ['1686-11-15', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}, {'DATUM': ['1699'], 'HOFSTAAT': 'K', 'FUNKTION': ['Abgesandter, ao', 'Obersthofkanzler'], 'AMT': None}, {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Envoye'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Abgesandter'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1686-11-15', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1699'], 'HOFSTAAT': 'K', 'FUNKTION': ['Abgesandter, ao', 'Obersthofkanzler'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	2: chunk: {'DATUM': ['1701-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Envoye'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	3: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Abgesandter'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	4: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 5, len Ämter-Spalte: 3
helper_hsv_match_hofstaate >>> r_H = L; J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1686-11-15', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1699'], 'HOFSTAAT': 'K', 'FUNKTION': ['Abgesandter, ao', 'Obersthofkanzler'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1701-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Envoye'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Abgesandter'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR; OKäA; Abgesandte / Frankreich
process_chunks >>> cD ['1686-11-15', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA GR
helper_hsv_post_process_dates >>> old: 1686-11-15, new: 1686-11-15<1686-11-15>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1686-11-15<1686-11-15>
chunk_process_datum >>> rel, chunk edw: 1686-11-15<1686-11-15>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Philipp Ludwig>, 'start_date_written': '1686-11-15<1686-11-15>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']
process_chunks >>> cD ['1699'], cF ['Abgesandter, ao', 'Obersthofkanzler'], cH K, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1699, new: 1699<1699>
chunk_process_datum >>> rel, chunk sdw: 1699<1699>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Philipp Ludwig>, 'start_date_written': '1699<1699>'}
chunk_get_nm_hst >>> c_H = K
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: K (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (K (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Abgesandter, ao', 'Obersthofkanzler']
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1699<1699> ' due to error ('Invalid iso date: ', '1699'): 
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1699<1699> ' due to error ('Invalid iso date: ', '1699'): 
process_chunks >>> cD ['1701-00-00'], cF ['Envoye'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Philipp Ludwig>, 'start_date_written': '1701-00-00<1701-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Envoye']
process_chunks >>> cD ['1704-00-00'], cF ['Abgesandter'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Philipp Ludwig>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Abgesandter']
process_chunks >>> cD ['1704-00-00'], cF ['Geh. Rat'], cH L, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Philipp Ludwig>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7088 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinzendorf
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}, {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1669-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis1678-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1669-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis1678-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA; RHR / Grafen- u. Herrenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  RHR 
process_chunks >>> cD ['1669-00-00'], cF ['Reichshofrat'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669-00-00<1669-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669-00-00<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Rudolph>, 'start_date_written': '1669-00-00<1669-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Reichshofrat']
process_chunks >>> cD ['1672/73-00-00<1672-06-30 - 73-00-00>', 'bis1678-00-00'], cF ['Kämmerer'], cH L, CA  RHR 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: bis1678-00-00, new: bis1678-00-00
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Rudolph>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis1678-00-00'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  RHR 
chunk_process_amt_NEW >>> c_A was:  RHR  and amt after matching with amt index is: RHR
chunk_process_amt_NEW >>>  Return value of inst2 = RHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']
parse_date >>>  APIS: Could not parse date: ' bis1678-00-00 ' due to error month must be in 1..12: 

--------- Start of row | 7089 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinzendorf
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1684-02-29/(', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1684-02-29/(', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1684-02-29/(', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD ['1684-02-29/(', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH L, CA OKäA
helper_hsv_post_process_dates >>> old: 1684-02-29/(, new: 1684-02-29/(
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1684-02-29/(
chunk_process_datum >>> rel, chunk edw: 1684-02-29/(
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Theodor>, 'start_date_written': '1684-02-29/(', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1684-02-29/( ' due to error Could not interpret date.: 

--------- Start of row | 7090 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinzendorf
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(2) = [{'DATUM': ['1678-05-31/1678-06-06<1678-05-31 - 1678-06-06>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}, {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1678-05-31/1678-06-06<1678-05-31 - 1678-06-06>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
NLP COMPONENT >>> CreateChunks.py >>> 	1: chunk: {'DATUM': ['1704-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> r_H = ksl.; L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ksl.
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ksl.
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h:  L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1678-05-31/1678-06-06<1678-05-31 - 1678-06-06>', 'bis 1704<1704-06-30>'], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1704-00-00'], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR; OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  OKäA
process_chunks >>> cD ['1678-05-31/1678-06-06<1678-05-31 - 1678-06-06>', 'bis 1704<1704-06-30>'], cF ['Kämmerer'], cH ksl., CA GR
helper_hsv_post_process_dates >>> inner date: <1678-05-31 - 1678-06-06>
helper_hsv_post_process_dates >>> new_i_date: <1678-05-31 - 1678-06-06>
helper_hsv_post_process_dates >>> old: 1678-05-31/1678-06-06<1678-05-31 - 1678-06-06>, new: 1678-05-31/1678-06-06<1678-05-31 - 1678-06-06>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1678-05-31/1678-06-06<1678-05-31 - 1678-06-06>
chunk_process_datum >>> rel, chunk edw: 1678-05-31/1678-06-06<1678-05-31 - 1678-06-06>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Wenzel >, 'start_date_written': '1678-05-31/1678-06-06<1678-05-31 - 1678-06-06>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']
process_chunks >>> cD ['1704-00-00'], cF ['Geh. Rat, wirkl.'], cH L, CA  OKäA
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, Wenzel >, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true:  OKäA
chunk_process_amt_NEW >>> c_A was:  OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat, wirkl.']

--------- Start of row | 7091 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinzendorf
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1677-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1677-00-00'], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1677-00-00'], cF ['Kämmerer'], cH EG, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1677-00-00, new: 1677-00-00<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677-00-00<1677-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, NN>, 'start_date_written': '1677-00-00<1677-06-30>'}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7092 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinzendorf
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1685-11-01'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1685-11-01'], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1685-11-01'], 'HOFSTAAT': 'J', 'FUNKTION': ['Edelknabe'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1685-11-01'], cF ['Edelknabe'], cH J, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1685-11-01, new: 1685-11-01<1685-11-01>
chunk_process_datum >>> rel, chunk sdw: 1685-11-01<1685-11-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzendorf, NN>, 'start_date_written': '1685-11-01<1685-11-01>'}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Edelknabe']

--------- Start of row | 7093 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sinzl (Sintzl)
person_process_field_familienname >>> fam1: Sinzl
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 14), match='(Sintzl)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Heizer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Heizer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Heizer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-HBH-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-HBH-NÖ-BH
process_chunks >>> cD [], cF ['Heizer'], cH L, CA HK-HBH-NÖ-BH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sinzl, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-HBH-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-HBH-NÖ-BH and amt after matching with amt index is: HK-HBH-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-HBH-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Heizer']

--------- Start of row | 7094 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Siticki
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Siticki, Paul>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7095 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitiki
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitiki, Paul>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7096 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitiki
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitiki, Paul>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7097 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschi, Peter>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7098 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschi, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7099 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschi, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7100 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschi, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7101 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschi [Sitschy]
person_process_field_familienname >>> fam1: Sitschi
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='[Sitschy]'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschi, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7102 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschkhy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschkhy, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7103 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschy
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschy, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7104 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschy, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7105 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschy, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7106 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschy, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7107 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschy, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7108 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschy, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7109 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschy, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7110 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschy, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7111 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschy, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7112 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschy, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7113 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschy, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7114 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitschy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitschy, Stephan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7115 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sitting
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Trabant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Trabant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Trabant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Trabantenleibgarde
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Trabant'], cH J, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sitting, Joachim>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Trabant']

--------- Start of row | 7116 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sizi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sizi, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7117 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sizy
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sizy, Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7118 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Skräwarzs
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Truchseß'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Skräwarzs, Julius Eusebius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Truchseß']

--------- Start of row | 7119 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7120 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7121 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7122 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7123 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7124 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7125 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7126 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7127 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7128 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7129 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7130 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7131 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7132 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7133 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7134 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7135 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7136 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Ferdinand Wilhelm>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7137 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Hans Joachim>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7138 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Hans Joachim>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7139 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Joachim>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7140 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7141 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Gräfin
person_process_field_titel >>> t_list = ['Gräfin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Obersthofmeisterin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Obersthofmeisterin']

--------- Start of row | 7142 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Gräfin
person_process_field_titel >>> t_list = ['Gräfin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD [], cF ['Obersthofmeisterin'], cH CF, CA OMeA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Obersthofmeisterin']

--------- Start of row | 7143 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Gräfin
person_process_field_titel >>> t_list = ['Gräfin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Obersthofmeisterin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Obersthofmeisterin']

--------- Start of row | 7144 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Gräfin
person_process_field_titel >>> t_list = ['Gräfin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Obersthofmeisterin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Obersthofmeisterin']

--------- Start of row | 7145 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Gräfin
person_process_field_titel >>> t_list = ['Gräfin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Obersthofmeisterin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Obersthofmeisterin']

--------- Start of row | 7146 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Gräfin
person_process_field_titel >>> t_list = ['Gräfin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Obersthofmeisterin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Obersthofmeisterin']

--------- Start of row | 7147 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Gräfin
person_process_field_titel >>> t_list = ['Gräfin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = 
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Obersthofmeisterin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Obersthofmeisterin']

--------- Start of row | 7148 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Gräfin
person_process_field_titel >>> t_list = ['Gräfin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Obersthofmeisterin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Obersthofmeisterin']

--------- Start of row | 7149 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata
person_process_field_titel >>> t_tit = Gräfin
person_process_field_titel >>> t_list = ['Gräfin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Obersthofmeisterin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Obersthofmeisterin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Obersthofmeisterin']

--------- Start of row | 7150 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata (Sclawata)
person_process_field_familienname >>> fam1: Slavata
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 18), match='(Sclawata)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata, Joachim>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7151 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Slavata von Chlum u. Koschumberg; Slavata z Chlumu a Kosumberka (Schlawata)
person_process_field_familienname >>> fam1: Slavata von Chlum u. Koschumberg; Slavata z Chlumu a Kosumberka
person_process_field_familienname >>> fam2: <re.Match object; span=(64, 75), match='(Schlawata)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Slavata von Chlum u. Koschumberg; Slavata z Chlumu a Kosumberka, Joachim>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7152 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Socbey (?)
person_process_field_titel >>> t_tit = Dr.med.
person_process_field_titel >>> t_list = ['Dr.med.']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Offiziere u.a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hofmediziner'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Socbey ?, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner']

--------- Start of row | 7153 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sodiz/Hodiz(?)
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sodiz/Hodiz?, Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7154 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Soewey [Sorbey; Sorbait, de?]
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Soewey [Sorbey; Sorbait, de?] END INPUT, ROW:7154
person_process_field_familienname >>> fam1: Soewey
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 29), match='[Sorbey; Sorbait, de?]'>
person_process_field_titel >>> t_tit = Dr.med.
person_process_field_titel >>> t_list = ['Dr.med.']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Offiziere u.a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD [], cF ['Hofmediziner'], cH EG, CA OMeA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Soewey, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner']

--------- Start of row | 7155 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Söhlen
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Ritter- u. Gelehrtenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
process_chunks >>> cD [], cF ['Reichshofrat'], cH L, CA RHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Söhlen, Rudolph Caspar>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: RHR
chunk_process_amt_NEW >>>  Return value of inst2 = RHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Reichshofrat']

--------- Start of row | 7156 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sohlental (Söhlenthal)
person_process_field_familienname >>> fam1: Sohlental
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 22), match='(Söhlenthal)'>
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Ritter- u. Gelehrtenstand, AC
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
process_chunks >>> cD [], cF ['Reichshofrat'], cH L, CA RHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sohlental, Rudolph Kaspar>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: RHR
chunk_process_amt_NEW >>>  Return value of inst2 = RHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Reichshofrat']

--------- Start of row | 7157 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Söhlenthal
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Ritter- u. Gelehrtenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
process_chunks >>> cD [], cF ['Reichshofrat'], cH L, CA RHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Söhlenthal, Rudolph Kaspar>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: RHR
chunk_process_amt_NEW >>>  Return value of inst2 = RHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Reichshofrat']

--------- Start of row | 7158 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Soiber (Stöbern)
person_process_field_familienname >>> fam1: Soiber
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 16), match='(Stöbern)'>
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Resident'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Resident'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Resident'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / kurfürst. Residenten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
process_chunks >>> cD [], cF ['Resident'], cH Dummy Hofstaat, CA RHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Soiber, Johann Ferdinand>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: RHR
chunk_process_amt_NEW >>>  Return value of inst2 = RHR (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Resident']

--------- Start of row | 7159 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Solar
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Solar, Viktor Amadeus>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7160 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Solb [Selb]
person_process_field_familienname >>> fam1: Solb
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 11), match='[Selb]'>
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Solb, Johann Gabriel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 7161 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Solimanno
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Postinbereiter', 'Pästinbereiter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Postinbereiter', 'Pästinbereiter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Postinbereiter', 'Pästinbereiter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Hoffuttermeister
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA 
process_chunks >>> cD [], cF ['Postinbereiter', 'Pästinbereiter'], cH L, CA OStA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Solimanno, Gabriel Francesco>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA 
chunk_process_amt_NEW >>> c_A was: OStA  and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Postinbereiter', 'Pästinbereiter']

--------- Start of row | 7162 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Soll
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Soll, Christian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7163 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Soll
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA NÖ-R
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Soll, Christian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R
chunk_process_amt_NEW >>> c_A was: NÖ-R and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7164 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Soll
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA NÖ-R
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Soll, Christian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R
chunk_process_amt_NEW >>> c_A was: NÖ-R and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7165 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Soll
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Soll, Christian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7166 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Soll [Salla]
person_process_field_familienname >>> fam1: Soll
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='[Salla]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Soll, Christian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7167 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Soll [Salla]
person_process_field_familienname >>> fam1: Soll
person_process_field_familienname >>> fam2: <re.Match object; span=(5, 12), match='[Salla]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Soll, Christian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7168 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Solle
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ(?) / Gelehrtenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ(?) 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ(?) 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Solle, Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ(?) 
chunk_process_amt_NEW >>> c_A was: NÖ(?)  and amt after matching with amt index is: NÖ(?)
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ(?) (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7169 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Solliciti
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA NÖ-R
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Solliciti, Christian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R
chunk_process_amt_NEW >>> c_A was: NÖ-R and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7170 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sollinti(?)
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sollinti?, Christian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7171 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sollinti(?)
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R 
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA NÖ-R 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sollinti?, Christian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R 
chunk_process_amt_NEW >>> c_A was: NÖ-R  and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7172 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sollner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Kammerdienerin'], cH EM, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sollner, Eva>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7173 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Söllner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdienerin'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Söllner, Eva>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7174 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Söllner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdienerin'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Söllner, Eva>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7175 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Söllner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Silberwäscher'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Silberwäscher'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Silberwäscher'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
process_chunks >>> cD [], cF ['Silberwäscher'], cH J, CA OMeA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Söllner, Johann Michael>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Silberwäscher']

--------- Start of row | 7176 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Söllner
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Silberwäscher'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Silberwäscher'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Silberwäscher'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA
process_chunks >>> cD [], cF ['Silberwäscher'], cH J, CA OMeA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Söllner, Johann Michael>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA
chunk_process_amt_NEW >>> c_A was: OMeA and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Silberwäscher']

--------- Start of row | 7177 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sollner (Söldner)
person_process_field_familienname >>> fam1: Sollner
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='(Söldner)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Kammerdienerin'], cH EM, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sollner, NN>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7178 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sollner (Söllner)
person_process_field_familienname >>> fam1: Sollner
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='(Söllner)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Kammerdienerin'], cH EM, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sollner, Eva>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7179 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sollner (Söllner)
person_process_field_familienname >>> fam1: Sollner
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='(Söllner)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Kammerdienerin'], cH EM, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sollner, Eva>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7180 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Solms
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Grafen- u. Herrenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
process_chunks >>> cD [], cF ['Reichshofrat'], cH L, CA RHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Solms, Friedrich Ernst>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: RHR
chunk_process_amt_NEW >>>  Return value of inst2 = RHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Reichshofrat']

--------- Start of row | 7181 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Solms
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerpräsident'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerpräsident'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Kammerpräsident'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerpräsident'], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Solms, Friedrich Ernst>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Kammerpräsident']

--------- Start of row | 7182 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Solms
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Titular Geh. Rat,)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :7182, Titular Geh. Rat, [{'start': 0, 'end': 16, 'token_start': 0, 'token_end': 3, 'label': 'FUNKTION'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Titular Geh. Rat]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Titular Geh. Rat,)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Titular Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Titular Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Titular Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Titular Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Solms, Friedrich Ernst>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Titular Geh. Rat']

--------- Start of row | 7183 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sommer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Konzipist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Konzipist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Kanzleiverwandte
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Konzipist'], cH L, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sommer, Niklas>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Konzipist']

--------- Start of row | 7184 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sommer (Sammer)
person_process_field_familienname >>> fam1: Sommer
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Sammer)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-HBH-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-HBH-NÖ-BH
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-HBH-NÖ-BH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sommer, Johann Konrad>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-HBH-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-HBH-NÖ-BH and amt after matching with amt index is: HK-HBH-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-HBH-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7185 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sommervogl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Kammerdiener, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kammerdiener, wirkl.'], cH J, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sommervogl, Joseph Anton>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener, wirkl.']

--------- Start of row | 7186 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sommervogl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Kammerdiener, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kammerdiener, wirkl.'], cH J, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sommervogl, Joseph Anton>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener, wirkl.']

--------- Start of row | 7187 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sommervogl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdiener'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Kammerdiener'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kammerdiener'], cH Dummy Hofstaat, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sommervogl, Joseph Anton>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Kammerdiener']

--------- Start of row | 7188 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Somogyi
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = UHKz / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = UHKz 
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA UHKz 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Somogyi, Franz >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: UHKz 
chunk_process_amt_NEW >>> c_A was: UHKz  and amt after matching with amt index is: UHKz
chunk_process_amt_NEW >>>  Return value of inst2 = UHKz (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7189 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Somogyi (Somogy)
person_process_field_familienname >>> fam1: Somogyi
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 16), match='(Somogy)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = UHKz
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = UHKz
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA UHKz
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Somogyi, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: UHKz
chunk_process_amt_NEW >>> c_A was: UHKz and amt after matching with amt index is: UHKz
chunk_process_amt_NEW >>>  Return value of inst2 = UHKz (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7190 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Somosa
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = MMT
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'MMT', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammerdienerinnen)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammerdienerinnen)
process_chunks >>> cD [], cF ['Kammerdienerin'], cH MMT, CA (Kammerdienerinnen)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Somosa, Antonia>}
chunk_get_nm_hst >>> c_H = MMT
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMT (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammerdienerinnen)
chunk_process_amt_NEW >>> c_A was: (Kammerdienerinnen) and amt after matching with amt index is: (Kammerdienerinnen)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammerdienerinnen) (MMT (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7191 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sonces
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kapellmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kapellmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kapellmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofmusik
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD [], cF ['Kapellmeister'], cH L, CA OMeA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sonces, Felice>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kapellmeister']

--------- Start of row | 7192 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sonces (Sances)
person_process_field_familienname >>> fam1: Sonces
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Sances)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kapellmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kapellmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kapellmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofmusik
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD [], cF ['Kapellmeister'], cH L, CA OMeA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sonces, Felice>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kapellmeister']

--------- Start of row | 7193 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sonces (Sances)
person_process_field_familienname >>> fam1: Sonces
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Sances)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kapellmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kapellmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kapellmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Hofmusik
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD [], cF ['Kapellmeister'], cH L, CA OMeA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sonces, Felici >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kapellmeister']

--------- Start of row | 7194 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sonnau
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sonnau, Franz Anton>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7195 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sonniz(?)
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkammerrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Hofkammerrat'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sonniz?, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkammerrat']

--------- Start of row | 7196 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sonntag
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Buchhaltereioffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Buchhaltereioffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Buchhaltereioffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
process_chunks >>> cD [], cF ['Buchhaltereioffizier'], cH Dummy Hofstaat, CA HK-NÖ-BH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sonntag, Johann Georg>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Buchhaltereioffizier']

--------- Start of row | 7197 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> sonntag
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Buchhaltereioffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Buchhaltereioffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Buchhaltereioffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG? / Buchhaltereioffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG? 
process_chunks >>> cD [], cF ['Buchhaltereioffizier'], cH Dummy Hofstaat, CA NÖ-LG? 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: sonntag, Johann Georg>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG? 
chunk_process_amt_NEW >>> c_A was: NÖ-LG?  and amt after matching with amt index is: NÖ-LG?
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG? (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Buchhaltereioffizier']

--------- Start of row | 7198 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sonsky
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkanzler', 'Bischof'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkanzler', 'Bischof'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkanzler', 'Bischof'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = UHKz
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = UHKz
process_chunks >>> cD [], cF ['Hofkanzler', 'Bischof'], cH L, CA UHKz
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sonsky, Ladislaus Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: UHKz
chunk_process_amt_NEW >>> c_A was: UHKz and amt after matching with amt index is: UHKz
chunk_process_amt_NEW >>>  Return value of inst2 = UHKz (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkanzler', 'Bischof']

--------- Start of row | 7199 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorau [Saurau?]
person_process_field_familienname >>> fam1: Sorau
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 15), match='[Saurau?]'>
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorau, Johann Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7200 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorau, von [Serau, von]
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Sorau, von [Serau, von] END INPUT, ROW:7200
person_process_field_familienname >>> fam1: Sorau, von
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='[Serau, von]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorau, von, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7201 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorau, von [Serau, von]
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Sorau, von [Serau, von] END INPUT, ROW:7201
person_process_field_familienname >>> fam1: Sorau, von
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='[Serau, von]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorau, von, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7202 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorbait (Sorbey)
person_process_field_familienname >>> fam1: Sorbait
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 16), match='(Sorbey)'>
person_process_field_titel >>> t_tit = Dr.med.
person_process_field_titel >>> t_list = ['Dr.med.']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Offiziere u.a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hofmediziner'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorbait, Paul?>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner']

--------- Start of row | 7203 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorbait (Sorbey)
person_process_field_familienname >>> fam1: Sorbait
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 16), match='(Sorbey)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner', 'Hofdoktor'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner', 'Hofdoktor'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner', 'Hofdoktor'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Offiziere u.a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hofmediziner', 'Hofdoktor'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorbait, Paul?>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner', 'Hofdoktor']

--------- Start of row | 7204 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorbait (Sorbey)
person_process_field_familienname >>> fam1: Sorbait
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 16), match='(Sorbey)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Offiziere u.a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hofmediziner'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorbait, Paul?>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner']

--------- Start of row | 7205 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorbait (Sorbey)
person_process_field_familienname >>> fam1: Sorbait
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 16), match='(Sorbey)'>
person_process_field_titel >>> t_tit = Dr.med.
person_process_field_titel >>> t_list = ['Dr.med.']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA (Offiziere u.a. Bediente)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA (Offiziere u.a. Bediente)
process_chunks >>> cD [], cF ['Hofmediziner'], cH EG, CA OMeA (Offiziere u.a. Bediente)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorbait, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA (Offiziere u.a. Bediente)
chunk_process_amt_NEW >>> c_A was: OMeA (Offiziere u.a. Bediente) and amt after matching with amt index is: OMeA (Offiziere u.a. Bediente)
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (Offiziere u.a. Bediente) (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner']

--------- Start of row | 7206 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorbait (Sorbey)
person_process_field_familienname >>> fam1: Sorbait
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 16), match='(Sorbey)'>
person_process_field_titel >>> t_tit = Dr.med.
person_process_field_titel >>> t_list = ['Dr.med.']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Offiziere u.a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD [], cF ['Hofmediziner'], cH EG, CA OMeA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorbait, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner']

--------- Start of row | 7207 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorbait (Sorby)
person_process_field_familienname >>> fam1: Sorbait
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 15), match='(Sorby)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner', 'Hofdoktor'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner', 'Hofdoktor'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner', 'Hofdoktor'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Offiziere u.a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hofmediziner', 'Hofdoktor'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorbait, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner', 'Hofdoktor']

--------- Start of row | 7208 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorbait (Sorby)
person_process_field_familienname >>> fam1: Sorbait
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 15), match='(Sorby)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner', 'Hofdoktor'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner', 'Hofdoktor'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner', 'Hofdoktor'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Offiziere u.a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hofmediziner', 'Hofdoktor'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorbait, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner', 'Hofdoktor']

--------- Start of row | 7209 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorbait (Sorobay)
person_process_field_familienname >>> fam1: Sorbait
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='(Sorobay)'>
person_process_field_titel >>> t_tit = Dr.med.
person_process_field_titel >>> t_list = ['Dr.med.']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Offiziere u.a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD [], cF ['Hofmediziner'], cH EG, CA OMeA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorbait, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner']

--------- Start of row | 7210 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorbait, de (Sorbey)
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Sorbait, de (Sorbey) END INPUT, ROW:7210
person_process_field_familienname >>> fam1: Sorbait, de
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 20), match='(Sorbey)'>
person_process_field_titel >>> t_tit = Dr.
person_process_field_titel >>> t_list = ['Dr.']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Offiziere u.a. Bediente)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Offiziere u.a. Bediente)
process_chunks >>> cD [], cF ['Hofmediziner'], cH EG, CA (Offiziere u.a. Bediente)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorbait, de, Paul?>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: (Offiziere u.a. Bediente)
chunk_process_amt_NEW >>> c_A was: (Offiziere u.a. Bediente) and amt after matching with amt index is: (Offiziere u.a. Bediente)
chunk_process_amt_NEW >>>  Return value of inst2 = (Offiziere u.a. Bediente) (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner']

--------- Start of row | 7211 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorbait, de (Sorbey)
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Sorbait, de (Sorbey) END INPUT, ROW:7211
person_process_field_familienname >>> fam1: Sorbait, de
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 20), match='(Sorbey)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Offiziere u.a. Bediente)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Offiziere u.a. Bediente)
process_chunks >>> cD [], cF ['Hofmediziner'], cH EG, CA (Offiziere u.a. Bediente)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorbait, de, Paul?>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: (Offiziere u.a. Bediente)
chunk_process_amt_NEW >>> c_A was: (Offiziere u.a. Bediente) and amt after matching with amt index is: (Offiziere u.a. Bediente)
chunk_process_amt_NEW >>>  Return value of inst2 = (Offiziere u.a. Bediente) (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner']

--------- Start of row | 7212 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorbeit
person_process_field_titel >>> t_tit = Dr.med.
person_process_field_titel >>> t_list = ['Dr.med.']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Offiziere u.a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hofmediziner'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorbeit, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner']

--------- Start of row | 7213 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorbey
person_process_field_titel >>> t_tit = Dr.med.
person_process_field_titel >>> t_list = ['Dr.med.']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Offiziere u.a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hofmediziner'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorbey, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner']

--------- Start of row | 7214 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorbey
person_process_field_titel >>> t_tit = Dr.med.
person_process_field_titel >>> t_list = ['Dr.med.']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofmediziner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Offiziere u.a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hofmediziner'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorbey, NN>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner']

--------- Start of row | 7215 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sorbey [Sorbait, de?]
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Sorbey [Sorbait, de?] END INPUT, ROW:7215
person_process_field_familienname >>> fam1: Sorbey
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 21), match='[Sorbait, de?]'>
person_process_field_titel >>> t_tit = Dr.
person_process_field_titel >>> t_list = ['Dr.']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofdoktor'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofdoktor'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Hofdoktor'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Offiziere u.a. Bediente
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hofdoktor'], cH EG, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sorbey, Paul?>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Hofdoktor']

--------- Start of row | 7216 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sormani
person_process_field_titel >>> t_tit = Comte
person_process_field_titel >>> t_list = ['Comte']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sormani, Antonio>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7217 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sortellen?
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sortellen?, Friedrich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7218 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Soto, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Soto, de END INPUT, ROW:7218
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Dienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Dienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = MMT
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'MMT', 'FUNKTION': ['Dienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Frauenzimmerdienerinnen (Azafatos y de Tocas))
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Frauenzimmerdienerinnen (Azafatos y de Tocas))
process_chunks >>> cD [], cF ['Dienerin'], cH MMT, CA (Frauenzimmerdienerinnen (Azafatos y de Tocas))
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Soto, de, Anna Maria>}
chunk_get_nm_hst >>> c_H = MMT
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMT (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Frauenzimmerdienerinnen (Azafatos y de Tocas))
chunk_process_amt_NEW >>> c_A was: (Frauenzimmerdienerinnen (Azafatos y de Tocas)) and amt after matching with amt index is: (Frauenzimmerdienerinnen (Azafatos y de Tocas))
chunk_process_amt_NEW >>>  Return value of inst2 = (Frauenzimmerdienerinnen (Azafatos y de Tocas)) (MMT (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Dienerin']

--------- Start of row | 7219 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Soto, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Soto, de END INPUT, ROW:7219
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Kammerdienerin,)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :7219, Kammerdienerin, Mayor, [{'token_start': 0, 'token_end': 0, 'start': 0, 'end': 14, 'text': 'Kammerdienerin', 'label': 'FUNKTION', 'source': '/nerdpool/models/viecpro_ner_hzab_12-20', 'input_hash': 788921816}, {'token_start': 2, 'token_end': 2, 'start': 16, 'end': 21, 'text': 'Mayor', 'label': 'FUNKTION', 'source': '/nerdpool/models/viecpro_ner_hzab_12-20', 'input_hash': 788921816}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Kammerdienerin, Mayor]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Kammerdienerin, Mayor)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin', 'Mayor'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin', 'Mayor'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = MMT
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'MMT', 'FUNKTION': ['Kammerdienerin', 'Mayor'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammerbedienstete (Las de la Camara))
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammerbedienstete (Las de la Camara))
process_chunks >>> cD [], cF ['Kammerdienerin', 'Mayor'], cH MMT, CA (Kammerbedienstete (Las de la Camara))
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Soto, de, Maria>}
chunk_get_nm_hst >>> c_H = MMT
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: MMT (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammerbedienstete (Las de la Camara))
chunk_process_amt_NEW >>> c_A was: (Kammerbedienstete (Las de la Camara)) and amt after matching with amt index is: (Kammerbedienstete (Las de la Camara))
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammerbedienstete (Las de la Camara)) (MMT (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin', 'Mayor']

--------- Start of row | 7220 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souces, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souces, de END INPUT, ROW:7220
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souces, de, Ludwig Ratwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7221 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souche (Souches, de)
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souche (Souches, de) END INPUT, ROW:7221
person_process_field_familienname >>> fam1: Souche
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 20), match='(Souches, de)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souche, Johann Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7222 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Mundschenk'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Mundschenk'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Carl ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Mundschenk']

--------- Start of row | 7223 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Carl ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7224 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Carl Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7225 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Carl Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7226 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Carl Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7227 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Carl Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7228 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Carl Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7229 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Carl Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7230 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Carl Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7231 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Carl Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7232 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Gräfin
person_process_field_titel >>> t_list = ['Gräfin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofdame'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofdame'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Hofdame'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Hofdame'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Claudia>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Hofdame']

--------- Start of row | 7233 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Ernst Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7234 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7235 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Hanns Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7236 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Hanns Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7237 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Hanns Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7238 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Hanns Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7239 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Hanns Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7240 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Hanns Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7241 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Hanns Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7242 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Hanns Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7243 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Hans ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7244 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Hans Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7245 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Hans Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7246 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Johann Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7247 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Johann Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7248 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Johann Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7249 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Johann Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7250 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Johann Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7251 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Karl Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7252 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = de
person_process_field_titel >>> t_list = ['de']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Lous Raduit>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7253 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7254 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7255 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Geh. Rat, General, a.d.waras. Grenze)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :7255, Geh. Rat u. General a.d.waras. Grenze, [{'start': 0, 'end': 8, 'token_start': 0, 'token_end': 2, 'label': 'FUNKTION'}, {'start': 12, 'end': 19, 'token_start': 4, 'token_end': 4, 'label': 'FUNKTION'}, {'start': 20, 'end': 37, 'token_start': 5, 'token_end': 7, 'label': 'AMT'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Geh. Rat, General, a.d.waras. Grenze]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Geh. Rat, General, a.d.waras. Grenze)
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Ludwig Radwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7256 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Gräfin
person_process_field_titel >>> t_list = ['Gräfin']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, Maria Antonia>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7257 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH J, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, NN>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7258 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7258
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Mundschenk'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Mundschenk'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Mundschenk'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Mundschenk']

--------- Start of row | 7259 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7259
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Carl Joseph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7260 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7260
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Carl Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7261 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7261
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Carl Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7262 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7262
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Hanns Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7263 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7263
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Johann Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7264 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7264
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Johann Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7265 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7265
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = nan
process_chunks >>> cD [], cF ['General'], cH Dummy Hofstaat, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Lous Raduit>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['General']

--------- Start of row | 7266 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7266
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Lous Raduit>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7267 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7267
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Lous Raduit>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7268 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7268
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Geh. Rat, wirkl.u, General, a.d.waras. Grenze)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :7268, Geh. Rat, wirkl.u. General a.d.waras. Grenze, [{'start': 0, 'end': 17, 'token_start': 0, 'token_end': 4, 'label': 'FUNKTION'}, {'start': 19, 'end': 26, 'token_start': 6, 'token_end': 6, 'label': 'FUNKTION'}, {'start': 27, 'end': 44, 'token_start': 7, 'token_end': 9, 'label': 'AMT'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Geh. Rat, wirkl.u, General, a.d.waras. Grenze]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Geh. Rat, wirkl.u, General, a.d.waras. Grenze)
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.u', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.u', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat, wirkl.u', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.u', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Lous Raduit>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat, wirkl.u', 'General']

--------- Start of row | 7269 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7269
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Lous Raduit>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7270 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7270
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Lous Raduit>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7271 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7271
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7272 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7272
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7273 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7273
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7274 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7274
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Ludwig Radwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7275 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7275
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Ludwig Radwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7276 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7276
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Geh. Rat, wirkl.u, General, a.d.wind. Grenze)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :7276, Geh. Rat, wirkl.u. General a.d.wind. Grenze, [{'start': 0, 'end': 17, 'token_start': 0, 'token_end': 4, 'label': 'FUNKTION'}, {'start': 19, 'end': 26, 'token_start': 6, 'token_end': 6, 'label': 'FUNKTION'}, {'start': 27, 'end': 43, 'token_start': 7, 'token_end': 9, 'label': 'AMT'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Geh. Rat, wirkl.u, General, a.d.wind. Grenze]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Geh. Rat, wirkl.u, General, a.d.wind. Grenze)
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.wind. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.u', 'General'], 'AMT': 'a.d.wind. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.u', 'General'], 'AMT': 'a.d.wind. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat, wirkl.u', 'General'], 'AMT': 'a.d.wind. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.wind. Grenze
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.u', 'General'], cH L, CA a.d.wind. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Ludwig Radwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.wind. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.wind. Grenze and amt after matching with amt index is: a.d.wind. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.wind. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat, wirkl.u', 'General']

--------- Start of row | 7277 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7277
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Ludwig Ratwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7278 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7278
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Ludwig Ratwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7279 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7279
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Ludwig Ratwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7280 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7280
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Ludwig Ratwig >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7281 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7281
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.u', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.u', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat, wirkl.u', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.u', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Ludwig Ratwig >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat, wirkl.u', 'General']

--------- Start of row | 7282 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7282
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Ludwig Ratwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7283 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7283
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Ludwig Ratwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: waras. Grenze
chunk_process_amt_NEW >>> c_A was: waras. Grenze and amt after matching with amt index is: waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7284 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souches, de END INPUT, ROW:7284
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = a.d.waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, de, Ludwig Ratwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7285 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souches, di
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'General'], 'AMT': 'waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = waras. Grenze
process_chunks >>> cD [], cF ['Geh. Rat', 'General'], cH L, CA waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souches, di, NN>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: waras. Grenze
chunk_process_amt_NEW >>> c_A was: waras. Grenze and amt after matching with amt index is: waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = waras. Grenze (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'General']

--------- Start of row | 7286 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souchs
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souchs, Carl Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7287 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souchs
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souchs, Ernst Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7288 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souchs, de (Souches, de)
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souchs, de (Souches, de) END INPUT, ROW:7288
person_process_field_familienname >>> fam1: Souchs, de
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 24), match='(Souches, de)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = a.d.waras. Grenze
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['General'], 'AMT': 'a.d.waras. Grenze'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['General'], 'AMT': 'a.d.waras. Grenze'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['General'], 'AMT': 'a.d.waras. Grenze'}
helper_hsv_match_amt_with_funct >>> r_A = nan
process_chunks >>> cD [], cF ['General'], cH Dummy Hofstaat, CA a.d.waras. Grenze
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souchs, de, Lous Raduit>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: a.d.waras. Grenze
chunk_process_amt_NEW >>> c_A was: a.d.waras. Grenze and amt after matching with amt index is: a.d.waras. Grenze
chunk_process_amt_NEW >>>  Return value of inst2 = a.d.waras. Grenze (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['General']

--------- Start of row | 7289 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Souchs, de (Souches, de)
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Souchs, de (Souches, de) END INPUT, ROW:7289
person_process_field_familienname >>> fam1: Souchs, de
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 24), match='(Souches, de)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Souchs, de, Lous Raduit>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7290 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Soue
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Soue, Johann Georg Friedrich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7291 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Soye
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Soye, Philipp Emanuel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7292 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Soye, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Soye, de END INPUT, ROW:7292
person_process_field_titel >>> t_tit = Principiano Baron
person_process_field_titel >>> t_list = ['Principiano Baron']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Soye, de, Philipp Emanuel>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7293 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Soys
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Soys, Ernst Friedrich Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7294 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spacirer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sesselträger'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sesselträger'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sesselträger'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Hoffuttermeister
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA 
process_chunks >>> cD [], cF ['Sesselträger'], cH L, CA OStA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spacirer, Johann Matthias>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OStA 
chunk_process_amt_NEW >>> c_A was: OStA  and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sesselträger']

--------- Start of row | 7295 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Späckhl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HKR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Späckhl, NN>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7296 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Span von Spankau (Spaen von Spanckhau)
person_process_field_familienname >>> fam1: Span von Spankau
person_process_field_familienname >>> fam2: <re.Match object; span=(17, 38), match='(Spaen von Spanckhau)'>
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> RenameFunctions.py >>> removing GWM from ents
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Span von Spankau, Alexander>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7297 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spanckau
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spanckau, Alexander>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7298 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spänckau
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spänckau, Alexander>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7299 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spanier [Spaur]
person_process_field_familienname >>> fam1: Spanier
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 15), match='[Spaur]'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spanier, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7300 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spankau
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spankau, Alexander>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7301 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spankau
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spankau, Alexander>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7302 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spankau (Spanckhau)
person_process_field_familienname >>> fam1: Spankau
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 19), match='(Spanckhau)'>
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spankau, Alexander>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7303 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spankau (Spankhau)
person_process_field_familienname >>> fam1: Spankau
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 18), match='(Spankhau)'>
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spankau, Alexander>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7304 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spankau (Spankhau)
person_process_field_familienname >>> fam1: Spankau
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 18), match='(Spankhau)'>
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spankau, Alexander>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7305 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spankau (Spankhau)
person_process_field_familienname >>> fam1: Spankau
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 18), match='(Spankhau)'>
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spankau, Alexander>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7306 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spankhaw
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spankhaw, Alexander>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7307 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spannach
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofmediziner'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofmediziner'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Offiziere u.a. Bediente/Mediziner, Hof-
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD [], cF ['Hofmediziner'], cH L, CA OMeA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spannach, Johann Georg>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofmediziner']

--------- Start of row | 7308 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spanz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdienerin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spanz, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7309 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spanz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Kammerdienerin'], cH CF, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spanz, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7310 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spanz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdienerin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spanz, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7311 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spanz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdienerin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spanz, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7312 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spanz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdienerin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spanz, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7313 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spanz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = 
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdienerin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spanz, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7314 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spanz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdienerin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spanz, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7315 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spanz
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammerfräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdienerin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spanz, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7316 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spanz (Spantzien)
person_process_field_familienname >>> fam1: Spanz
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 17), match='(Spantzien)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerdienerin'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spanz, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7317 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spanz (Spaz/Sporz(?))
person_process_field_familienname >>> fam1: Spanz
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 19), match='(Spaz/Sporz?)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerdienerin'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Kammerdienerin'], cH CF, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spanz, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerdienerin']

--------- Start of row | 7318 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sparcher
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sparcher, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7319 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spauer
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spauer, Leo Christoph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7320 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spauer
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spauer, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7321 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spauer, Plauen u. Vallör
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spauer, Plauen u. Vallör, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7322 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaun
person_process_field_titel >>> t_tit = JUD
person_process_field_titel >>> t_list = ['JUD']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Advokat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Advokat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Advokat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Advokaten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
process_chunks >>> cD [], cF ['Advokat'], cH L, CA HKR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaun, Franz Anton>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Advokat']

--------- Start of row | 7323 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Anton>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7324 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Carl>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7325 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7326 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7327 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7328 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7329 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7330 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7331 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7332 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7333 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7334 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7335 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7336 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7337 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7338 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7339 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7340 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7341 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7342 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7343 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7344 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7345 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = ksl.
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ksl.
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ksl.
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.'], cH ksl., CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat, wirkl.']

--------- Start of row | 7346 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Anton Joseph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7347 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Daxis>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7348 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7349 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7350 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7351 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7352 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7353 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7354 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7355 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7356 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7357 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7358 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7359 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7360 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7361 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7362 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7363 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7364 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7365 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7366 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7367 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Johann Anton>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7368 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Johann Anton>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7369 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Johann Anton>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7370 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = ksl.
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ksl.
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ksl.
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.'], cH ksl., CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Johann Anton>}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat, wirkl.']

--------- Start of row | 7371 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Joseph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7372 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7373 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7374 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7375 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7376 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7377 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7378 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7379 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7380 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7381 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7382 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7383 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7384 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7385 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7386 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7387 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7388 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7389 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7390 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Lepold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7391 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7392 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7393 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7394 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7395 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7396 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7397 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7398 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7399 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7400 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7401 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7402 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7403 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7404 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, NN>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7405 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur (Spauer)
person_process_field_familienname >>> fam1: Spaur
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 14), match='(Spauer)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7406 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur (Spauer)
person_process_field_familienname >>> fam1: Spaur
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 14), match='(Spauer)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7407 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur (Spauer)
person_process_field_familienname >>> fam1: Spaur
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 14), match='(Spauer)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Leopold>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7408 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur (Spauer)
person_process_field_familienname >>> fam1: Spaur
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 14), match='(Spauer)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, Oswald>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7409 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Vallör
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Vallör, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7410 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Vallör
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Vallör, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7411 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Vallör
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Vallör, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7412 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Vallör
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Vallör, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7413 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Vallör
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Vallör, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7414 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Vallör
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Vallör, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7415 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Vallör
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Vallör, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7416 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Vallör
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Vallör, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7417 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Vallör
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Vallör, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7418 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Vallör
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Vallör, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7419 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Vallör
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Vallör, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7420 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Vallör
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Vallör, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7421 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Vallör
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Vallör, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7422 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Vallör
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Vallör, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7423 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Vallör (Spaur)
person_process_field_familienname >>> fam1: Spaur u. Vallör
person_process_field_familienname >>> fam2: <re.Match object; span=(16, 23), match='(Spaur)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Vallör, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7424 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Wallor
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Wallor, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7425 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Wollan [Spaur u. Vallör]
person_process_field_familienname >>> fam1: Spaur u. Wollan
person_process_field_familienname >>> fam2: <re.Match object; span=(16, 33), match='[Spaur u. Vallör]'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Wollan, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7426 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Wollar
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Wollar, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7427 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur u. Woller
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur u. Woller, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7428 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7428
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, Franz Paris>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7429 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7429
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at start of call = (Hoffräulein, Kammerfräulein)
NLP COMPONENT >>> UseExistingAnnotations.py >>> compare docs
NLP COMPONENT >>> UseExistingAnnotations.py >>> THIS WAS LOGGED :7429, Hoffräulein (Kammerfräulein), [{'start': 0, 'end': 11, 'token_start': 0, 'token_end': 0, 'label': 'FUNKTION'}, {'start': 13, 'end': 27, 'token_start': 2, 'token_end': 2, 'label': 'FUNKTION'}]
NLP COMPONENT >>> UseExistingAnnotations.py >>> lst_ents = [Hoffräulein, Kammerfräulein]
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc.ents at end of call = (Hoffräulein, Kammerfräulein)
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Hoffräulein', 'Kammerfräulein'], cH EM, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, Maria>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Hoffräulein', 'Kammerfräulein']

--------- Start of row | 7430 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7430
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EM, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN, die jüngere>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7431 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7431
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN, die jüngere>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7432 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7432
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Hoffräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Hoffräulein'], cH EM, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN, jun.>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Hoffräulein']

--------- Start of row | 7433 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7433
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Hoffräulein', 'Kammerfräulein'], cH EM, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, Theresia>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Hoffräulein', 'Kammerfräulein']

--------- Start of row | 7434 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7434
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Hoffräulein', 'Kammerfräulein'], cH CF, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Hoffräulein', 'Kammerfräulein']

--------- Start of row | 7435 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7435
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Hoffräulein', 'Kammerfräulein'], cH CF, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Hoffräulein', 'Kammerfräulein']

--------- Start of row | 7436 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7436
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Hoffräulein', 'Kammerfräulein'], cH CF, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Hoffräulein', 'Kammerfräulein']

--------- Start of row | 7437 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7437
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Hoffräulein', 'Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Hoffräulein', 'Kammerfräulein'], cH CF, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Hoffräulein', 'Kammerfräulein']

--------- Start of row | 7438 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7438
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7439 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7439
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7440 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7440
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EM, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7441 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7441
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7442 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7442
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7443 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7443
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7444 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7444
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7445 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7445
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7446 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7446
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7447 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7447
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = 
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7448 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7448
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = 
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7449 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7449
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7450 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7450
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Frauenzimmer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7451 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7451
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7452 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7452
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7453 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7453
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammerfräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7454 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7454
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = CF
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'CF', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammerfräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH CF, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = CF
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: CF (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (CF (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7455 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7455
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7456 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7456
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7457 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7457
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammer- u. Hoffräulein
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EM, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7458 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7458
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Kammerfräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Kammerfräulein'], cH EM, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Kammerfräulein']

--------- Start of row | 7459 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7459
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Hoffräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Hoffräulein'], cH EM, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Hoffräulein']

--------- Start of row | 7460 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spaur, von
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Spaur, von END INPUT, ROW:7460
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hoffräulein'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EM
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EM
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EM
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EM', 'FUNKTION': ['Hoffräulein'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = (Kammer- u. Hoffräulein)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = (Kammer- u. Hoffräulein)
process_chunks >>> cD [], cF ['Hoffräulein'], cH EM, CA (Kammer- u. Hoffräulein)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spaur, von, NN>}
chunk_get_nm_hst >>> c_H = EM
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EM (Ksin.)
chunk_process_amt_NEW >>> c_A in if c_A true: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>> c_A was: (Kammer- u. Hoffräulein) and amt after matching with amt index is: (Kammer- u. Hoffräulein)
chunk_process_amt_NEW >>>  Return value of inst2 = (Kammer- u. Hoffräulein) (EM (Ksin.))
chunk_create_relations >>> create realtions called for c_F ['Hoffräulein']

--------- Start of row | 7461 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckel
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Beisitzer', 'Landrecht'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Beisitzer', 'Landrecht'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär', 'Beisitzer', 'Landrecht'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer, Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Sekretär', 'Beisitzer', 'Landrecht'], cH L, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckel, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär', 'Beisitzer', 'Landrecht']

--------- Start of row | 7462 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckel
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Beisitzer', 'Landrecht'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Beisitzer', 'Landrecht'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Sekretär', 'Beisitzer', 'Landrecht'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer, Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Sekretär', 'Beisitzer', 'Landrecht'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckel, Johann>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Sekretär', 'Beisitzer', 'Landrecht']

--------- Start of row | 7463 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckel
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk HOFSTAAT = Landrechtsbeisitzer
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Landrechtsbeisitzer
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer, Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Sekretär'], cH Landrechtsbeisitzer, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckel, Johann>}
chunk_get_nm_hst >>> c_H = Landrechtsbeisitzer
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: Landrechtsbeisitzer
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Landrechtsbeisitzer)
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7464 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckel (Spekhl)
person_process_field_familienname >>> fam1: Speckel
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 16), match='(Spekhl)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Beisitzer', 'Landrecht'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Beisitzer', 'Landrecht'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär', 'Beisitzer', 'Landrecht'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer, Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Sekretär', 'Beisitzer', 'Landrecht'], cH L, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckel, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär', 'Beisitzer', 'Landrecht']

--------- Start of row | 7465 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckel (Spockhl)
person_process_field_familienname >>> fam1: Speckel
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='(Spockhl)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk HOFSTAAT = Landrechtsbeisitzer
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Landrechtsbeisitzer
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer, Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Sekretär'], cH Landrechtsbeisitzer, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckel, Johann>}
chunk_get_nm_hst >>> c_H = Landrechtsbeisitzer
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: Landrechtsbeisitzer
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Landrechtsbeisitzer)
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7466 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Specker
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Specker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7467 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Specker
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Specker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7468 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Specker (Sparckher)
person_process_field_familienname >>> fam1: Specker
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 19), match='(Sparckher)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Specker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7469 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Specker (Spärckher)
person_process_field_familienname >>> fam1: Specker
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 19), match='(Spärckher)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Specker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7470 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Specker (Speckher)
person_process_field_familienname >>> fam1: Specker
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 18), match='(Speckher)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Specker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7471 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Specker (Speeker)
person_process_field_familienname >>> fam1: Specker
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='(Speeker)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Specker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7472 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Specker (Spekher)
person_process_field_familienname >>> fam1: Specker
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='(Spekher)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Specker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7473 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Specker (Spenker)
person_process_field_familienname >>> fam1: Specker
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='(Spenker)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffizier
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Specker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7474 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Specker (Spercker)
person_process_field_familienname >>> fam1: Specker
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 18), match='(Spercker)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Specker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7475 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Specker (Spercker)
person_process_field_familienname >>> fam1: Specker
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 18), match='(Spercker)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Specker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7476 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Specker (Sperker)
person_process_field_familienname >>> fam1: Specker
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='(Sperker)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Specker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7477 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Specker (Sperkher)
person_process_field_familienname >>> fam1: Specker
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 18), match='(Sperkher)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Specker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7478 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Specker (Sperkher)
person_process_field_familienname >>> fam1: Specker
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 18), match='(Sperkher)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffizier
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Specker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7479 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Specker (Spörckher)
person_process_field_familienname >>> fam1: Specker
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 19), match='(Spörckher)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Specker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7480 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckhl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk HOFSTAAT = Landrechtsbeisitzer
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeistzer, Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Sekretär'], cH Landrechtsbeisitzer, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckhl, Johann>}
chunk_get_nm_hst >>> c_H = Landrechtsbeisitzer
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: Landrechtsbeisitzer
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Landrechtsbeisitzer)
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7481 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckhl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Sekretär'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckhl, Johann>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7482 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckhl [Speckel]
person_process_field_familienname >>> fam1: Speckhl
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='[Speckel]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk HOFSTAAT = Landrechtsbeisitzer
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Landrechtsbeisitzer
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Sekretär'], cH Landrechtsbeisitzer, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckhl, Johann>}
chunk_get_nm_hst >>> c_H = Landrechtsbeisitzer
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: Landrechtsbeisitzer
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Landrechtsbeisitzer)
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7483 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckl (Specke)
person_process_field_familienname >>> fam1: Speckl
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Specke)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckl, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7484 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckl (Speckel)
person_process_field_familienname >>> fam1: Speckl
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 16), match='(Speckel)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Sekretär'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckl, Johann>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7485 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckl (Spehtl)
person_process_field_familienname >>> fam1: Speckl
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Spehtl)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Beisitzer', 'Landrecht'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär', 'Beisitzer', 'Landrecht'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär', 'Beisitzer', 'Landrecht'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Sekretär', 'Beisitzer', 'Landrecht'], cH L, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckl, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär', 'Beisitzer', 'Landrecht']

--------- Start of row | 7486 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckl (Spenkel)
person_process_field_familienname >>> fam1: Speckl
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 16), match='(Spenkel)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer, Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Sekretär'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckl, Johann>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7487 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckl (Spockhl)
person_process_field_familienname >>> fam1: Speckl
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 16), match='(Spockhl)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk HOFSTAAT = Landrechtsbeisitzer
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Landrechtsbeisitzer
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer, Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Sekretär'], cH Landrechtsbeisitzer, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckl, Johann>}
chunk_get_nm_hst >>> c_H = Landrechtsbeisitzer
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: Landrechtsbeisitzer
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Landrechtsbeisitzer)
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7488 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckl (Spockhl)
person_process_field_familienname >>> fam1: Speckl
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 16), match='(Spockhl)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk HOFSTAAT = Landrechtsbeisitzer
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Landrechtsbeisitzer
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Sekretär'], cH Landrechtsbeisitzer, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckl, Johann>}
chunk_get_nm_hst >>> c_H = Landrechtsbeisitzer
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: Landrechtsbeisitzer
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Landrechtsbeisitzer)
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7489 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckl (Spockhl)
person_process_field_familienname >>> fam1: Speckl
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 16), match='(Spockhl)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Sekretär'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckl, Johann>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7490 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speckl (Spöckl)
person_process_field_familienname >>> fam1: Speckl
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 15), match='(Spöckl)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Registrant'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Registrant'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Registrant'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ / Registratur
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ 
process_chunks >>> cD [], cF ['Registrant'], cH Dummy Hofstaat, CA NÖ 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speckl, Johann Michael>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ 
chunk_process_amt_NEW >>> c_A was: NÖ  and amt after matching with amt index is: NÖ
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Registrant']

--------- Start of row | 7491 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speerschneider
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHKz / Kanzleiverwandte
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHKz 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA BHKz 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speerschneider, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHKz 
chunk_process_amt_NEW >>> c_A was: BHKz  and amt after matching with amt index is: BHKz
chunk_process_amt_NEW >>>  Return value of inst2 = BHKz (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7492 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speerschneider
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA BHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speerschneider, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: BHR
chunk_process_amt_NEW >>>  Return value of inst2 = BHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7493 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speerschneider
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA BHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speerschneider, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: BHR
chunk_process_amt_NEW >>>  Return value of inst2 = BHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7494 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speerschneider
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA BHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speerschneider, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: BHR
chunk_process_amt_NEW >>>  Return value of inst2 = BHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7495 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speerschneider
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
process_chunks >>> cD [], cF ['Kanzlist'], cH Dummy Hofstaat, CA BHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speerschneider, Johann>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: BHR
chunk_process_amt_NEW >>>  Return value of inst2 = BHR (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7496 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speerschneider
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
process_chunks >>> cD [], cF ['Kanzlist'], cH Dummy Hofstaat, CA BHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speerschneider, Johann>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: BHR
chunk_process_amt_NEW >>>  Return value of inst2 = BHR (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7497 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speerschneider (Sperschneider)
person_process_field_familienname >>> fam1: Speerschneider
person_process_field_familienname >>> fam2: <re.Match object; span=(15, 30), match='(Sperschneider)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHKz / Kanzleiverwandte
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHKz 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA BHKz 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speerschneider, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHKz 
chunk_process_amt_NEW >>> c_A was: BHKz  and amt after matching with amt index is: BHKz
chunk_process_amt_NEW >>>  Return value of inst2 = BHKz (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7498 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speerschneider (Sperschneider)
person_process_field_familienname >>> fam1: Speerschneider
person_process_field_familienname >>> fam2: <re.Match object; span=(15, 30), match='(Sperschneider)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA BHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speerschneider, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: BHR
chunk_process_amt_NEW >>>  Return value of inst2 = BHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7499 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speerschneider (Sperschneider)
person_process_field_familienname >>> fam1: Speerschneider
person_process_field_familienname >>> fam2: <re.Match object; span=(15, 30), match='(Sperschneider)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHKz  /  Kanzleiverwandte
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHKz  
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA BHKz  
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speerschneider, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHKz  
chunk_process_amt_NEW >>> c_A was: BHKz   and amt after matching with amt index is: BHKz
chunk_process_amt_NEW >>>  Return value of inst2 = BHKz (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7500 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speerschneider (Sperschneyder)
person_process_field_familienname >>> fam1: Speerschneider
person_process_field_familienname >>> fam2: <re.Match object; span=(15, 30), match='(Sperschneyder)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHKz / Kanzleiverwandte
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHKz 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA BHKz 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speerschneider, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHKz 
chunk_process_amt_NEW >>> c_A was: BHKz  and amt after matching with amt index is: BHKz
chunk_process_amt_NEW >>>  Return value of inst2 = BHKz (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7501 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speerschneider (Spreeschneider)
person_process_field_familienname >>> fam1: Speerschneider
person_process_field_familienname >>> fam2: <re.Match object; span=(15, 31), match='(Spreeschneider)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA BHR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speerschneider, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR
chunk_process_amt_NEW >>> c_A was: BHR and amt after matching with amt index is: BHR
chunk_process_amt_NEW >>>  Return value of inst2 = BHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7502 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speerschneider (Spreeschneider)
person_process_field_familienname >>> fam1: Speerschneider
person_process_field_familienname >>> fam2: <re.Match object; span=(15, 31), match='(Spreeschneider)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHKz
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHKz
process_chunks >>> cD [], cF ['Kanzlist'], cH Dummy Hofstaat, CA BHKz
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speerschneider, Johann>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: BHKz
chunk_process_amt_NEW >>> c_A was: BHKz and amt after matching with amt index is: BHKz
chunk_process_amt_NEW >>>  Return value of inst2 = BHKz (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7503 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Speidel
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMeA / Truchsesse
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMeA 
process_chunks >>> cD [], cF ['Truchseß'], cH L, CA OMeA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Speidel, Johann Sigmund>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OMeA 
chunk_process_amt_NEW >>> c_A was: OMeA  and amt after matching with amt index is: OMeA
chunk_process_amt_NEW >>>  Return value of inst2 = OMeA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Truchseß']

--------- Start of row | 7504 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spenckhau
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spenckhau, Alexander>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7505 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spercker
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spercker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7506 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spercker [Spenker]
person_process_field_familienname >>> fam1: Spercker
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 18), match='[Spenker]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spercker, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7507 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sperckher
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sperckher, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7508 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sperckher
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK-NÖ-BH / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK-NÖ-BH 
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HK-NÖ-BH 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sperckher, Martin>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK-NÖ-BH 
chunk_process_amt_NEW >>> c_A was: HK-NÖ-BH  and amt after matching with amt index is: HK-NÖ-BH
chunk_process_amt_NEW >>>  Return value of inst2 = HK-NÖ-BH (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7509 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sperkh (Sporck?)
person_process_field_familienname >>> fam1: Sperkh
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 16), match='(Sporck?)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sperkh, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7510 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sperl (Spörl)
person_process_field_familienname >>> fam1: Sperl
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 13), match='(Spörl)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-R
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-R
process_chunks >>> cD [], cF ['Sekretär'], cH Dummy Hofstaat, CA NÖ-R
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sperl, NN>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-R
chunk_process_amt_NEW >>> c_A was: NÖ-R and amt after matching with amt index is: NÖ-R
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-R (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7511 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sperschneider [Speerschneider]
person_process_field_familienname >>> fam1: Sperschneider
person_process_field_familienname >>> fam2: <re.Match object; span=(14, 30), match='[Speerschneider]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA BHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sperschneider, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: BHR
chunk_process_amt_NEW >>>  Return value of inst2 = BHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7512 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sperschneider [Speerschneider]
person_process_field_familienname >>> fam1: Sperschneider
person_process_field_familienname >>> fam2: <re.Match object; span=(14, 30), match='[Speerschneider]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA BHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sperschneider, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: BHR
chunk_process_amt_NEW >>>  Return value of inst2 = BHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7513 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sperschneiter
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA BHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sperschneiter, NN>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: BHR
chunk_process_amt_NEW >>>  Return value of inst2 = BHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7514 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielman
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielman, Balthasar>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7515 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielman
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielman, Johann Baptist Balthasar>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7516 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielmann
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielmann, Balthasar>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7517 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielmann
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielmann, Balthasar>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7518 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielmann
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielmann, Johann Balthasar>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7519 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielmann
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielmann, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7520 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielmann
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielmann, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7521 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielmann
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielmann, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7522 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielmann
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielmann, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7523 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielmann (Spillman)
person_process_field_familienname >>> fam1: Spielmann
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 20), match='(Spillman)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielmann, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7524 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielmann (Spillman)
person_process_field_familienname >>> fam1: Spielmann
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 20), match='(Spillman)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielmann, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK
chunk_process_amt_NEW >>> c_A was: HK and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7525 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielmann (Spillman)
person_process_field_familienname >>> fam1: Spielmann
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 20), match='(Spillman)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlei
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielmann, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7526 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielmann (Spillmann)
person_process_field_familienname >>> fam1: Spielmann
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 21), match='(Spillmann)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielmann, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7527 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielmann (Spilman)
person_process_field_familienname >>> fam1: Spielmann
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 19), match='(Spilman)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielmann, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7528 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielmann (Spilman)
person_process_field_familienname >>> fam1: Spielmann
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 19), match='(Spilman)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielmann, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7529 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spielmann [Spielman]
person_process_field_familienname >>> fam1: Spielmann
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 20), match='[Spielman]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spielmann, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7530 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spiering
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spiering, Franz Wilhelm>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7531 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spillman
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spillman, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7532 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spillmann
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spillmann, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7533 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spillmann
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spillmann, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7534 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spilman
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HK / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HK 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA HK 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spilman, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HK 
chunk_process_amt_NEW >>> c_A was: HK  and amt after matching with amt index is: HK
chunk_process_amt_NEW >>>  Return value of inst2 = HK (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7535 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinaldi Napolitano
person_process_field_titel >>> t_tit = Cavag(liere)
person_process_field_titel >>> t_list = ['Cavag']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = J
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'J', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH J, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinaldi Napolitano, Angelo Maria>}
chunk_get_nm_hst >>> c_H = J
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: J1 (Ehzg.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (J1 (Ehzg.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7536 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler, Johann Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7537 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler, Mathias Ernst>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7538 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler, Mathias Ernst>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7539 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler, Matthias Ernst>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7540 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH L, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler, Matthias Ernst>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7541 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler (Spintler)
person_process_field_familienname >>> fam1: Spindler
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 19), match='(Spintler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler, Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7542 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler (Spintler)
person_process_field_familienname >>> fam1: Spindler
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 19), match='(Spintler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler, Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7543 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler (Spintler)
person_process_field_familienname >>> fam1: Spindler
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 19), match='(Spintler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler, Matthias Ernst>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7544 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler (Spintler)
person_process_field_familienname >>> fam1: Spindler
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 19), match='(Spintler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler, Matthias Ernst>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7545 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler (Spintler)
person_process_field_familienname >>> fam1: Spindler
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 19), match='(Spintler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler, Matthias Ernst>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7546 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler (Spintler)
person_process_field_familienname >>> fam1: Spindler
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 19), match='(Spintler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler, Matthias Ernst>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7547 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler (Spintler)
person_process_field_familienname >>> fam1: Spindler
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 19), match='(Spintler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler, Matthias Ernst>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7548 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler von Hofegg
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['ksl. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['ksl. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['ksl. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['ksl. Rat'], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler von Hofegg, Ignaz>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['ksl. Rat']

--------- Start of row | 7549 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler von Hofegg
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1655-09-26'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1655-09-26'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1655-09-26'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1655-09-26'], cF ['Regimentsrat'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1655-09-26, new: 1655-09-26<1655-09-26>
chunk_process_datum >>> rel, chunk sdw: 1655-09-26<1655-09-26>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler von Hofegg, Ignaz>, 'start_date_written': '1655-09-26<1655-09-26>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7550 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler von Hofegg
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1679-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Präsident'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1679-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Präsident'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1679-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Präsident'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1679-00-00'], cF ['Präsident'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1679-00-00, new: 1679-00-00<1679-06-30>
chunk_process_datum >>> rel, chunk sdw: 1679-00-00<1679-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler von Hofegg, Ignaz>, 'start_date_written': '1679-00-00<1679-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Präsident']

--------- Start of row | 7551 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler von Hofegg
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Landesverordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['NÖ Landesverordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['NÖ Landesverordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['NÖ Landesverordneter'], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler von Hofegg, Ignaz>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['NÖ Landesverordneter']

--------- Start of row | 7552 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler von Wildenstein
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler von Wildenstein, Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7553 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler von Wildenstein
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler von Wildenstein, Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7554 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler von Wildenstein
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler von Wildenstein, Johann Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7555 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler von Wildenstein (Spintler von Wildenstein)
person_process_field_familienname >>> fam1: Spindler von Wildenstein
person_process_field_familienname >>> fam2: <re.Match object; span=(25, 51), match='(Spintler von Wildenstein)'>
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler von Wildenstein, Ignaz Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7556 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler von Wildenstein (Spintler von Wildenstein)
person_process_field_familienname >>> fam1: Spindler von Wildenstein
person_process_field_familienname >>> fam2: <re.Match object; span=(25, 51), match='(Spintler von Wildenstein)'>
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler von Wildenstein, Ignaz Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7557 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler von Wildstein (Spintlervon Wildstein)
person_process_field_familienname >>> fam1: Spindler von Wildstein
person_process_field_familienname >>> fam2: <re.Match object; span=(23, 46), match='(Spintlervon Wildstein)'>
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler von Wildstein, Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7558 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler zu Wildstein
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat', 'Regierungsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat', 'Regierungsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat', 'Regierungsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat', 'Regierungsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler zu Wildstein, Ignatius Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat', 'Regierungsrat']

--------- Start of row | 7559 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler; Wildstein
person_process_field_titel >>> t_tit = NN; Edler
person_process_field_titel >>> t_list = ['NN', 'Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler; Wildstein, Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7560 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindler; Wiltstein
person_process_field_titel >>> t_tit = NN; Herr
person_process_field_titel >>> t_list = ['NN', 'Herr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindler; Wiltstein, Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7561 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spindtler; Wildenstein
person_process_field_titel >>> t_tit = NN; Freiherr
person_process_field_titel >>> t_list = ['NN', 'Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Truchseß'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spindtler; Wildenstein, Johann Philipp>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Truchseß']

--------- Start of row | 7562 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marques
person_process_field_titel >>> t_list = ['Marques']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7563 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marques
person_process_field_titel >>> t_list = ['Marques']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7564 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marques
person_process_field_titel >>> t_list = ['Marques']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7565 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7566 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7567 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7568 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7569 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7570 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7571 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marchese
person_process_field_titel >>> t_list = ['Marchese']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7572 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7573 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7574 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptist>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7575 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7576 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7577 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7578 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7579 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7580 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marchese
person_process_field_titel >>> t_list = ['Marchese']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7581 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7582 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7583 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7584 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7585 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7586 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7587 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7588 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7589 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7590 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7591 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = [Graf]
person_process_field_titel >>> t_list = ['[Graf]']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7592 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7593 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7594 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7595 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7596 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = [Graf]
person_process_field_titel >>> t_list = ['[Graf]']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7597 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7598 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola
person_process_field_titel >>> t_tit = Marchese
person_process_field_titel >>> t_list = ['Marchese']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Reichshofrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Herrenbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
process_chunks >>> cD [], cF ['Reichshofrat'], cH L, CA RHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: RHR
chunk_process_amt_NEW >>>  Return value of inst2 = RHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Reichshofrat']

--------- Start of row | 7599 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola Arquata
person_process_field_titel >>> t_tit = Marchio
person_process_field_titel >>> t_list = ['Marchio']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola Arquata, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7600 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Spinola, de END INPUT, ROW:7600
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola, de, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7601 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola; Arquata
person_process_field_titel >>> t_tit = NN; Marchio
person_process_field_titel >>> t_list = ['NN', 'Marchio']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola; Arquata, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7602 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola; Arquata, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Spinola; Arquata, de END INPUT, ROW:7602
person_process_field_titel >>> t_tit = NN; Marques
person_process_field_titel >>> t_list = ['NN', 'Marques']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola; Arquata, de, Gerardo>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7603 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola; Arquuda, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Spinola; Arquuda, de END INPUT, ROW:7603
person_process_field_titel >>> t_tit = NN; Marques
person_process_field_titel >>> t_list = ['NN', 'Marques']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola; Arquuda, de, Julius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7604 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinola; S. Pietro Nincine di Molteta
person_process_field_titel >>> t_tit = NN; Duca
person_process_field_titel >>> t_list = ['NN', 'Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinola; S. Pietro Nincine di Molteta, Franziskus Maria>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7605 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spinolar
person_process_field_titel >>> t_tit = Marches
person_process_field_titel >>> t_list = ['Marches']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spinolar, Johann Baptista>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7606 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler, Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7607 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler, Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7608 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler, Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7609 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler, Mathias Ernst>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7610 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler, Matthias Ernst>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7611 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler, Matthias Ernst>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7612 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH L, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler, Matthias Ernst>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7613 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler, Matthias Ernst>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7614 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler (Spindler; Wiltstein)
person_process_field_familienname >>> fam1: Spintler
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 30), match='(Spindler; Wiltstein)'>
person_process_field_titel >>> t_tit = NN; Edler
person_process_field_titel >>> t_list = ['NN', 'Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler, Ignaz Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7615 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler (Spindler)
person_process_field_familienname >>> fam1: Spintler
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 19), match='(Spindler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR / Ritterbank
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR 
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler, Ignaz Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR 
chunk_process_amt_NEW >>> c_A was: NÖ-RR  and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7616 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler (Spindler)
person_process_field_familienname >>> fam1: Spintler
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 19), match='(Spindler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH L, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler, Matthias Ernst>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7617 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler (Spindler)
person_process_field_familienname >>> fam1: Spintler
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 19), match='(Spindler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler, Matthias Ernst>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7618 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler (Spindler)
person_process_field_familienname >>> fam1: Spintler
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 19), match='(Spindler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordnete
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler, Matthias Ernst>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7619 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler (Spindler)
person_process_field_familienname >>> fam1: Spintler
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 19), match='(Spindler)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verordneter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Verordneter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Verordneter
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verordneter'], cH L, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler, Matthias Ernst>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Verordneter']

--------- Start of row | 7620 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler; Wildenstein, zu
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler; Wildenstein, zu, Ignaz johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7621 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler; Wildstein
person_process_field_titel >>> t_tit = NN; Edler
person_process_field_titel >>> t_list = ['NN', 'Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regimentsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler; Wildstein, Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7622 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spintler; Wiltstein
person_process_field_titel >>> t_tit = NN; Edler
person_process_field_titel >>> t_list = ['NN', 'Edler']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Regierungsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Regierungsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-RR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-RR
process_chunks >>> cD [], cF ['Regierungsrat'], cH L, CA NÖ-RR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spintler; Wiltstein, Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-RR
chunk_process_amt_NEW >>> c_A was: NÖ-RR and amt after matching with amt index is: NÖ-RR
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-RR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Regierungsrat']

--------- Start of row | 7623 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spnsa
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spnsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7624 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spöckel
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk HOFSTAAT = Landrechtsbeisitzer
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Landrechtsbeisitzer', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer, Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Sekretär'], cH Landrechtsbeisitzer, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spöckel, Johann>}
chunk_get_nm_hst >>> c_H = Landrechtsbeisitzer
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: Landrechtsbeisitzer
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Landrechtsbeisitzer)
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7625 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spöckl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer, Ritterstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Landrechtsbeisitzer'], cH L, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spöckl, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landrechtsbeisitzer']

--------- Start of row | 7626 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spöckl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Registrator'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Registrator'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG? / Registratur
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG? 
process_chunks >>> cD [], cF ['Registrator'], cH Dummy Hofstaat, CA NÖ-LG? 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spöckl, Johann Michael>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG? 
chunk_process_amt_NEW >>> c_A was: NÖ-LG?  and amt after matching with amt index is: NÖ-LG?
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG? (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Registrator']

--------- Start of row | 7627 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7628 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7629 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7630 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7631 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7632 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7633 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7634 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7635 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7636 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa
person_process_field_titel >>> t_tit = Duce
person_process_field_titel >>> t_list = ['Duce']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7637 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7638 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7639 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7640 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7641 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7642 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa (Spnsa)
person_process_field_familienname >>> fam1: Sponsa
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 14), match='(Spnsa)'>
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7643 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sponsa, de
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Sponsa, de END INPUT, ROW:7643
person_process_field_titel >>> t_tit = Duca
person_process_field_titel >>> t_list = ['Duca']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sponsa, de, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7644 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sporck
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sporck, Franz Anton>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7645 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sporck
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = kgl.
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'Statthalter'], 'AMT': 'kgl.'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'Statthalter'], 'AMT': 'kgl.'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'Statthalter'], 'AMT': 'kgl.'}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = kgl.
process_chunks >>> cD [], cF ['Geh. Rat', 'Statthalter'], cH L, CA kgl.
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sporck, Franz Anton>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: kgl.
chunk_process_amt_NEW >>> c_A was: kgl. and amt after matching with amt index is: kgl.
chunk_process_amt_NEW >>>  Return value of inst2 = kgl. (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'Statthalter']

--------- Start of row | 7646 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sporck
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Statthalter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Statthalter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Statthalter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Statthalter'], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sporck, Franz Anton>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Statthalter']

--------- Start of row | 7647 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sporck
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sporck, Franz Anton>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7648 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sporck
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sporck, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7649 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sporck
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sporck, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7650 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sporck
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sporck, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7651 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sporck
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat', 'General', 'Kavallerie'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat', 'General', 'Kavallerie'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat', 'General', 'Kavallerie'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat', 'General', 'Kavallerie'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sporck, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat', 'General', 'Kavallerie']

--------- Start of row | 7652 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sporck
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sporck, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7653 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spork
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = ksl.
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ksl.
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ksl.
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.'], cH ksl., CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spork, Franz Anton>}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat, wirkl.']

--------- Start of row | 7654 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spork
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Hofkriegsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Hofkriegsrat'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spork, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR
chunk_process_amt_NEW >>> c_A was: HKR and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Hofkriegsrat']

--------- Start of row | 7655 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spreeschneider
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlei
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA BHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spreeschneider, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: BHR
chunk_process_amt_NEW >>>  Return value of inst2 = BHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7656 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spreeschneyder
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA BHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spreeschneyder, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: BHR
chunk_process_amt_NEW >>>  Return value of inst2 = BHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7657 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spreschneider
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kanzlist'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kanzlist'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = BHR / Kanzlisten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = BHR 
process_chunks >>> cD [], cF ['Kanzlist'], cH L, CA BHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spreschneider, Johan>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: BHR 
chunk_process_amt_NEW >>> c_A was: BHR  and amt after matching with amt index is: BHR
chunk_process_amt_NEW >>>  Return value of inst2 = BHR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kanzlist']

--------- Start of row | 7658 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spreusack (Spreyssack)
person_process_field_familienname >>> fam1: Spreusack
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 22), match='(Spreyssack)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR-BH (Kriegsbuchhalterei)
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR-BH (Kriegsbuchhalterei)
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA HKR-BH (Kriegsbuchhalterei)
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spreusack, Johann Friedrich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR-BH (Kriegsbuchhalterei)
chunk_process_amt_NEW >>> c_A was: HKR-BH (Kriegsbuchhalterei) and amt after matching with amt index is: HKR-BH (Kriegsbuchhalterei)
chunk_process_amt_NEW >>>  Return value of inst2 = HKR-BH (Kriegsbuchhalterei) (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7659 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Springer
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Raitoffizier'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Springer, NN>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7660 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7661 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ehrenreich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7662 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ehrenreich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7663 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7664 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat, wirkl.']

--------- Start of row | 7665 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Max>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7666 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Max>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7667 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7668 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7669 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7670 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH L, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7671 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-NÖ-LG and amt after matching with amt index is: NÖ-NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7672 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7673 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7674 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7675 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7676 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7677 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH L, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7678 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7679 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH L, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7680 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7681 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7682 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH L, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7683 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7684 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7685 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7686 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7687 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7688 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7689 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat', 'Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat', 'Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat', 'Landmarschall'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat', 'Landmarschall']

--------- Start of row | 7690 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH L, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7691 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7692 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7693 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7694 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7695 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat, wirkl.']

--------- Start of row | 7696 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH L, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7697 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7698 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7699 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7700 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7701 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7702 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7703 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7704 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7705 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH L, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7706 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7707 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7708 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7709 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7710 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7711 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7712 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7713 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat, wirkl.']

--------- Start of row | 7714 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7715 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7716 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7717 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7718 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7719 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH Dummy Hofstaat, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7720 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH L, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7721 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7722 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Landmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG
process_chunks >>> cD [], cF ['Landmarschall'], cH L, CA NÖ-LG
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG
chunk_process_amt_NEW >>> c_A was: NÖ-LG and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7723 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7724 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['ksl. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['ksl. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['ksl. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['ksl. Rat'], cH Dummy Hofstaat, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['ksl. Rat']

--------- Start of row | 7725 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = NÖ Landrecht
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1649-12-27'], 'HOFSTAAT': None, 'FUNKTION': ['Beisitzer'], 'AMT': 'NÖ Landrecht'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1649-12-27'], 'HOFSTAAT': None, 'FUNKTION': ['Beisitzer'], 'AMT': 'NÖ Landrecht'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1649-12-27'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Beisitzer'], 'AMT': 'NÖ Landrecht'}
helper_hsv_match_amt_with_funct >>> r_A = nan
process_chunks >>> cD ['1649-12-27'], cF ['Beisitzer'], cH Dummy Hofstaat, CA NÖ Landrecht
helper_hsv_post_process_dates >>> old: 1649-12-27, new: 1649-12-27<1649-12-27>
chunk_process_datum >>> rel, chunk sdw: 1649-12-27<1649-12-27>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>, 'start_date_written': '1649-12-27<1649-12-27>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ Landrecht
chunk_process_amt_NEW >>> c_A was: NÖ Landrecht and amt after matching with amt index is: NÖ Landrecht
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Landrecht (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Beisitzer']

--------- Start of row | 7726 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1656-07-17'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1656-07-17'], 'HOFSTAAT': None, 'FUNKTION': ['Regimentsrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1656-07-17'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regimentsrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1656-07-17'], cF ['Regimentsrat'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1656-07-17, new: 1656-07-17<1656-07-17>
chunk_process_datum >>> rel, chunk sdw: 1656-07-17<1656-07-17>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>, 'start_date_written': '1656-07-17<1656-07-17>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Regimentsrat']

--------- Start of row | 7727 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1658-09-22'], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1658-09-22'], 'HOFSTAAT': None, 'FUNKTION': ['Raitrat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1658-09-22'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Raitrat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1658-09-22'], cF ['Raitrat'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1658-09-22, new: 1658-09-22<1658-09-22>
chunk_process_datum >>> rel, chunk sdw: 1658-09-22<1658-09-22>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>, 'start_date_written': '1658-09-22<1658-09-22>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Raitrat']

--------- Start of row | 7728 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = NÖ Landschaft
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1658-09-22'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': 'NÖ Landschaft'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1658-09-22'], 'HOFSTAAT': None, 'FUNKTION': [], 'AMT': 'NÖ Landschaft'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1658-09-22'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': [], 'AMT': 'NÖ Landschaft'}
helper_hsv_match_amt_with_funct >>> r_A = nan
process_chunks >>> cD ['1658-09-22'], cF [], cH Dummy Hofstaat, CA NÖ Landschaft
helper_hsv_post_process_dates >>> old: 1658-09-22, new: 1658-09-22<1658-09-22>
chunk_process_datum >>> rel, chunk sdw: 1658-09-22<1658-09-22>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>, 'start_date_written': '1658-09-22<1658-09-22>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ Landschaft
chunk_process_amt_NEW >>> c_A was: NÖ Landschaft and amt after matching with amt index is: NÖ Landschaft
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ Landschaft (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F []

--------- Start of row | 7729 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['ab 1662-11-16<1662-11-16>'], 'HOFSTAAT': None, 'FUNKTION': ['Regiment'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['ab 1662-11-16<1662-11-16>'], 'HOFSTAAT': None, 'FUNKTION': ['Regiment'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['ab 1662-11-16<1662-11-16>'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Regiment'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['ab 1662-11-16<1662-11-16>'], cF ['Regiment'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> inner date: <1662-11-16>
helper_hsv_post_process_dates >>> new_i_date: <1662-11-16>
helper_hsv_post_process_dates >>> old: ab 1662-11-16<1662-11-16>, new: ab 1662-11-16<1662-11-16>
chunk_process_datum >>> rel, chunk sdw: ab 1662-11-16<1662-11-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>, 'start_date_written': 'ab 1662-11-16<1662-11-16>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Regiment']

--------- Start of row | 7730 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1664-11-23'], 'HOFSTAAT': None, 'FUNKTION': ['Herrenstand'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1664-11-23'], 'HOFSTAAT': None, 'FUNKTION': ['Herrenstand'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1664-11-23'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Herrenstand'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1664-11-23'], cF ['Herrenstand'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1664-11-23, new: 1664-11-23<1664-11-23>
chunk_process_datum >>> rel, chunk sdw: 1664-11-23<1664-11-23>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>, 'start_date_written': '1664-11-23<1664-11-23>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Herrenstand']

--------- Start of row | 7731 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmarschall'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Obersthofmarschall'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = EG
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: EG
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: EG
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'EG', 'FUNKTION': ['Obersthofmarschall'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OMaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OMaA
process_chunks >>> cD [], cF ['Obersthofmarschall'], cH EG, CA OMaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>}
chunk_get_nm_hst >>> c_H = EG
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: EG (KW)
chunk_process_amt_NEW >>> c_A in if c_A true: OMaA
chunk_process_amt_NEW >>> c_A was: OMaA and amt after matching with amt index is: OMaA
chunk_process_amt_NEW >>>  Return value of inst2 = OMaA (EG (KW))
chunk_create_relations >>> create realtions called for c_F ['Obersthofmarschall']

--------- Start of row | 7732 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1665-12-22'], 'HOFSTAAT': None, 'FUNKTION': ['Vizehofkanzler'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1665-12-22'], 'HOFSTAAT': None, 'FUNKTION': ['Vizehofkanzler'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1665-12-22'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Vizehofkanzler'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1665-12-22'], cF ['Vizehofkanzler'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1665-12-22, new: 1665-12-22<1665-12-22>
chunk_process_datum >>> rel, chunk sdw: 1665-12-22<1665-12-22>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>, 'start_date_written': '1665-12-22<1665-12-22>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Vizehofkanzler']

--------- Start of row | 7733 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = OudE
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1668-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': 'OudE'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1668-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Landmarschall'], 'AMT': 'OudE'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1668-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landmarschall'], 'AMT': 'OudE'}
helper_hsv_match_amt_with_funct >>> r_A = nan
process_chunks >>> cD ['1668-00-00'], cF ['Landmarschall'], cH Dummy Hofstaat, CA OudE
helper_hsv_post_process_dates >>> old: 1668-00-00, new: 1668-00-00<1668-06-30>
chunk_process_datum >>> rel, chunk sdw: 1668-00-00<1668-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>, 'start_date_written': '1668-00-00<1668-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: OudE
chunk_process_amt_NEW >>> c_A was: OudE and amt after matching with amt index is: OudE
chunk_process_amt_NEW >>>  Return value of inst2 = ÖudE (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landmarschall']

--------- Start of row | 7734 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1668-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Präsident', 'Staatsrates'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1668-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Präsident', 'Staatsrates'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1668-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Präsident', 'Staatsrates'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1668-00-00'], cF ['Präsident', 'Staatsrates'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1668-00-00, new: 1668-00-00<1668-06-30>
chunk_process_datum >>> rel, chunk sdw: 1668-00-00<1668-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>, 'start_date_written': '1668-00-00<1668-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Präsident', 'Staatsrates']

--------- Start of row | 7735 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1671-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofpfalzgrag'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1671-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Hofpfalzgrag'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1671-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Hofpfalzgrag'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD ['1671-00-00'], cF ['Hofpfalzgrag'], cH Dummy Hofstaat, CA Dummy Amt
helper_hsv_post_process_dates >>> old: 1671-00-00, new: 1671-00-00<1671-06-30>
chunk_process_datum >>> rel, chunk sdw: 1671-00-00<1671-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>, 'start_date_written': '1671-00-00<1671-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Hofpfalzgrag']

--------- Start of row | 7736 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> Chunk AMT = ÖodE.u.ÖudE.
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': ['1672-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Obersterbmünzmeister'], 'AMT': 'ÖodE.u.ÖudE.'}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': ['1672-00-00'], 'HOFSTAAT': None, 'FUNKTION': ['Obersterbmünzmeister'], 'AMT': 'ÖodE.u.ÖudE.'}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': ['1672-00-00'], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Obersterbmünzmeister'], 'AMT': 'ÖodE.u.ÖudE.'}
helper_hsv_match_amt_with_funct >>> r_A = nan
process_chunks >>> cD ['1672-00-00'], cF ['Obersterbmünzmeister'], cH Dummy Hofstaat, CA ÖodE.u.ÖudE.
helper_hsv_post_process_dates >>> old: 1672-00-00, new: 1672-00-00<1672-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672-00-00<1672-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Ferdinand Maximilian>, 'start_date_written': '1672-00-00<1672-06-30>'}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: ÖodE.u.ÖudE.
chunk_process_amt_NEW >>> c_A was: ÖodE.u.ÖudE. and amt after matching with amt index is: ÖodE.u.ÖudE.
chunk_process_amt_NEW >>>  Return value of inst2 = ÖodE.u.ÖudE. (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Obersterbmünzmeister']

--------- Start of row | 7737 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7738 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7739 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7740 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignatius>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7741 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7742 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7743 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7744 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7745 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7746 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7747 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7748 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7749 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7750 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7751 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7752 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7753 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7754 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7755 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7756 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7757 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7758 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7759 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7760 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Franz Ignaz>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7761 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Johann Secund>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7762 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Sprinzenstein
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Sprinzenstein, Johann Secundus>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7763 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spruti
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Bauhoftischler'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Bauhoftischler'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Bauhoftischler'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = Hofbauamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = Hofbauamt
process_chunks >>> cD [], cF ['Bauhoftischler'], cH Dummy Hofstaat, CA Hofbauamt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spruti, Michael>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: Hofbauamt
chunk_process_amt_NEW >>> c_A was: Hofbauamt and amt after matching with amt index is: Hofbauamt
chunk_process_amt_NEW >>>  Return value of inst2 = Hofbauamt (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Bauhoftischler']

--------- Start of row | 7764 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Spubno
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Spubno, Innozenz Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7765 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Hilier; Hilaire (Santhilir)
person_process_field_familienname >>> fam1: St. Hilier; Hilaire
person_process_field_familienname >>> fam2: <re.Match object; span=(20, 31), match='(Santhilir)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Hilier; Hilaire, Gilbert>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7766 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julian
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julian, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7767 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julian
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julian, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7768 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julian
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julian, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7769 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julian (St. Julien)
person_process_field_familienname >>> fam1: St. Julian
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(St. Julien)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julian, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7770 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julian (St. Julien)
person_process_field_familienname >>> fam1: St. Julian
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(St. Julien)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julian, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7771 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julian (St. Julien)
person_process_field_familienname >>> fam1: St. Julian
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(St. Julien)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julian, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7772 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julian (St. Julien)
person_process_field_familienname >>> fam1: St. Julian
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(St. Julien)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julian, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7773 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julian (St. Julien)
person_process_field_familienname >>> fam1: St. Julian
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(St. Julien)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julian, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7774 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julian (St. Julien)
person_process_field_familienname >>> fam1: St. Julian
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(St. Julien)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julian, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7775 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julian (St. Julien)
person_process_field_familienname >>> fam1: St. Julian
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(St. Julien)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'LW', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH LW, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julian, Max>}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (LW)
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7776 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julian (St. Julien)
person_process_field_familienname >>> fam1: St. Julian
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(St. Julien)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'LW', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A =  / Kammerherren
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] =  
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Kämmerer'], cH LW, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julian, Max>}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (LW)
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7777 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Max>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7778 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Max>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7779 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7780 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7781 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7782 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7783 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7784 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7785 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7786 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7787 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7788 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7789 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7790 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7791 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7792 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7793 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7794 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Johann albrecht>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7795 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer, Herrenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Landrechtsbeisitzer'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Johann Nikolaus>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landrechtsbeisitzer']

--------- Start of row | 7796 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Landrechtsbeisitzer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Landrechtsbeisitzer, Herrenstand
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Landrechtsbeisitzer'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Johann Nikolaus>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Landrechtsbeisitzer']

--------- Start of row | 7797 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Maximilian >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7798 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Maximilian >}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7799 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Maximilian Adam>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7800 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Maximilian Adam>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7801 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Maximilian Adam>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7802 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Maximilian Adam>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7803 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien (Jean Julian)
person_process_field_familienname >>> fam1: St. Julien
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 24), match='(Jean Julian)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7804 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien (Julian)
person_process_field_familienname >>> fam1: St. Julien
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 19), match='(Julian)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Max>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7805 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien (S. Julian)
person_process_field_familienname >>> fam1: St. Julien
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 22), match='(S. Julian)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7806 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien (St. Julian)
person_process_field_familienname >>> fam1: St. Julien
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(St. Julian)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Max>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7807 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien (St. Julian)
person_process_field_familienname >>> fam1: St. Julien
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(St. Julian)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Oberstfalkenmeister'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OFaA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OFaA
process_chunks >>> cD [], cF ['Oberstfalkenmeister'], cH L, CA OFaA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OFaA
chunk_process_amt_NEW >>> c_A was: OFaA and amt after matching with amt index is: OFaA
chunk_process_amt_NEW >>>  Return value of inst2 = OFaA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Oberstfalkenmeister']

--------- Start of row | 7808 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St. Julien (St. Julian)
person_process_field_familienname >>> fam1: St. Julien
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(St. Julian)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St. Julien, Adam Maximilian>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7809 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> St/Polschingen?
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Reichshofratsagent'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Reichshofratsagent'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = RHR / Agenten
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = RHR 
process_chunks >>> cD [], cF ['Reichshofratsagent'], cH Dummy Hofstaat, CA RHR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: St/Polschingen?, Matthias>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: RHR 
chunk_process_amt_NEW >>> c_A was: RHR  and amt after matching with amt index is: RHR
chunk_process_amt_NEW >>>  Return value of inst2 = RHR (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Reichshofratsagent']

--------- Start of row | 7810 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stächerl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Raitoffizier'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stächerl, Johann>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7811 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stächerl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Raitoffizier'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stächerl, Johann>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7812 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stäckherl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Raitoffizier'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Raitoffizier'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Raitoffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Raitoffizier'], cH L, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stäckherl, Johann>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Raitoffizier']

--------- Start of row | 7813 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadion
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Geh. Rat'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat'], cH L, CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadion, Johann Philipp>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat']

--------- Start of row | 7814 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadion
person_process_field_titel >>> t_tit = Freiherrr
person_process_field_titel >>> t_list = ['Freiherrr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = ksl.
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ksl.
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ksl.
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'ksl.', 'FUNKTION': ['Geh. Rat, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = GR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = GR
process_chunks >>> cD [], cF ['Geh. Rat, wirkl.'], cH ksl., CA GR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadion, Johann Philipp>}
chunk_get_nm_hst >>> c_H = ksl.
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: GR
chunk_process_amt_NEW >>> c_A was: GR and amt after matching with amt index is: GR
chunk_process_amt_NEW >>>  Return value of inst2 = GR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Geh. Rat, wirkl.']

--------- Start of row | 7815 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Truchseß'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Truchseß']

--------- Start of row | 7816 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7817 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Truchseß'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Truchseß'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Truchseß'], cH L, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Truchseß']

--------- Start of row | 7818 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7819 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7820 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7821 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7822 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7823 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7824 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7825 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7826 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7827 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7828 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7829 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7830 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7831 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7832 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7833 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7834 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7835 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7836 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Edelknabe'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'LW', 'FUNKTION': ['Edelknabe'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = nan
helper_hsv_match_amt_with_funct >>> Caught Empty or Empty Stringed Amt -> c[amt] set to = Dummy Amt
process_chunks >>> cD [], cF ['Edelknabe'], cH LW, CA Dummy Amt
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Ferdinand>}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: Dummy Amt
chunk_process_amt_NEW >>> c_A was: Dummy Amt and amt after matching with amt index is: Dummy Amt
chunk_process_amt_NEW >>>  Return value of inst2 = Dummy Amt (LW)
chunk_create_relations >>> create realtions called for c_F ['Edelknabe']

--------- Start of row | 7837 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Gottfried>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7838 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Hanns Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7839 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Hanns Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7840 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Hanns Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7841 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Hanns Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7842 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Hanns Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7843 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Hans Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7844 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiher
person_process_field_titel >>> t_list = ['Freiher']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Hans Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7845 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Hans Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7846 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Johann Carl Joseph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7847 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Johann Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7848 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Johann Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7849 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Johann Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7850 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Johann Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7851 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Johann Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7852 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Johann Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7853 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Johann Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7854 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl (Szathl)
person_process_field_familienname >>> fam1: Stadl
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 14), match='(Szathl)'>
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Johann Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7855 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadl [Stadler]
person_process_field_familienname >>> fam1: Stadl
person_process_field_familienname >>> fam2: <re.Match object; span=(6, 15), match='[Stadler]'>
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer, wirkl.'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer, wirkl.'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadl, Johann Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer, wirkl.']

--------- Start of row | 7856 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadler
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofsattler'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Hofsattler'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'LW', 'FUNKTION': ['Hofsattler'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OStA / Stalloffiziere
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OStA 
process_chunks >>> cD [], cF ['Hofsattler'], cH LW, CA OStA 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadler, Hanns>}
chunk_get_nm_hst >>> c_H = LW
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: LW
chunk_process_amt_NEW >>> c_A in if c_A true: OStA 
chunk_process_amt_NEW >>> c_A was: OStA  and amt after matching with amt index is: OStA
chunk_process_amt_NEW >>>  Return value of inst2 = OStA (LW)
chunk_create_relations >>> create realtions called for c_F ['Hofsattler']

--------- Start of row | 7857 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadler
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadler, Hanns Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7858 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadler
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadler, Hanns Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7859 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadler
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadler, Johann Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7860 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadler
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Kämmerer'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Kämmerer'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = OKäA
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = OKäA
process_chunks >>> cD [], cF ['Kämmerer'], cH L, CA OKäA
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadler, Johann Rudolph>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: OKäA
chunk_process_amt_NEW >>> c_A was: OKäA and amt after matching with amt index is: OKäA
chunk_process_amt_NEW >>>  Return value of inst2 = OKäA (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Kämmerer']

--------- Start of row | 7861 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadlmaier (Stadlmayr)
person_process_field_familienname >>> fam1: Stadlmaier
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 22), match='(Stadlmayr)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Restantenkommissär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Restantenkommissär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Restantenkommissär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Rentamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Restantenkommissär'], cH L, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadlmaier, Ehrenreich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Restantenkommissär']

--------- Start of row | 7862 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadlmaier (Stadlmayr)
person_process_field_familienname >>> fam1: Stadlmaier
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 22), match='(Stadlmayr)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Gegenhandler'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Gegenhandler'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Gegenhandler'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Einnehmeramt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Gegenhandler'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadlmaier, Heinrich>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Gegenhandler']

--------- Start of row | 7863 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadlmaier (Stadtlmayr)
person_process_field_familienname >>> fam1: Stadlmaier
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(Stadtlmayr)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Restantenkommissär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Restantenkommissär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Restantenkommissär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Rentamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Restantenkommissär'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadlmaier, Ehrenreich>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Restantenkommissär']

--------- Start of row | 7864 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadlmaier (Stadtlmayr)
person_process_field_familienname >>> fam1: Stadlmaier
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(Stadtlmayr)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Restantenkommissär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Restantenkommissär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Restantenkommissär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Rentamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Restantenkommissär'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadlmaier, Ehrenreich>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Restantenkommissär']

--------- Start of row | 7865 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadlmaier (Statlmayr)
person_process_field_familienname >>> fam1: Stadlmaier
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 22), match='(Statlmayr)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Restantenkommissär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Restantenkommissär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Restantenkommissär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Rentamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Restantenkommissär'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadlmaier, Ehrenreich>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Restantenkommissär']

--------- Start of row | 7866 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadlmaier (Statlmayr)
person_process_field_familienname >>> fam1: Stadlmaier
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 22), match='(Statlmayr)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Amtsschreiber'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Amtsschreiber'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Amtsschreiber'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Einnehmeramt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Amtsschreiber'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadlmaier, Ehrenreich>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Amtsschreiber']

--------- Start of row | 7867 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadlmaier (Stattlmayr)
person_process_field_familienname >>> fam1: Stadlmaier
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(Stattlmayr)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Gegenhandler'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Gegenhandler'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Gegenhandler'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Einnehmeramt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Gegenhandler'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadlmaier, Ehrenreich>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Gegenhandler']

--------- Start of row | 7868 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadlmaier (Stattlmayr)
person_process_field_familienname >>> fam1: Stadlmaier
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(Stattlmayr)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Gegenhandler'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Gegenhandler'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Gegenhandler'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Einnehmeramt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Gegenhandler'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadlmaier, Ehrenreich>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Gegenhandler']

--------- Start of row | 7869 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadlmaier (Stattlmayr)
person_process_field_familienname >>> fam1: Stadlmaier
person_process_field_familienname >>> fam2: <re.Match object; span=(11, 23), match='(Stattlmayr)'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verwalter'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Verwalter'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Verwalter'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Einnehmeramt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Verwalter'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadlmaier, Ehrenreich>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Verwalter']

--------- Start of row | 7870 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadlmayr
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Restantenkommissär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Restantenkommissär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Restantenkommissär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Rentamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Restantenkommissär'], cH L, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadlmayr, Ehrenreich>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Restantenkommissär']

--------- Start of row | 7871 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadlmayr
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Restantenkommissär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Restantenkommissär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Restantenkommissär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Rentamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Restantenkommissär'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadlmayr, Ehrenreich>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Restantenkommissär']

--------- Start of row | 7872 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stadlmayr [Stattlmayr]
person_process_field_familienname >>> fam1: Stadlmayr
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 22), match='[Stattlmayr]'>
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Restantenkommissär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Restantenkommissär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = nan
helper_hsv_match_hofstaate >>> chunk Hofstaat = Dummy Hofstaat
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'Dummy Hofstaat', 'FUNKTION': ['Restantenkommissär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = NÖ-LG / Rentamt
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = NÖ-LG 
process_chunks >>> cD [], cF ['Restantenkommissär'], cH Dummy Hofstaat, CA NÖ-LG 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stadlmayr, Ehrenreich>}
chunk_get_nm_hst >>> c_H = Dummy Hofstaat
chunk_process_amt_NEW >>> c_A in if c_A true: NÖ-LG 
chunk_process_amt_NEW >>> c_A was: NÖ-LG  and amt after matching with amt index is: NÖ-LG
chunk_process_amt_NEW >>>  Return value of inst2 = NÖ-LG (Dummy Hofstaat)
chunk_create_relations >>> create realtions called for c_F ['Restantenkommissär']

--------- Start of row | 7873 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stahel
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA HKR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stahel, Jacob>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7874 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stahl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA HKR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stahl, Franz Ludwig>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7875 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stahl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA HKR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stahl, Jacob>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7876 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stahl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR  /  Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR  
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA HKR  
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stahl, Jacob>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR  
chunk_process_amt_NEW >>> c_A was: HKR   and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7877 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stahl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA HKR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stahl, Jacob>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7878 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stahl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA HKR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stahl, Jacob Ferdinand>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7879 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stahl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR / Sekretarien
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR 
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA HKR 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stahl, Jakob>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
chunk_process_amt_NEW >>> c_A in if c_A true: HKR 
chunk_process_amt_NEW >>> c_A was: HKR  and amt after matching with amt index is: HKR
chunk_process_amt_NEW >>>  Return value of inst2 = HKR (L1 (Ks.))
chunk_create_relations >>> create realtions called for c_F ['Sekretär']

--------- Start of row | 7880 | -------------- 
person_process_field_vorname >>> r_vor
person_process_field_familienname >>> Stahl
NLP COMPONENT >>> UseExistingAnnotations.py >>> Entered call
NLP COMPONENT >>> UseExistingAnnotations.py >>> doc._excel_row was not in annotations.keys
NLP COMPONENT >>> CreateChunks.py >>> this was finally written, chunk(1) = [{'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}]
NLP COMPONENT >>> CreateChunks.py >>> 	0: chunk: {'DATUM': [], 'HOFSTAAT': None, 'FUNKTION': ['Sekretär'], 'AMT': None}
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> r_H = L
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> chunk is -- > {'DATUM': [], 'HOFSTAAT': 'L', 'FUNKTION': ['Sekretär'], 'AMT': None}
helper_hsv_match_amt_with_funct >>> r_A = HKR
helper_hsv_match_amt_with_funct >>> r_A equals len(Chunks) -> c[amt] = HKR
process_chunks >>> cD [], cF ['Sekretär'], cH L, CA HKR
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Stahl, Jakob>}
chunk_get_nm_hst >>> c_H = L
chunk_create_institution >>> nm_hst is not Dummy Hofstaat: L1 (Ks.)
