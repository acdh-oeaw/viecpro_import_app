----------------
Import MetaInfo:

username: None
django_settings: django_settings.hsv_settings
collection: Import HSV full 12-6-21
spacy_model: using local model
existing_annotations: data/viecpro_HSV_0.jsonl
path_df: /Users/gregorpirgie/gregor/arbeit/acdh/viecpro_import_for_upload/viecpro_import_app/tests/sample_data/full_sample_frame.xlsx
path_hofstaat: data/Kürzel-Hofstaate-EX-ACC-2021-06-02.xlsx
path_aemter: data/Kürzel-Ämter-ACC-EX-2021-02-08.xlsx
path_abbreviations: data/EXCEL-ACCESS_Kürzel-Titel-Orden-2021-01-28.xlsx
logger_level: 20
is_test: True
sample_frame: None
without_testing: True
----------------


get_model >>> Used config cfg class for model configuration
----------------
Using the local model: models/viecpro_ner_hsv_5-21/

NLP-pipeline:
	ner
	add_brackets
	rename_functions
	remove_names
	date_prepocissions
	create_chunks
----------------



--------- Start of row | 0 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Brandis
person_process_field_titel >>> t_tit = Graf , Herr
person_process_field_titel >>> t_list = ['Graf , Herr']
person_process_field_titel >>> Komma in tit: Graf , Herr
person_process_field_titel >>> CREATING SPLIT TITLE Graf from Graf , Herr
person_process_field_titel >>> CREATING SPLIT TITLE Herr from Graf , Herr
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer, wirkl.
NLP COMPONENT >>> CreateChunks.py >>> 1655-08-21
NLP COMPONENT >>> CreateChunks.py >>> bis1678-00-00
NLP COMPONENT >>> CreateChunks.py >>> Regimentsrat
NLP COMPONENT >>> CreateChunks.py >>> Regierungsrat
NLP COMPONENT >>> CreateChunks.py >>> 1672/73-00-00
NLP COMPONENT >>> CreateChunks.py >>> 1678-00-00
NLP COMPONENT >>> CreateChunks.py >>> Raitrat
NLP COMPONENT >>> CreateChunks.py >>> 1672/73-00-00
NLP COMPONENT >>> CreateChunks.py >>> 1678-00-00
NLP COMPONENT >>> CreateChunks.py >>> Verordneter
NLP COMPONENT >>> CreateChunks.py >>> 1662-00-00
NLP COMPONENT >>> CreateChunks.py >>> 1677-00-00
NLP COMPONENT >>> CreateChunks.py >>> Hofkammerrat
NLP COMPONENT >>> CreateChunks.py >>> 1667-00-00
NLP COMPONENT >>> CreateChunks.py >>> wirkl. Geheimer Rat
NLP COMPONENT >>> CreateChunks.py >>> Obersthofmeister
NLP COMPONENT >>> CreateChunks.py >>> ME
NLP COMPONENT >>> CreateChunks.py >>> Vizepräsident
process_chunks >>> len_doc_chunks: 8, len Ämter-Spalte: 6
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_post_process_dates >>> old: 1655-08-21, new: 1655-08-21<1655-08-21>
helper_hsv_post_process_dates >>> old: bis1678-00-00, new: bis1678-00-00
chunk_process_datum >>> rel, chunk sdw: 1655-08-21<1655-08-21>
chunk_process_datum >>> rel, chunk edw: 1655-08-21<1655-08-21>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Brandis, Adam Wilhelm>, 'start_date_written': '1655-08-21<1655-08-21>', 'end_date_written': 'bis1678-00-00'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
parse_date >>>  APIS: Could not parse date: ' bis1678-00-00 ' due to error month must be in 1..12: 
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Brandis, Adam Wilhelm>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Brandis, Adam Wilhelm>, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
helper_hsv_post_process_dates >>> old: 1662-00-00, new: 1662-00-00<1662-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1662-00-00<1662-06-30>
chunk_process_datum >>> rel, chunk edw: 1662-00-00<1662-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Brandis, Adam Wilhelm>, 'start_date_written': '1662-00-00<1662-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
helper_hsv_post_process_dates >>> old: 1667-00-00, new: 1667-00-00<1667-06-30>
chunk_process_datum >>> rel, chunk sdw: 1667-00-00<1667-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Brandis, Adam Wilhelm>, 'start_date_written': '1667-00-00<1667-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Brandis, Adam Wilhelm>}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Brandis, Adam Wilhelm>}
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Brandis, Adam Wilhelm>}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L

--------- Start of row | 1 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Blamesberger (Blemersberger)
person_process_field_familienname >>> fam1: Blamesberger
person_process_field_familienname >>> fam2: <re.Match object; span=(13, 28), match='(Blemersberger)'>
NLP COMPONENT >>> CreateChunks.py >>> Trompeter, Hof-
NLP COMPONENT >>> CreateChunks.py >>> 1701-02-01
NLP COMPONENT >>> CreateChunks.py >>> 1705-04-30
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = J
helper_hsv_match_amt_with_funct >>> ['Hoftrompeter']
helper_hsv_post_process_dates >>> old: 1701-02-01, new: 1701-02-01<1701-02-01>
helper_hsv_post_process_dates >>> inner date: <1705-04-30>
helper_hsv_post_process_dates >>> new_i_date: <1705-04-30>
helper_hsv_post_process_dates >>> old: bis 1705-04-30<1705-04-30>, new: bis 1705-04-30<1705-04-30>
chunk_process_datum >>> rel, chunk sdw: 1701-02-01<1701-02-01>
chunk_process_datum >>> rel, chunk edw: 1701-02-01<1701-02-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Blamesberger, Gotthard >, 'start_date_written': '1701-02-01<1701-02-01>', 'end_date_written': 'bis 1705-04-30<1705-04-30>'}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 2 | -------------- 
replacer >>> r_fun: replaced ,g with: , g
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Abele von , zu Lilienberg
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> CreateChunks.py >>> Sekretär
NLP COMPONENT >>> CreateChunks.py >>> Beamter
NLP COMPONENT >>> CreateChunks.py >>> 1657-00-00
NLP COMPONENT >>> CreateChunks.py >>> 1665-00-00
NLP COMPONENT >>> CreateChunks.py >>> Hofkammerpräsident
NLP COMPONENT >>> CreateChunks.py >>> 1681-00-00
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Sekretär', 'Beamter']
helper_hsv_match_amt_with_funct >>> ['Hofkammerpräsident']
helper_hsv_post_process_dates >>> old: 1657-00-00, new: 1657-00-00<1657-06-30>
helper_hsv_post_process_dates >>> old: 1665-00-00, new: 1665-00-00<1665-06-30>
chunk_process_datum >>> rel, chunk sdw: 1657-00-00<1657-06-30>
chunk_process_datum >>> rel, chunk edw: 1657-00-00<1657-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele von , zu Lilienberg, Christoph Ignaz>, 'start_date_written': '1657-00-00<1657-06-30>', 'end_date_written': '1665-00-00<1665-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_amt >>> c_A is not none and amt_test is True
helper_hsv_post_process_dates >>> old: 1681-00-00, new: 1681-00-00<1681-06-30>
chunk_process_datum >>> rel, chunk sdw: 1681-00-00<1681-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abele von , zu Lilienberg, Christoph Ignaz>, 'start_date_written': '1681-00-00<1681-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 3 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Breuner
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer, wirkl.
NLP COMPONENT >>> CreateChunks.py >>> 1662-00-00
NLP COMPONENT >>> CreateChunks.py >>> 1678-00-00
NLP COMPONENT >>> CreateChunks.py >>> Obersthofmarschall
NLP COMPONENT >>> CreateChunks.py >>> 1684/85
NLP COMPONENT >>> CreateChunks.py >>> 1689
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: LW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: LW
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h:  L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = LW
helper_hsv_match_amt_with_funct >>> ['Kämmerer, wirkl.']
helper_hsv_match_amt_with_funct >>> ['Obersthofmarschall']
helper_hsv_post_process_dates >>> old: 1662-00-00, new: 1662-00-00<1662-06-30>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1662-00-00<1662-06-30>
chunk_process_datum >>> rel, chunk edw: 1662-00-00<1662-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Breuner, Ernst Friedrich>, 'start_date_written': '1662-00-00<1662-06-30>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_process_amt >>> c_A is not none and amt_test is True
helper_hsv_post_process_dates >>> inner date: <1684-06-30 - 85>
helper_hsv_post_process_dates >>> new_i_date: <1684-06-30 - 85>
helper_hsv_post_process_dates >>> old: 1684/85<1684-06-30 - 85>, new: 1684/85<1684-06-30 - 85>
helper_hsv_post_process_dates >>> inner date: <1689-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1689-06-30>
helper_hsv_post_process_dates >>> old: bis 1689<1689-06-30>, new: bis 1689<1689-06-30>
chunk_process_datum >>> rel, chunk sdw: 1684/85<1684-06-30 - 85>
chunk_process_datum >>> rel, chunk edw: 1684/85<1684-06-30 - 85>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Breuner, Ernst Friedrich>, 'start_date_written': '1684/85<1684-06-30 - 85>', 'end_date_written': 'bis 1689<1689-06-30>'}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 4 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Dietmaier (Dietmayr)
person_process_field_familienname >>> fam1: Dietmaier
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 20), match='(Dietmayr)'>
person_process_field_titel >>> t_tit = von Dietmannsdorf; JUD
person_process_field_titel >>> t_list = ['von Dietmannsdorf', 'JUD']
NLP COMPONENT >>> CreateChunks.py >>> Stadtgerichtsbeisitzer
NLP COMPONENT >>> CreateChunks.py >>> 1640
NLP COMPONENT >>> CreateChunks.py >>> Innerer
NLP COMPONENT >>> CreateChunks.py >>> Stadtrichter
NLP COMPONENT >>> CreateChunks.py >>> 1644-48
NLP COMPONENT >>> CreateChunks.py >>> Bürgermeister
NLP COMPONENT >>> CreateChunks.py >>> 1648-53
NLP COMPONENT >>> CreateChunks.py >>> 1656-59
NLP COMPONENT >>> CreateChunks.py >>> 1664-67
process_chunks >>> len_doc_chunks: 3, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = None
helper_hsv_post_process_dates >>> old: 1640, new: 1640<1640>
chunk_process_datum >>> rel, chunk sdw: 1640<1640>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Dietmaier, Johann Georg>, 'start_date_written': '1640<1640>'}
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1640<1640> ' due to error ('Invalid iso date: ', '1640'): 
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1640<1640> ' due to error ('Invalid iso date: ', '1640'): 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Dietmaier, Johann Georg>}
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Dietmaier, Johann Georg>}

--------- Start of row | 5 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Gualto Priorato
person_process_field_lebensdaten >>> NOT PARSED LEBENSDATEN -> 1606/1608, Vicenza bis 1678, Wien

--------- Start of row | 6 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Jörger zu Tollet; Kreusbach, zu
person_process_field_titel >>> t_tit = NN; Freiherr, Graf
person_process_field_titel >>> t_list = ['NN', 'Freiherr, Graf']
person_process_field_titel >>> Komma in tit: Freiherr, Graf
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Freiherr, Graf
person_process_field_titel >>> CREATING SPLIT TITLE Graf from Freiherr, Graf
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
NLP COMPONENT >>> CreateChunks.py >>> 1675-06-04/1677-07-13
NLP COMPONENT >>> CreateChunks.py >>> 1676-00-00
NLP COMPONENT >>> CreateChunks.py >>> ao. Rat
NLP COMPONENT >>> CreateChunks.py >>> Regent
NLP COMPONENT >>> CreateChunks.py >>> 1677-10-06
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_post_process_dates >>> inner date: <1675-06-04 - 1677-07-13>
helper_hsv_post_process_dates >>> new_i_date: <1675-06-04 - 1677-07-13>
helper_hsv_post_process_dates >>> old: 1675-06-04/1677-07-13<1675-06-04 - 1677-07-13>, new: 1675-06-04/1677-07-13<1675-06-04 - 1677-07-13>
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676-00-00<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675-06-04/1677-07-13<1675-06-04 - 1677-07-13>
chunk_process_datum >>> rel, chunk edw: 1675-06-04/1677-07-13<1675-06-04 - 1677-07-13>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Jörger zu Tollet; Kreusbach, zu, Johann Peter>, 'start_date_written': '1675-06-04/1677-07-13<1675-06-04 - 1677-07-13>', 'end_date_written': '1676-00-00<1676-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
get_or_create_amt >>> row iloc 11, row iloc 7: OKäA --- nan
get_or_create_amt >>> row target_iloc[7]: Hofstaat
helper_hsv_post_process_dates >>> old: 1677-10-06, new: 1677-10-06<1677-10-06>
chunk_process_datum >>> rel, chunk sdw: 1677-10-06<1677-10-06>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Jörger zu Tollet; Kreusbach, zu, Johann Peter>, 'start_date_written': '1677-10-06<1677-10-06>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L

--------- Start of row | 7 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Wratislaw
person_process_field_lebensdaten >>> NOT PARSED LEBENSDATEN -> geb. 1670
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> Kanzler
NLP COMPONENT >>> CreateChunks.py >>> 1705
NLP COMPONENT >>> CreateChunks.py >>> L
NLP COMPONENT >>> CreateChunks.py >>> Assessor
NLP COMPONENT >>> CreateChunks.py >>> 1695
NLP COMPONENT >>> CreateChunks.py >>> Oberstlandrichter
NLP COMPONENT >>> CreateChunks.py >>> 1703
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_post_process_dates >>> old: 1705, new: 1705<1705>
chunk_process_datum >>> rel, chunk sdw: 1705<1705>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Wratislaw, Johann Wenzel>, 'start_date_written': '1705<1705>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
get_or_create_amt >>> row iloc 11, row iloc 7: BHKz --- nan
get_or_create_amt >>> row target_iloc[7]: Verwaltungswesen (ldsftl.)
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1705<1705> ' due to error ('Invalid iso date: ', '1705'): 
helper_hsv_post_process_dates >>> old: 1695, new: 1695<1695>
helper_hsv_post_process_dates >>> old: 1703, new: 1703<1703>
chunk_process_datum >>> rel, chunk sdw: 1695<1695>
chunk_process_datum >>> rel, chunk edw: 1695<1695>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Wratislaw, Johann Wenzel>, 'start_date_written': '1695<1695>', 'end_date_written': '1703<1703>'}
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1695<1695> ' due to error ('Invalid iso date: ', '1695'): 
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1703<1703> ' due to error ('Invalid iso date: ', '1703'): 
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1695<1695> ' due to error ('Invalid iso date: ', '1695'): 
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1703<1703> ' due to error ('Invalid iso date: ', '1703'): 

--------- Start of row | 8 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Zinzendorf
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Kämmerer']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Zinzendorf, Franz Carl>}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 9 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Bertram (Bertramb)
person_process_field_familienname >>> fam1: Bertram
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 18), match='(Bertramb)'>
NLP COMPONENT >>> CreateChunks.py >>> Agent, Reichshofrats-
NLP COMPONENT >>> CreateChunks.py >>> /1674/75-00-00
NLP COMPONENT >>> CreateChunks.py >>> 1677-00-00
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = None
helper_hsv_match_amt_with_funct >>> ['Reichshofratsagent']
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75>
helper_hsv_post_process_dates >>> old: ab /1674/75<1674-06-30 - 75>, new: ab /1674/75<1674-06-30 - 75>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: ab /1674/75<1674-06-30 - 75>
chunk_process_datum >>> rel, chunk edw: ab /1674/75<1674-06-30 - 75>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bertram, Franz Winand>, 'start_date_written': 'ab /1674/75<1674-06-30 - 75>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 10 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Bertram, von (Pertram, Pertramb)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Bertram, von (Pertram, Pertramb) END INPUT, ROW:10
person_process_field_familienname >>> fam1: Bertram, von
person_process_field_familienname >>> fam2: <re.Match object; span=(13, 32), match='(Pertram, Pertramb)'>
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> []
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bertram, von, Franz Winand >}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 11 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Bertramb, von (Perchtram)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Bertramb, von (Perchtram) END INPUT, ROW:11
person_process_field_familienname >>> fam1: Bertramb, von
person_process_field_familienname >>> fam2: <re.Match object; span=(14, 25), match='(Perchtram)'>
person_process_field_titel >>> t_tit = Edler
person_process_field_titel >>> t_list = ['Edler']
NLP COMPONENT >>> CreateChunks.py >>> Archivar, geh.
NLP COMPONENT >>> CreateChunks.py >>> Lehensekretär
NLP COMPONENT >>> CreateChunks.py >>> Registrator
NLP COMPONENT >>> CreateChunks.py >>> 1669-00-00
NLP COMPONENT >>> CreateChunks.py >>> 1704-00-00
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Archivar, geh.', 'Lehensekretär', 'Registrator']
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669-00-00<1669-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669-00-00<1669-06-30>
chunk_process_datum >>> rel, chunk edw: 1669-00-00<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bertramb, von, Raban Hermann >, 'start_date_written': '1669-00-00<1669-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 12 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Camot
NLP COMPONENT >>> CreateChunks.py >>> Rottmeister
NLP COMPONENT >>> CreateChunks.py >>> 1694-10-01
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = J
helper_hsv_match_amt_with_funct >>> ['Rottmeister']
helper_hsv_post_process_dates >>> old: 1694-10-01, new: 1694-10-01<1694-10-01>
chunk_process_datum >>> rel, chunk sdw: 1694-10-01<1694-10-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Camot, Hubert>, 'start_date_written': '1694-10-01<1694-10-01>'}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 12 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Camot
NLP COMPONENT >>> CreateChunks.py >>> Rottmeister
NLP COMPONENT >>> CreateChunks.py >>> 1694-10-01
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = J
helper_hsv_match_amt_with_funct >>> ['Rottmeister']
helper_hsv_post_process_dates >>> old: 1694-10-01, new: 1694-10-01<1694-10-01>
chunk_process_datum >>> rel, chunk sdw: 1694-10-01<1694-10-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Camot, Hubert>, 'start_date_written': '1694-10-01<1694-10-01>'}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 13 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Capelini (Capellini)
person_process_field_familienname >>> fam1: Capelini
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 20), match='(Capellini)'>
person_process_field_titel >>> t_tit = Dr.med.
person_process_field_titel >>> t_list = ['Dr.med.']
NLP COMPONENT >>> CreateChunks.py >>> Mediziner, Hof-
NLP COMPONENT >>> CreateChunks.py >>> Professor
NLP COMPONENT >>> CreateChunks.py >>> Fakultät
NLP COMPONENT >>> CreateChunks.py >>> 1669-00-00
NLP COMPONENT >>> CreateChunks.py >>> 1704-00-00
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Capelini, Franz>}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
helper_hsv_post_process_dates >>> old: 1669-00-00, new: 1669-00-00<1669-06-30>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669-00-00<1669-06-30>
chunk_process_datum >>> rel, chunk edw: 1669-00-00<1669-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Capelini, Franz>, 'start_date_written': '1669-00-00<1669-06-30>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L

--------- Start of row | 14 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Crammer (Cramer)
person_process_field_familienname >>> fam1: Crammer
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 16), match='(Cramer)'>
NLP COMPONENT >>> CreateChunks.py >>> Konzipist
NLP COMPONENT >>> CreateChunks.py >>> 1674/75-00-00
NLP COMPONENT >>> CreateChunks.py >>> Sekretär
NLP COMPONENT >>> CreateChunks.py >>> 1675-00-00
process_chunks >>> len_doc_chunks: 3, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Crammer, Peter>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Crammer, Peter>}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
helper_hsv_post_process_dates >>> old: 1675-00-00, new: 1675-00-00<1675-06-30>
chunk_process_datum >>> rel, chunk sdw: 1675-00-00<1675-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Crammer, Peter>, 'start_date_written': '1675-00-00<1675-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L

--------- Start of row | 15 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Dietrichstein
person_process_field_titel >>> t_tit = Graf; Fürst
person_process_field_titel >>> t_list = ['Graf', 'Fürst']
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
NLP COMPONENT >>> CreateChunks.py >>> 1674/75-00-00
NLP COMPONENT >>> CreateChunks.py >>> Abgesandter
NLP COMPONENT >>> CreateChunks.py >>> 1699
NLP COMPONENT >>> CreateChunks.py >>> Bayern
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
NLP COMPONENT >>> CreateChunks.py >>> 1704-00-00
process_chunks >>> len_doc_chunks: 3, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Dietrichstein, Anton>, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
helper_hsv_post_process_dates >>> old: 1699, new: 1699<1699>
chunk_process_datum >>> rel, chunk sdw: 1699<1699>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Dietrichstein, Anton>, 'start_date_written': '1699<1699>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1699<1699> ' due to error ('Invalid iso date: ', '1699'): 
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1699<1699> ' due to error ('Invalid iso date: ', '1699'): 
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Dietrichstein, Anton>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L

--------- Start of row | 16 | -------------- 
replacer >>> r_fun: replaced ;K with: ; K
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Enckevoirth
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> wirkl. Kämmerer
NLP COMPONENT >>> CreateChunks.py >>> Viertelkommissär
NLP COMPONENT >>> CreateChunks.py >>> NÖ Landschaft
NLP COMPONENT >>> CreateChunks.py >>> Raitherr
NLP COMPONENT >>> CreateChunks.py >>> Geheimer Rat
NLP COMPONENT >>> CreateChunks.py >>> NÖ Landrechtsbeisitzer
NLP COMPONENT >>> CreateChunks.py >>> 1694-00-00
NLP COMPONENT >>> CreateChunks.py >>> supernumerärer Regimentsrat
NLP COMPONENT >>> CreateChunks.py >>> 1698-00-00
NLP COMPONENT >>> CreateChunks.py >>> wirkl. Regimentsrat
NLP COMPONENT >>> CreateChunks.py >>> 1704-12-01
NLP COMPONENT >>> CreateChunks.py >>> Verordneter
NLP COMPONENT >>> CreateChunks.py >>> 1716-00-00
NLP COMPONENT >>> CreateChunks.py >>> 1722-00-00
process_chunks >>> len_doc_chunks: 8, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Enckevoirth, Wenzel Adrian Weilhelm Atnon>}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Enckevoirth, Wenzel Adrian Weilhelm Atnon>}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_amt >>> c_A is not none
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Enckevoirth, Wenzel Adrian Weilhelm Atnon>}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Enckevoirth, Wenzel Adrian Weilhelm Atnon>}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
helper_hsv_post_process_dates >>> old: 1694-00-00, new: 1694-00-00<1694-06-30>
chunk_process_datum >>> rel, chunk sdw: 1694-00-00<1694-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Enckevoirth, Wenzel Adrian Weilhelm Atnon>, 'start_date_written': '1694-00-00<1694-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
helper_hsv_post_process_dates >>> old: 1698-00-00, new: 1698-00-00<1698-06-30>
chunk_process_datum >>> rel, chunk sdw: 1698-00-00<1698-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Enckevoirth, Wenzel Adrian Weilhelm Atnon>, 'start_date_written': '1698-00-00<1698-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
helper_hsv_post_process_dates >>> old: 1704-12-01, new: 1704-12-01<1704-12-01>
chunk_process_datum >>> rel, chunk sdw: 1704-12-01<1704-12-01>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Enckevoirth, Wenzel Adrian Weilhelm Atnon>, 'start_date_written': '1704-12-01<1704-12-01>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
helper_hsv_post_process_dates >>> old: 1716-00-00, new: 1716-00-00<1716-06-30>
helper_hsv_post_process_dates >>> inner date: <1722-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1722-06-30>
helper_hsv_post_process_dates >>> old: bis 1722<1722-06-30>, new: bis 1722<1722-06-30>
chunk_process_datum >>> rel, chunk sdw: 1716-00-00<1716-06-30>
chunk_process_datum >>> rel, chunk edw: 1716-00-00<1716-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Enckevoirth, Wenzel Adrian Weilhelm Atnon>, 'start_date_written': '1716-00-00<1716-06-30>', 'end_date_written': 'bis 1722<1722-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L

--------- Start of row | 17 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ); with: ) ;
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Fünfkirchen
person_process_field_titel >>> t_tit = Freiherr
person_process_field_titel >>> t_list = ['Freiherr']
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer, wirkl.
NLP COMPONENT >>> CreateChunks.py >>> L
NLP COMPONENT >>> CreateChunks.py >>> 1669-12-07
NLP COMPONENT >>> CreateChunks.py >>> 1678-00-00
NLP COMPONENT >>> CreateChunks.py >>> Trabantenhauptmann
NLP COMPONENT >>> CreateChunks.py >>> EG
NLP COMPONENT >>> CreateChunks.py >>> 1674/75-00-00
process_chunks >>> len_doc_chunks: 3, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Fünfkirchen, Johann Carl >}
get_or_create_amt >>> row iloc 11, row iloc 7: OKäA  / Leibgarde --- nan
get_or_create_amt >>> row target_iloc[7]: Hofstaat
helper_hsv_post_process_dates >>> old: 1669-12-07, new: 1669-12-07<1669-12-07>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1669-12-07<1669-12-07>
chunk_process_datum >>> rel, chunk edw: 1669-12-07<1669-12-07>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Fünfkirchen, Johann Carl >, 'start_date_written': '1669-12-07<1669-12-07>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
helper_hsv_post_process_dates >>> inner date: <1674-06-30 - 75-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1674-06-30 - 75-06-30>
helper_hsv_post_process_dates >>> old: 1674/75-00-00<1674-06-30 - 75-00-00>, new: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674/75-00-00<1674-06-30 - 75-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Fünfkirchen, Johann Carl >, 'start_date_written': '1674/75-00-00<1674-06-30 - 75-06-30>'}

--------- Start of row | 18 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Gang
NLP COMPONENT >>> CreateChunks.py >>> Zuschroter, Hof-
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = J/L
helper_hsv_match_amt_with_funct >>> ['Hofzuschroter']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Gang, Melchior>}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 19 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
replacer >>> r_fun: replaced )) with: ) )
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Goldstein (Goldtstein)
person_process_field_familienname >>> fam1: Goldstein
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 22), match='(Goldtstein)'>
person_process_field_titel >>> t_tit = Freiherr, Graf
person_process_field_titel >>> t_list = ['Freiherr, Graf']
person_process_field_titel >>> Komma in tit: Freiherr, Graf
person_process_field_titel >>> CREATING SPLIT TITLE Freiherr from Freiherr, Graf
person_process_field_titel >>> CREATING SPLIT TITLE Graf from Freiherr, Graf
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
NLP COMPONENT >>> CreateChunks.py >>> 1683-12-00/(
NLP COMPONENT >>> CreateChunks.py >>> Geh. Rat, wirkl.(76
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: ksl.
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: ksl.
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h:  L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = ksl.
helper_hsv_match_amt_with_funct >>> ['Kämmerer']
helper_hsv_match_amt_with_funct >>> ['Geh. Rat, wirkl.(76']
helper_hsv_post_process_dates >>> old: 1683-12-00/(, new: 1683-12-00/(
chunk_process_datum >>> rel, chunk sdw: 1683-12-00/(
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Goldstein, Heinrich Theobald>, 'start_date_written': '1683-12-00/('}
chunk_process_amt >>> c_A is not none and amt_test is True
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1683-12-00/( ' due to error Could not interpret date.: 
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Goldstein, Heinrich Theobald>}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 20 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Grimani
person_process_field_titel >>> t_tit = Abbé, Kardinal
person_process_field_titel >>> t_list = ['Abbé, Kardinal']
person_process_field_titel >>> Komma in tit: Abbé, Kardinal
person_process_field_titel >>> CREATING SPLIT TITLE Abbé from Abbé, Kardinal
person_process_field_titel >>> CREATING SPLIT TITLE Kardinal from Abbé, Kardinal
NLP COMPONENT >>> CreateChunks.py >>> Abgesandter
NLP COMPONENT >>> CreateChunks.py >>> Savoyen
NLP COMPONENT >>> CreateChunks.py >>> 1690
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Abgesandter', 'Savoyen']
helper_hsv_post_process_dates >>> old: 1690, new: 1690<1690>
chunk_process_datum >>> rel, chunk sdw: 1690<1690>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Grimani, NN>, 'start_date_written': '1690<1690>'}
chunk_process_amt >>> c_A is not none and amt_test is True
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1690<1690> ' due to error ('Invalid iso date: ', '1690'): 
parse_iso_date >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1690<1690> ' due to error ('Invalid iso date: ', '1690'): 

--------- Start of row | 21 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Hämpeli
NLP COMPONENT >>> CreateChunks.py >>> Stift
NLP COMPONENT >>> CreateChunks.py >>> 1636-00-00
NLP COMPONENT >>> CreateChunks.py >>> 1648-00-00
NLP COMPONENT >>> CreateChunks.py >>> Kanzleramtsverwalter
NLP COMPONENT >>> CreateChunks.py >>> 1658-00-00
NLP COMPONENT >>> CreateChunks.py >>> 1668-00-00
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = None
helper_hsv_post_process_dates >>> old: 1636-00-00, new: 1636-00-00<1636-06-30>
helper_hsv_post_process_dates >>> inner date: <1648-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1648-06-30>
helper_hsv_post_process_dates >>> old: bis 1648<1648-06-30>, new: bis 1648<1648-06-30>
chunk_process_datum >>> rel, chunk sdw: 1636-00-00<1636-06-30>
chunk_process_datum >>> rel, chunk edw: 1636-00-00<1636-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Hämpeli, Joachim>, 'start_date_written': '1636-00-00<1636-06-30>', 'end_date_written': 'bis 1648<1648-06-30>'}
helper_hsv_post_process_dates >>> old: 1658-00-00, new: 1658-00-00<1658-06-30>
helper_hsv_post_process_dates >>> inner date: <1668-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1668-06-30>
helper_hsv_post_process_dates >>> old: bis 1668<1668-06-30>, new: bis 1668<1668-06-30>
chunk_process_datum >>> rel, chunk sdw: 1658-00-00<1658-06-30>
chunk_process_datum >>> rel, chunk edw: 1658-00-00<1658-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Hämpeli, Joachim>, 'start_date_written': '1658-00-00<1658-06-30>', 'end_date_written': 'bis 1668<1668-06-30>'}

--------- Start of row | 22 | -------------- 
replacer >>> r_fun: replaced ); with: ) ;
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Hocke
NLP COMPONENT >>> CreateChunks.py >>> Hofkammerrat
NLP COMPONENT >>> CreateChunks.py >>> Prokurator
NLP COMPONENT >>> CreateChunks.py >>> Konsistorialrat
NLP COMPONENT >>> CreateChunks.py >>> Professor
NLP COMPONENT >>> CreateChunks.py >>> jur. Fakultät
NLP COMPONENT >>> CreateChunks.py >>> Landschreiber
process_chunks >>> len_doc_chunks: 4, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Hocke, Johann Martin>}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
get_or_create_amt >>> row iloc 11, row iloc 7: HK / Ritterstand --- nan
get_or_create_amt >>> row target_iloc[7]: Finanzwesen
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Hocke, Johann Martin>}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Hocke, Johann Martin>}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_amt >>> c_A is not none
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Hocke, Johann Martin>}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L

--------- Start of row | 23 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Höller
NLP COMPONENT >>> CreateChunks.py >>> Sommelier, Hof-
NLP COMPONENT >>> CreateChunks.py >>> Ausspeiser
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Hofsommelier', 'Ausspeiser']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Höller, Stephan>}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 24 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> Geh. Rat
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
NLP COMPONENT >>> CreateChunks.py >>> 1672/73-00-00
NLP COMPONENT >>> CreateChunks.py >>> 1701-00-00
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Geh. Rat']
helper_hsv_match_amt_with_funct >>> ['Kämmerer']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Johann Herwart >}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_amt >>> c_A is not none and amt_test is True
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1701-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1701-06-30>
helper_hsv_post_process_dates >>> old: bis 1701<1701-06-30>, new: bis 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Johann Herwart >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1701<1701-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 24 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> Geh. Rat
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
NLP COMPONENT >>> CreateChunks.py >>> 1672/73-00-00
NLP COMPONENT >>> CreateChunks.py >>> 1701-00-00
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Geh. Rat']
helper_hsv_match_amt_with_funct >>> ['Kämmerer']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Johann Herwart >}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_amt >>> c_A is not none and amt_test is True
helper_hsv_post_process_dates >>> inner date: <1672-06-30 - 73-00-00>
helper_hsv_post_process_dates >>> new_i_date: <1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> old: 1672/73-00-00<1672-06-30 - 73-00-00>, new: 1672/73-00-00<1672-06-30 - 73-06-30>
helper_hsv_post_process_dates >>> inner date: <1701-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1701-06-30>
helper_hsv_post_process_dates >>> old: bis 1701<1701-06-30>, new: bis 1701<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>> rel, chunk edw: 1672/73-00-00<1672-06-30 - 73-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Johann Herwart >, 'start_date_written': '1672/73-00-00<1672-06-30 - 73-06-30>', 'end_date_written': 'bis 1701<1701-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 25 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Auersperg
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> Geh. Rat, wirkl.
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
NLP COMPONENT >>> CreateChunks.py >>> 1677-11-12/1682-01-03
NLP COMPONENT >>> CreateChunks.py >>> 1704-00-00
process_chunks >>> len_doc_chunks: 2, len Ämter-Spalte: 2
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = ksl.
helper_hsv_match_amt_with_funct >>> ['Geh. Rat, wirkl.']
helper_hsv_match_amt_with_funct >>> ['Kämmerer']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Franz Carl >}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: ksl.
chunk_process_amt >>> c_A is not none and amt_test is True
helper_hsv_post_process_dates >>> inner date: <1677-11-12 - 1682-01-03>
helper_hsv_post_process_dates >>> new_i_date: <1677-11-12 - 1682-01-03>
helper_hsv_post_process_dates >>> old: 1677-11-12/1682-01-03<1677-11-12 - 1682-01-03>, new: 1677-11-12/1682-01-03<1677-11-12 - 1682-01-03>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677-11-12/1682-01-03<1677-11-12 - 1682-01-03>
chunk_process_datum >>> rel, chunk edw: 1677-11-12/1682-01-03<1677-11-12 - 1682-01-03>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Auersperg, Franz Carl >, 'start_date_written': '1677-11-12/1682-01-03<1677-11-12 - 1682-01-03>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: ksl.
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 26 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Barbo
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
NLP COMPONENT >>> CreateChunks.py >>> 1686-11-15/(
NLP COMPONENT >>> CreateChunks.py >>> 1704-00-00
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Kämmerer']
helper_hsv_post_process_dates >>> old: 1686-11-15/(, new: 1686-11-15/(
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1686-11-15/(
chunk_process_datum >>> rel, chunk edw: 1686-11-15/(
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Barbo, Maximilian >, 'start_date_written': '1686-11-15/(', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_process_amt >>> c_A is not none and amt_test is True
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1686-11-15/( ' due to error Could not interpret date.: 

--------- Start of row | 27 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Bechtoldj (Bechteldi)
person_process_field_familienname >>> fam1: Bechtoldj
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 21), match='(Bechteldi)'>
NLP COMPONENT >>> CreateChunks.py >>> Truchseß
NLP COMPONENT >>> CreateChunks.py >>> 1677-02-12/1677-02-17
NLP COMPONENT >>> CreateChunks.py >>> 1704-00-00
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Truchseß']
helper_hsv_post_process_dates >>> inner date: <1677-02-12 - 1677-02-17>
helper_hsv_post_process_dates >>> new_i_date: <1677-02-12 - 1677-02-17>
helper_hsv_post_process_dates >>> old: 1677-02-12/1677-02-17<1677-02-12 - 1677-02-17>, new: 1677-02-12/1677-02-17<1677-02-12 - 1677-02-17>
helper_hsv_post_process_dates >>> inner date: <1704-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1704-06-30>
helper_hsv_post_process_dates >>> old: bis 1704<1704-06-30>, new: bis 1704<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1677-02-12/1677-02-17<1677-02-12 - 1677-02-17>
chunk_process_datum >>> rel, chunk edw: 1677-02-12/1677-02-17<1677-02-12 - 1677-02-17>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Bechtoldj, Johann Alfonso >, 'start_date_written': '1677-02-12/1677-02-17<1677-02-12 - 1677-02-17>', 'end_date_written': 'bis 1704<1704-06-30>'}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 28 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Borita von Martinitz (Martinitz)
person_process_field_familienname >>> fam1: Borita von Martinitz
person_process_field_familienname >>> fam2: <re.Match object; span=(21, 32), match='(Martinitz)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer, wirkl.
NLP COMPONENT >>> CreateChunks.py >>> 1668-05-11
NLP COMPONENT >>> CreateChunks.py >>> 1677-00-00
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Kämmerer, wirkl.']
helper_hsv_post_process_dates >>> old: 1668-05-11, new: 1668-05-11<1668-05-11>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1668-05-11<1668-05-11>
chunk_process_datum >>> rel, chunk edw: 1668-05-11<1668-05-11>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Borita von Martinitz, Jarislav Bernhard >, 'start_date_written': '1668-05-11<1668-05-11>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 29 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Buzau
person_process_field_titel >>> t_tit = Don
person_process_field_titel >>> t_list = ['Don']
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
NLP COMPONENT >>> CreateChunks.py >>> 1676-00-00
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Kämmerer']
helper_hsv_post_process_dates >>> old: 1676-00-00, new: 1676-00-00<1676-06-30>
chunk_process_datum >>> rel, chunk sdw: 1676-00-00<1676-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Buzau, Altano/Aetano?>, 'start_date_written': '1676-00-00<1676-06-30>'}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 30 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Abensberg-Traun (Abensperg-Traun, Abensperg , Traun)
person_process_field_familienname >>> fam1: Abensberg-Traun
person_process_field_familienname >>> fam2: <re.Match object; span=(16, 52), match='(Abensperg-Traun, Abensperg , Traun)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> RenameFunctions.py >>> removing Ö from ents
NLP COMPONENT >>> CreateChunks.py >>> Landmarschall
NLP COMPONENT >>> CreateChunks.py >>> 1658-09-30 / 1698-00-00
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
NLP COMPONENT >>> CreateChunks.py >>> 1669-03-26 / 1701-00-00 / 1704-00-00
NLP COMPONENT >>> CreateChunks.py >>> OKäA
NLP COMPONENT >>> CreateChunks.py >>> Geh. Rat, ksl.
NLP COMPONENT >>> CreateChunks.py >>> Landmarschall
NLP COMPONENT >>> CreateChunks.py >>> 1698-00-00
NLP COMPONENT >>> CreateChunks.py >>> Geh. Rat
NLP COMPONENT >>> CreateChunks.py >>> 1701-00-00 / 1704-00-00
NLP COMPONENT >>> CreateChunks.py >>> GR
NLP COMPONENT >>> CreateChunks.py >>> Landmarschall
NLP COMPONENT >>> CreateChunks.py >>> Generallandoberst
NLP COMPONENT >>> CreateChunks.py >>> NÖ
NLP COMPONENT >>> CreateChunks.py >>> 1701-00-00
NLP COMPONENT >>> CreateChunks.py >>> NÖ-R
NLP COMPONENT >>> CreateChunks.py >>> Geh. Konferenzrat
NLP COMPONENT >>> CreateChunks.py >>> 1701-00-00 / 1704-00-00
NLP COMPONENT >>> CreateChunks.py >>> GK
NLP COMPONENT >>> CreateChunks.py >>> Generallandoberst
NLP COMPONENT >>> CreateChunks.py >>> 1701-00-00
NLP COMPONENT >>> CreateChunks.py >>> NÖ
NLP COMPONENT >>> CreateChunks.py >>> Generallandoberst
NLP COMPONENT >>> CreateChunks.py >>> 1704-00-00
NLP COMPONENT >>> CreateChunks.py >>> Ö-udE
NLP COMPONENT >>> CreateChunks.py >>> Landmarschall
NLP COMPONENT >>> CreateChunks.py >>> Generallandoberst
NLP COMPONENT >>> CreateChunks.py >>> Ö-udE.
NLP COMPONENT >>> CreateChunks.py >>> 1704-00-00
NLP COMPONENT >>> CreateChunks.py >>> NÖ-LG
process_chunks >>> len_doc_chunks: 11, len Ämter-Spalte: 8
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_post_process_dates >>> old: 1658-09-30 / 1698-00-00, new: 1658-09-30 / 1698-00-00
chunk_process_datum >>> rel, chunk sdw: 1658-09-30 / 1698-00-00
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1658-09-30 / 1698-00-00'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1658-09-30/1698-00-00 ' due to error Could not interpret date.: 
helper_hsv_post_process_dates >>> old: 1669-03-26 / 1701-00-00 / 1704-00-00, new: 1669-03-26 / 1701-00-00 / 1704-00-00
chunk_process_datum >>> rel, chunk sdw: 1669-03-26 / 1701-00-00 / 1704-00-00
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1669-03-26 / 1701-00-00 / 1704-00-00'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_amt >>> c_A is not none
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1669-03-26/1701-00-00/1704-00-00 ' due to error Could not interpret date.: 
helper_hsv_post_process_dates >>> old: 1698-00-00, new: 1698-00-00<1698-06-30>
chunk_process_datum >>> rel, chunk sdw: 1698-00-00<1698-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1698-00-00<1698-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
helper_hsv_post_process_dates >>> old: 1701-00-00 / 1704-00-00, new: 1701-00-00 / 1704-00-00
chunk_process_datum >>> rel, chunk sdw: 1701-00-00 / 1704-00-00
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701-00-00 / 1704-00-00'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1701-00-00/1704-00-00 ' due to error Could not interpret date.: 
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1701-00-00/1704-00-00 ' due to error Could not interpret date.: 
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701-00-00<1701-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_amt >>> c_A is not none
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
helper_hsv_post_process_dates >>> old: 1701-00-00 / 1704-00-00, new: 1701-00-00 / 1704-00-00
chunk_process_datum >>> rel, chunk sdw: 1701-00-00 / 1704-00-00
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701-00-00 / 1704-00-00'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_amt >>> c_A is not none
parse_date_range_individual >>> APIS: Could not interpret date: <class 'ValueError'>
parse_date >>>  APIS: Could not parse date: ' 1701-00-00/1704-00-00 ' due to error Could not interpret date.: 
helper_hsv_post_process_dates >>> old: 1701-00-00, new: 1701-00-00<1701-06-30>
chunk_process_datum >>> rel, chunk sdw: 1701-00-00<1701-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1701-00-00<1701-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_amt >>> c_A is not none
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_amt >>> c_A is not none
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>, 'start_date_written': '1704-00-00<1704-06-30>'}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L
chunk_process_amt >>> c_A is not none
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Abensberg-Traun, Otto Ehrenreich>}
chunk_get_nm_hst >>> USED first hofstaat in chunk get nm hst: L

--------- Start of row | 31 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Adalbert (Adelberth, Adelwerth, Adlberth, Adolbert, Adolberth)
person_process_field_familienname >>> fam1: Adalbert
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 62), match='(Adelberth, Adelwerth, Adlberth, Adolbert, Adolbe>
NLP COMPONENT >>> CreateChunks.py >>> Konzipist
NLP COMPONENT >>> CreateChunks.py >>> 1674-00-00
NLP COMPONENT >>> CreateChunks.py >>> 1677-00-00
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Konzipist']
helper_hsv_post_process_dates >>> old: 1674-00-00, new: 1674-00-00<1674-06-30>
helper_hsv_post_process_dates >>> inner date: <1677-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1677-06-30>
helper_hsv_post_process_dates >>> old: bis 1677<1677-06-30>, new: bis 1677<1677-06-30>
chunk_process_datum >>> rel, chunk sdw: 1674-00-00<1674-06-30>
chunk_process_datum >>> rel, chunk edw: 1674-00-00<1674-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Adalbert, Johann>, 'start_date_written': '1674-00-00<1674-06-30>', 'end_date_written': 'bis 1677<1677-06-30>'}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 32 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Alqui, d'
NLP COMPONENT >>> CreateChunks.py >>> Kammerdienerin
NLP COMPONENT >>> CreateChunks.py >>> 1666-00-00
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: MMT
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: MMT
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = MMT
helper_hsv_match_amt_with_funct >>> ['Kammerdienerin']
helper_hsv_post_process_dates >>> old: 1666-00-00, new: 1666-00-00<1666-06-30>
chunk_process_datum >>> rel, chunk sdw: 1666-00-00<1666-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Alqui, d', Antonia>, 'start_date_written': '1666-00-00<1666-06-30>'}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 33 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Ballestrazi (1704-00-00)
person_process_field_familienname >>> fam1: Ballestrazi
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 24), match='(1704-00-00)'>
NLP COMPONENT >>> CreateChunks.py >>> Türhüter, Saal-
NLP COMPONENT >>> CreateChunks.py >>> 1704-00-00
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: K
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: K
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = K
helper_hsv_post_process_dates >>> old: 1704-00-00, new: 1704-00-00<1704-06-30>
chunk_process_datum >>> rel, chunk sdw: 1704-00-00<1704-06-30>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Ballestrazi, Jakob>, 'start_date_written': '1704-00-00<1704-06-30>'}

--------- Start of row | 34 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Starhemberg (Stahrnberg, von)
person_process_field_familienname >>> Init test: 'von in fam' INPUT: Starhemberg (Stahrnberg, von) END INPUT, ROW:34
person_process_field_familienname >>> fam1: Starhemberg
person_process_field_familienname >>> fam2: <re.Match object; span=(12, 29), match='(Stahrnberg, von)'>
NLP COMPONENT >>> CreateChunks.py >>> Hoffräulein
NLP COMPONENT >>> CreateChunks.py >>> Kammerfräulein
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = CF
helper_hsv_match_amt_with_funct >>> ['Hoffräulein', 'Kammerfräulein']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Starhemberg, NN>}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 35 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Strassoldo, à
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> Edelknabe
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = J
helper_hsv_match_amt_with_funct >>> ['Edelknabe']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Strassoldo, à, Joseph>}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 36 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Focor, de (Defoor; Focoi, de;Focor, de;  Focor, di; Four; Four, de; Fourr, de)
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Focor, de (Defoor; Focoi, de;Focor, de;  Focor, di; Four; Four, de; Fourr, de) END INPUT, ROW:36
person_process_field_familienname >>> fam1: Focor, de
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 78), match='(Defoor; Focoi, de;Focor, de;  Focor, di; Four; F>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer, wirkl.
NLP COMPONENT >>> CreateChunks.py >>> 1657-07-16
NLP COMPONENT >>> CreateChunks.py >>> 1678-00-00
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Kämmerer, wirkl.']
helper_hsv_post_process_dates >>> old: 1657-07-16, new: 1657-07-16<1657-07-16>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1657-07-16<1657-07-16>
chunk_process_datum >>> rel, chunk edw: 1657-07-16<1657-07-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Focor, de, Albrecht Maximilian>, 'start_date_written': '1657-07-16<1657-07-16>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 36 | -------------- 
replacer >>> r_fun: replaced ), with: ) ,
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Focor, de (Defoor; Focoi, de;Focor, de;  Focor, di; Four; Four, de; Fourr, de)
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Focor, de (Defoor; Focoi, de;Focor, de;  Focor, di; Four; Four, de; Fourr, de) END INPUT, ROW:36
person_process_field_familienname >>> fam1: Focor, de
person_process_field_familienname >>> fam2: <re.Match object; span=(10, 78), match='(Defoor; Focoi, de;Focor, de;  Focor, di; Four; F>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer, wirkl.
NLP COMPONENT >>> CreateChunks.py >>> 1657-07-16
NLP COMPONENT >>> CreateChunks.py >>> 1678-00-00
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Kämmerer, wirkl.']
helper_hsv_post_process_dates >>> old: 1657-07-16, new: 1657-07-16<1657-07-16>
helper_hsv_post_process_dates >>> inner date: <1678-06-30>
helper_hsv_post_process_dates >>> new_i_date: <1678-06-30>
helper_hsv_post_process_dates >>> old: bis 1678<1678-06-30>, new: bis 1678<1678-06-30>
chunk_process_datum >>> rel, chunk sdw: 1657-07-16<1657-07-16>
chunk_process_datum >>> rel, chunk edw: 1657-07-16<1657-07-16>
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Focor, de, Albrecht Maximilian>, 'start_date_written': '1657-07-16<1657-07-16>', 'end_date_written': 'bis 1678<1678-06-30>'}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 37 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Strein/Streun?
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Kämmerer']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Strein/Streun?, Franz>}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 38 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Streinn (Streun?)
person_process_field_familienname >>> fam1: Streinn
person_process_field_familienname >>> fam2: <re.Match object; span=(8, 17), match='(Streun?)'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Kämmerer']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Streinn, Franz>}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 39 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Trautson [Thanhausen?]
person_process_field_familienname >>> fam1: Trautson
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 22), match='[Thanhausen?]'>
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Kämmerer']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Trautson, Johann Leopold Donat>}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 40 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Trautson zu Falkenstein; Prechen u. Schroffenstein
person_process_field_titel >>> t_tit = Graf; Freiherr
person_process_field_titel >>> t_list = ['Graf', 'Freiherr']
NLP COMPONENT >>> CreateChunks.py >>> Oberstkämmerer
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: J
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: J
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = J
helper_hsv_match_amt_with_funct >>> ['Oberstkämmerer']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Trautson zu Falkenstein; Prechen u. Schroffenstein, Johann Leopold Donat>}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 41 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Viertl (Viertel; Virtl)
person_process_field_familienname >>> fam1: Viertl
person_process_field_familienname >>> fam2: <re.Match object; span=(7, 23), match='(Viertel; Virtl)'>
NLP COMPONENT >>> CreateChunks.py >>> Akzessist
NLP COMPONENT >>> CreateChunks.py >>> Kanzlist
NLP COMPONENT >>> CreateChunks.py >>> Konzipist
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Akzessist', 'Kanzlist', 'Konzipist']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Viertl, Martin>}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 42 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Zeues e Cortua, de; Fuentes, dela
person_process_field_familienname >>> Init test: 'de in fam' INPUT: Zeues e Cortua, de; Fuentes, dela END INPUT, ROW:42
person_process_field_titel >>> t_tit = Don; Marques
person_process_field_titel >>> t_list = ['Don', 'Marques']
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Kämmerer']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Zeues e Cortua, de; Fuentes, dela, Casparo>}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 43 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Zlar(?)ozi
person_process_field_titel >>> t_tit = Graf
person_process_field_titel >>> t_list = ['Graf']
NLP COMPONENT >>> CreateChunks.py >>> Kämmerer
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: L
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: L
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = L
helper_hsv_match_amt_with_funct >>> ['Kämmerer']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: Zlar?ozi, Stephan>}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 44 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Prato, oo NN
person_process_field_titel >>> t_tit = Gräfin
person_process_field_titel >>> t_list = ['Gräfin']
NLP COMPONENT >>> CreateChunks.py >>> Kammerfräulein
NLP COMPONENT >>> CreateChunks.py >>> Heirat
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: AW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: AW
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = AW
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: NEEDS REVIEW, Maria Eleonora>}

--------- Start of row | 45 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> NN, oo Slavata (Sallawatta)
person_process_field_familienname >>> fam1:  Slavata
person_process_field_familienname >>> fam2: <re.Match object; span=(9, 21), match='(Sallawatta)'>
person_process_field_titel >>> t_tit = NN, Gräfin
person_process_field_titel >>> t_list = ['NN, Gräfin']
person_process_field_titel >>> Komma in tit: NN, Gräfin
person_process_field_titel >>> CREATING SPLIT TITLE NN from NN, Gräfin
person_process_field_titel >>> CREATING SPLIT TITLE Gräfin from NN, Gräfin
NLP COMPONENT >>> CreateChunks.py >>> Obersthofmeisterin
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 1
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: CF
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: CF
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = CF
helper_hsv_match_amt_with_funct >>> ['Obersthofmeisterin']
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: NEEDS REVIEW, NN>}
chunk_process_amt >>> c_A is not none and amt_test is True

--------- Start of row | 46 | -------------- 
person_process_field_vorname >>> this is just a test
person_process_field_familienname >>> Sereni, oo Schaffgotsch
person_process_field_titel >>> t_tit = Gräfin; Gräfin
person_process_field_titel >>> t_list = ['Gräfin', 'Gräfin']
NLP COMPONENT >>> CreateChunks.py >>> Kammerfräulein
NLP COMPONENT >>> CreateChunks.py >>> Heirat
process_chunks >>> len_doc_chunks: 1, len Ämter-Spalte: 0
helper_hsv_match_hofstaate >>> HOFSTAATE PROCESSING ----> h: AW
helper_hsv_match_hofstaate >>> NO CHUNK HOFSTAAT
helper_hsv_match_hofstaate >>> chunk Hofstaat set to: AW
helper_hsv_match_hofstaate >>> FIRST HOFSTAAT = AW
chunk_process_datum >>>  this is the full relation: {'related_person': <Person: NEEDS REVIEW, Maria Franziska>}
